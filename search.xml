<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SEM</title>
      <link href="/2021/09/02/SEM/"/>
      <url>/2021/09/02/SEM/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SEM了解"><a href="#1-SEM了解" class="headerlink" title="1. SEM了解"></a>1. <code>SEM</code>了解</h2><ul><li>搜索引擎营销（Search Engine Marketing，简称SEM）是指企业利用用户使用搜索引擎检索信息的机会，尽可能地将信息传递给目标用户的一种营销方式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SEM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO</title>
      <link href="/2021/09/02/SEO/"/>
      <url>/2021/09/02/SEO/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SEO了解"><a href="#1-SEO了解" class="headerlink" title="1. SEO了解"></a>1. <code>SEO</code>了解</h2><h3 id="1-1-SE"><a href="#1-1-SE" class="headerlink" title="1.1 SE"></a>1.1 SE</h3><p>搜索引擎（Search Engine）的缩写。是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，并将相关信息展示给用户的系统。</p><h4 id="1-1-1-搜索引擎种类"><a href="#1-1-1-搜索引擎种类" class="headerlink" title="1.1.1 搜索引擎种类"></a>1.1.1 搜索引擎种类</h4><h5 id="1-1-1-1-全文搜索引擎"><a href="#1-1-1-1-全文搜索引擎" class="headerlink" title="1.1.1.1 全文搜索引擎"></a>1.1.1.1 全文搜索引擎</h5><ul><li>通过计算机索引程序扫描网页中每个词建立一个索引，当用户查询时，检索程序会根据事前建立的索引进行查询，并将结果反馈给用户。</li><li>全文搜索引擎搜索方法分为按字检索和按词检索。</li><li>举例：谷歌，百度。</li></ul><h5 id="1-1-1-2目录搜索引擎"><a href="#1-1-1-2目录搜索引擎" class="headerlink" title="1.1.1.2目录搜索引擎"></a>1.1.1.2目录搜索引擎</h5><ul><li>以人工或半自动的方式搜集信息，由编辑人员看后，人工进行信息摘要，将信息置于事前确定的分类框架中，这些信息主要面向网站，提供目录浏览服务和章节检索服务。</li><li>类似于浏览器的导航页。</li><li>举例：Yahoo、新浪。</li></ul><h5 id="1-1-1-3-元搜索引擎"><a href="#1-1-1-3-元搜索引擎" class="headerlink" title="1.1.1.3 元搜索引擎"></a>1.1.1.3 元搜索引擎</h5><ul><li>通过一个统一的用户界面帮助用户在多个搜索引擎中选中和利用合适的搜索引擎来实现检索操作，是对分布于网络中的多种检索工具的全局控制机制。</li><li>一种输入，同时用多种搜索引擎进行搜索。然后一起呈现结果。</li><li>360搜索。</li></ul><h3 id="1-2-SEO"><a href="#1-2-SEO" class="headerlink" title="1.2 SEO"></a>1.2 SEO</h3><p><code>Search Engine Optimization</code>的缩写，译为“搜索引擎优化”。SEO是指根据搜索引擎的算法机制，对网站内部和外部进行调整优化，提高网站在搜索引擎中关键词的自然排名，获得更多的展现量，吸引更多目标客户访问网站，达到企业网络营销的目标。</p>]]></content>
      
      
      <categories>
          
          <category> SEO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小数转换二进制</title>
      <link href="/2021/09/02/%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
      <url>/2021/09/02/%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制转换为小数"><a href="#二进制转换为小数" class="headerlink" title="二进制转换为小数"></a>二进制转换为小数</h2><p>直接开干。</p><p>  以<code>0.35</code>为例.</p><p>每次用小数部分乘2，所得积的整数部分作为二进制的一位。</p><ol><li><pre><code>  ​      0.35 x 2=0.7--&gt;0</code></pre></li><li>​      0.70 x 2=1.4–&gt;1</li><li>​      0.40 x 2=0.8–&gt;0</li><li>​      0.80 x 2=1.6–&gt;1</li><li>​      0.60 x 2=1.2–&gt;1</li><li>​      0.20 x 2=0.4–&gt;0<br>   ​    ​    ……</li></ol><p>然后就是<code>3~8</code>不停循环。</p><p>这就是<code>float</code>类型的数据不是很准确的原因。</p><p>这里就看是32位浮点数，还是64位浮点数。32位时，加上整数位取23位为止。64位同理。</p><p>所以0.35转换后为 <code>0101 1001 1001 1001 1001 ... </code></p><h3 id="符号位"><a href="#符号位" class="headerlink" title="符号位"></a>符号位</h3><p>然后，此数为正，S 位为0；</p><h3 id="指数位"><a href="#指数位" class="headerlink" title="指数位"></a>指数位</h3><p>此数二进制为1.011011011… x 2<sup>-2</sup>  ，故指数位为  -2 + 127=125<sub>D</sub> –&gt;<code>01111101</code><sub>b</sub></p><h3 id="基数位"><a href="#基数位" class="headerlink" title="基数位"></a>基数位</h3><p>循环着取23位即可。即 <code>0110 0110 0110 0110 0110 011</code></p><p>故<code>0.35</code> 转换为二进制为 <code>0 0111 1101  0110 0110 0110 0110 0110 011</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十进制转浮点数</title>
      <link href="/2021/09/02/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>/2021/09/02/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-浮点数"><a href="#1-浮点数" class="headerlink" title="1. 浮点数"></a>1. 浮点数</h2><h3 id="1-1-优点相对于定点数来说可表达范围更大的数据类型。"><a href="#1-1-优点相对于定点数来说可表达范围更大的数据类型。" class="headerlink" title="1.1 优点相对于定点数来说可表达范围更大的数据类型。"></a>1.1 优点相对于定点数来说可表达范围更大的数据类型。</h3><h3 id="1-2失去了准确性。"><a href="#1-2失去了准确性。" class="headerlink" title="1.2失去了准确性。"></a>1.2失去了准确性。</h3><h3 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h3><p>浮点数由三部分组成。符号位，偏移位，数据位。</p><p>专业的叫法为：</p><ul><li><p>Sign：表示浮点数是正数或负数。0正，1负。</p></li><li><p>Exponent：指数部分。类似于科学技术法 1x10<sup>12</sup> 中的12的部分，但略有不同。这里是以2为底数而不是10。</p><p> ​        当浮点数为32位时，指数位有8位，表示数为0<code>~</code>2<sup>8</sup> 。如0.00001531 之类的数，指数部分将会是负数。为了表示这些数。便取中间数127进行偏移。即成为了 -2<sup>7</sup> -1~ 2<sup>7</sup> 。原理就是将存入的数都加127，使之个数满足条件以进行存入。</p></li><li><p>Mantissa：基数部分。浮点数具体数值的实际表示。</p></li></ul><h3 id="1-4-种类"><a href="#1-4-种类" class="headerlink" title="1.4 种类"></a>1.4 种类</h3><p>目前标准的浮点数有两种 <code>32 bit</code> 与 <code>64 bit</code> 以后定会出现更高的。</p><ul><li><code>32 bit</code></li></ul><div style="text-align:center"><svg width="400" height="80" xmlns="http://www.w3.org/2000/svg"> <!-- Created with Method Draw - http://github.com/duopixel/Method-Draw/ --> <g>  <title>background</title>  <rect fill="none" id="canvas_background" height="82" width="402" y="-1" x="-1"></rect>  <g display="none" id="canvasGrid">   <rect fill="url(#gridpattern)" stroke-width="0" y="0" x="0" height="100%" width="100%" id="svg_7"></rect>  </g> </g> <g>  <title>Layer 1</title>  <g id="svg_14">   <rect id="svg_1" height="40" width="50" y="20.00001" x="36.3" stroke-width="1.5" stroke="#000" fill="#FABA6F"></rect>   <rect id="svg_2" height="40" width="100" y="20.00001" x="86.3" stroke-width="1.5" stroke="#000" fill="#FABA6F"></rect>   <rect id="svg_3" height="40" width="200" y="20.00001" x="186.3" stroke-width="1.5" stroke="#000" fill="#FABA6F"></rect>   <text xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="16" id="svg_4" y="45.60158" x="40.3" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="#000" fill="#000000">s:1位</text>   <text xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="16" id="svg_5" y="45.60158" x="111.3" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="#000" fill="#000000">E:8位</text>   <text xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="16" id="svg_6" y="45.60158" x="267.3" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="#000" fill="#000000">M:23位</text>  </g> </g></svg></div><ul><li><code>64bit</code></li></ul><div style="text-align:center">  <svg width="400" height="80" xmlns="http://www.w3.org/2000/svg">   <!-- Created with Method Draw - http://github.com/duopixel/Method-Draw/ -->   <g>    <title>background</title>    <rect x="-1" y="-1" width="402" height="82" id="canvas_background" fill="none"></rect>    <g id="canvasGrid" display="none">     <rect id="svg_7" width="100%" height="100%" x="0" y="0" stroke-width="0" fill="url(#gridpattern)"></rect>    </g>   </g>   <g>    <title>Layer 1</title>    <rect fill="#FABA6F" stroke="#000" stroke-width="1.5" x="36.3" y="20.00001" width="50" height="40" id="svg_1"></rect>    <rect fill="#FABA6F" stroke="#000" stroke-width="1.5" x="86.3" y="20.00001" width="100" height="40" id="svg_2"></rect>    <rect fill="#FABA6F" stroke="#000" stroke-width="1.5" x="186.3" y="20.00001" width="200" height="40" id="svg_3"></rect>    <text fill="#000000" stroke="#000" stroke-width="0" stroke-opacity="null" fill-opacity="null" x="40.3" y="45.60158" id="svg_4" font-size="16" font-family="Helvetica, Arial, sans-serif" text-anchor="start" xml:space="preserve">s:1位</text>    <text style="cursor: move;" fill="#000000" stroke="#000" stroke-width="0" stroke-opacity="null" fill-opacity="null" x="111.3" y="45.60158" id="svg_5" font-size="16" font-family="Helvetica, Arial, sans-serif" text-anchor="start" xml:space="preserve">E:11位</text>    <text style="cursor: move;" fill="#000000" stroke="#000" stroke-width="0" stroke-opacity="null" fill-opacity="null" x="267.3" y="45.60158" id="svg_6" font-size="16" font-family="Helvetica, Arial, sans-serif" text-anchor="start" xml:space="preserve">M:52位</text>   </g>  </svg>    </div><p>此文以32位举例说明运算步骤。</p><h2 id="2-十进制转浮点数"><a href="#2-十进制转浮点数" class="headerlink" title="2. 十进制转浮点数"></a>2. 十进制转浮点数</h2><p>具体算法可参考<mark><a href="https://blogofxyz.gitee.io/2021/09/02/%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/">点这里</a></mark> </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮点数 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown进阶</title>
      <link href="/2021/08/31/markdown%E8%BF%9B%E9%98%B6/"/>
      <url>/2021/08/31/markdown%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-文字"><a href="#1-文字" class="headerlink" title="1. 文字"></a>1. 文字</h2><h2 id="2-图进阶"><a href="#2-图进阶" class="headerlink" title="2. 图进阶"></a>2. 图进阶</h2><h3 id="2-1-绘制一般图"><a href="#2-1-绘制一般图" class="headerlink" title="2.1 绘制一般图"></a>2.1 绘制一般图</h3><p>可通过<code>markdown</code>支持部分<code>html</code>标签的方式来实现。</p><p>此处以<code>svg</code>来举例。也可通过其他方法。</p><h4 id="2-1-1-划块种菜"><a href="#2-1-1-划块种菜" class="headerlink" title="2.1.1 划块种菜"></a>2.1.1 划块种菜</h4><p><code>markdown</code> 中会自动对<code>html</code>进行转义。所以，如果你直接放置<code>svg</code>代码于一处，则会乱七八糟。除非你的svg代码只有一层且一个标签。</p><p>解决方法为：</p><p>先声明一个<code>&lt;div&gt; </code> 标签。然后将<code>svg</code>代码放置其中即可。<mark style="border-radius:10px;padding:5px;background-color:#47a6e8">代码中切勿存在空行</mark> </p><p>推荐<code>svg</code>绘图网站：<a href="https://c.runoob.com/more/svgeditor/">传送门</a>.</p><h3 id="2-1-思维导图-amp-流程图"><a href="#2-1-思维导图-amp-流程图" class="headerlink" title="2.1 思维导图 &amp; 流程图"></a>2.1 思维导图 <code>&amp;</code> 流程图</h3><h4 id="2-1-1-语法"><a href="#2-1-1-语法" class="headerlink" title="2.1.1 语法"></a>2.1.1 语法</h4><p>看上去是思维导图。实际是代码块的一个进阶。</p><ul><li><p>用<code>mermaid</code>语言的代码块。</p></li><li><p><code>graph </code> 声明图的方向 。</p><p>​    <code>LR</code>绘制横向图。<code>TD</code>绘制竖向图。还有个<code>RL</code> </p></li><li><p>用字符串区分节点。</p><p>​    相当于各大语言中声明的变量名。</p><p>​    每一节点只需声明一次即可。</p></li><li><p>用 <code>[ ]</code>、<code>()</code> 与 <code>{}</code> ，以及<code>//</code>与<code>\\</code> 组合呈现出不同的边框形状声明节点文本内容。</p></li><li><p>用<code>-</code> 、<code>=</code> 与 <code>&gt;</code> 组合在横线上显示文本</p><p>​    <code>-</code>与<code>=</code>越多，连线越长。</p><p>​    <code>&gt;</code>表示横线的箭头。</p></li></ul><h4 id="2-1-2-不同边框图"><a href="#2-1-2-不同边框图" class="headerlink" title="2.1.2 不同边框图"></a>2.1.2 不同边框图</h4><ul><li>代码：</li></ul><pre class="line-numbers language-none"><code class="language-none">graph LRA[a_text]--&gt;B(b_text)--&gt;C([c_text])--&gt;D[(d_text)]--&gt;E((e_text)) F&gt;f_text]--&gt;G{g_text}--&gt;H{{h_text}}--&gt;I[/i_text/]--&gt;J[\j_text\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>效果：<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRA[a_text]--&gt;B(b_text)--&gt;C([c_text])--&gt;D[(d_text)]--&gt;E((e_text)) F&gt;f_text]--&gt;G{g_text}--&gt;H{{h_text}}--&gt;I[/i_text/]--&gt;J[\j_text\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-1-3-横线显示文本"><a href="#2-1-3-横线显示文本" class="headerlink" title="2.1.3 横线显示文本"></a>2.1.3 横线显示文本</h4><ul><li><p>代码：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TBA1 --&gt; B1A2 ==&gt; B2A3 -.-&gt; B3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-1-3-横向图演示："><a href="#2-1-3-横向图演示：" class="headerlink" title="2.1.3 横向图演示："></a>2.1.3 横向图演示：</h4><ul><li><p>代码</p><pre class="line-numbers language-none"><code class="language-none">graph LRa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>思维导图</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-1-4-纵向图演示"><a href="#2-1-4-纵向图演示" class="headerlink" title="2.1.4 纵向图演示"></a>2.1.4 纵向图演示</h4><ul><li><p>代码</p><pre class="line-numbers language-none"><code class="language-none">graph TDa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>思维导图</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TDa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-2-饼图"><a href="#2-2-饼图" class="headerlink" title="2.2 饼图"></a>2.2 饼图</h3><p>​    同为<code>mermaid</code>的进阶</p><p>​    语法更简单，直接看例子。</p><ul><li> 代码：</li></ul>   <pre class="line-numbers language-none"><code class="language-none">pie title 我班人数比"男生":95"女生":5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">pie title 我班人数比"男生":95"女生":5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="n-参考"><a href="#n-参考" class="headerlink" title="n.参考"></a>n.参考</h2><p>参考链接：<a href="https://iseex.github.io/2020-11/typora-diagram/">Typora也能做思维导图？做笔记的又一个绝佳选择？ </a></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2021/08/30/Java/"/>
      <url>/2021/08/30/Java/</url>
      
        <content type="html"><![CDATA[<h2 id="学前准备"><a href="#学前准备" class="headerlink" title="学前准备"></a>学前准备</h2><ul><li><p>安装JDK</p><p>​    浏览器搜索下载即可。</p></li><li><p>安装IDE，推荐idea。</p><p>​    网上有破解资源，但不推荐。</p><p>​    第一。学生时期可选择教育优惠，试用一年。或者社区版免费使用，功能并没有少多少。</p><p>​    第二。不利于以后就业。如果就业之后使用Java开发。则可能被追究法律责任，另外，公司也都会自行购买企业版本。</p><p>​    学生试用：<a href="https://www.jetbrains.com/shop/eform/students">传送门</a> 需要大学邮箱，另可能大多数学校需要提供学生证或其他学生身份证件。试用期为大学毕业前。</p><p>​    其他身份请前往浏览：<a href="https://www.jetbrains.com/zh-cn/idea/buy/#discounts?billing=yearly">传送门</a></p></li></ul><h2 id="1-数据类型（与其他语言相比）"><a href="#1-数据类型（与其他语言相比）" class="headerlink" title="1. 数据类型（与其他语言相比）"></a>1. 数据类型（与其他语言相比）</h2><h3 id="1-1-String类型"><a href="#1-1-String类型" class="headerlink" title="1.1 String类型"></a>1.1 String类型</h3><p>  ​    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2021/08/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2021/08/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="⚪-计算机系统组成"><a href="#⚪-计算机系统组成" class="headerlink" title="⚪. 计算机系统组成"></a>⚪. 计算机系统组成</h2><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TDa[计算机系统]--&gt;aa[硬件系统]aa--&gt;aaa[主机]aaa--&gt;aaaa[中央处理器]aaaa--&gt;aaaaa[运算器]aaaa--&gt;aaaab[控制器]aaa--&gt;aaab[内存]aaab--&gt;aaaba[只读存储器]aaab--&gt;aaabb[随机存储器]aaab--&gt;aaabc[高速存储器]aa--&gt;aab[外设]aab--&gt;aaba[I/O设备]aab--&gt;aabb[外存]aab--&gt;aabc[网络设备]a--&gt;ab[软件系统]ab--&gt;aba[系统软件]aba--&gt;abaa[操作系统]aba--&gt;abab[程序设计语言]aba--&gt;abac[实用程序]ab--&gt;abb[应用软件]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-计算机的结构体系"><a href="#1-计算机的结构体系" class="headerlink" title="1. 计算机的结构体系"></a>1. 计算机的结构体系</h2><h3 id="1-1-冯诺依曼机结构"><a href="#1-1-冯诺依曼机结构" class="headerlink" title="1.1 冯诺依曼机结构"></a>1.1 冯诺依曼机结构</h3><p>特指硬件。</p><ul><li><p>输入设备</p></li><li><p>存储器</p></li><li><p>运算器</p></li><li><p>控制器</p></li><li><p>输出设备</p><p>现在计算机–&gt;微型计算机，一般由CPU（运算器、控制器）、I\O接口（输入输出接口）、存储器（外存）组成。</p></li></ul><h4 id="1-1存储器（外存）"><a href="#1-1存储器（外存）" class="headerlink" title="1.1存储器（外存）"></a>1.1存储器（外存）</h4><p>  存储程序与数据。</p><h4 id="1-2-CPU"><a href="#1-2-CPU" class="headerlink" title="1.2 CPU"></a>1.2 CPU</h4><h5 id="1-2-1-运算器"><a href="#1-2-1-运算器" class="headerlink" title="1.2.1 运算器"></a>1.2.1 运算器</h5><p>功能：进行算数逻辑运算<br>        组成：算术逻辑运算单元（ALU）、累加器、其他寄存器 </p><h5 id="1-2-2-控制器"><a href="#1-2-2-控制器" class="headerlink" title="1.2.2 控制器"></a>1.2.2 控制器</h5><h4 id="1-2-3-…"><a href="#1-2-3-…" class="headerlink" title="1.2.3 ….."></a>1.2.3 …..</h4><h2 id="2-计算机软件系统"><a href="#2-计算机软件系统" class="headerlink" title="2. 计算机软件系统"></a>2. 计算机软件系统</h2><h3 id="2-1-软件"><a href="#2-1-软件" class="headerlink" title="2.1 软件"></a>2.1 软件</h3><p>用于计算机的各种程序统称为软件。</p><h4 id="2-1-1-系统程序"><a href="#2-1-1-系统程序" class="headerlink" title="2.1.1 系统程序"></a>2.1.1 系统程序</h4><p>用来简化程序设计，提高计算机的使用效率，发挥和扩大计算机的功能和用途。</p><ul><li><p>操作系统：用来管理计算机硬件、软件资源，自动调度用户的作业程序，使多个用户能有效地共用一套系统。</p></li><li><p>语言程序。如汇编程序、编译程序等。</p></li><li><p>各种服务性程序。</p></li></ul><h4 id="2-1-2-应用程序"><a href="#2-1-2-应用程序" class="headerlink" title="2.1.2 应用程序"></a>2.1.2 应用程序</h4><p>   用户利用计算机来解决某些问题而编制的程序。</p><h2 id="3-计算机的其他组成"><a href="#3-计算机的其他组成" class="headerlink" title="3. 计算机的其他组成"></a>3. 计算机的其他组成</h2><h3 id="3-1-数据"><a href="#3-1-数据" class="headerlink" title="3.1 数据"></a>3.1 数据</h3><p>能被计算机所能接收、在储、处理的数字、字符、字母、汉字、图片、图形、声音、动画、视频<br>等都称为计算机的数据。</p><h4 id="3-1-1-数"><a href="#3-1-1-数" class="headerlink" title="3.1.1  数"></a>3.1.1  数</h4><h5 id="3-1-1-1-数的流通"><a href="#3-1-1-1-数的流通" class="headerlink" title="3.1.1.1 数的流通"></a>3.1.1.1 数的流通</h5><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRa[输入信息]==转换==&gt;b[二进制形式]==输出==&gt;c[信息]a--便于存储,运算--&gt;bb--输出--&gt;c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-计算机的发展趋势"><a href="#4-计算机的发展趋势" class="headerlink" title="4. 计算机的发展趋势"></a>4. 计算机的发展趋势</h2><ul><li>微型化。手机，智能手表等。 </li><li>巨型化。超级计算机。</li><li>网络化。通讯网络。</li><li>智能化。机器人。</li><li>多媒体化。声音，视频，动画等媒体的诞生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 笔记&amp;心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行处理乱码</title>
      <link href="/2021/08/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%84%E7%90%86%E4%B9%B1%E7%A0%81/"/>
      <url>/2021/08/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%84%E7%90%86%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>主要原因是命令行默认 ASCII 编码字符。而这种编码不支持中文的。</p><p>所以如果需要在命令行打开一些文件，或者类似的操作。</p><h2 id="1-转换编码方式。"><a href="#1-转换编码方式。" class="headerlink" title="1.转换编码方式。"></a>1.转换编码方式。</h2><h3 id="1-1-操作前在命令行输入"><a href="#1-1-操作前在命令行输入" class="headerlink" title="1.1 操作前在命令行输入"></a>1.1 操作前在命令行输入</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CHCP 65001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后回车。</p><p>小黑框会返回这么一行字：<mark>Active code page: 65001</mark></p><p>这就转换成功了。然后在进行之前要进行的操作。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言与cmd</title>
      <link href="/2021/08/23/c%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/08/23/c%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-C语言执行cmd命令"><a href="#1-C语言执行cmd命令" class="headerlink" title="1. C语言执行cmd命令"></a>1. C语言执行cmd命令</h2><h3 id="1-1-启动程序"><a href="#1-1-启动程序" class="headerlink" title="1. 1   启动程序"></a>1. 1   启动程序</h3><ul><li><p>start  path+.exe /.exe</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    system("start explorer.exe");    system("start S:\\S_Chat\\WeChat\\WeChat.exe");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-2-关机"><a href="#1-2-关机" class="headerlink" title="1.2 关机"></a>1.2 关机</h3><h4 id="1-2-1-shutdown-s-t-time"><a href="#1-2-1-shutdown-s-t-time" class="headerlink" title="1.2.1  shutdown  -s -t  time"></a>1.2.1  shutdown  -s -t  time</h4><p>  ​    -s 为shutdown命令中关机的指令，还可以是  “-f：强制关机” , “-r：重启”,“-h：休眠”，“-l：注销”。</p><p>  ​    -t 为倒计时形式。</p><p>  ​    time为倒计时的时间，单位为秒。</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    system("shutdown -f -t 300"); //五分钟后强制关机    //system("shutdown -s -t 300");//五分钟后关机    // system("shutdown -r -t 300");//五分钟后重启    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-在某时刻关机"><a href="#1-2-2-在某时刻关机" class="headerlink" title="1.2.2 在某时刻关机"></a>1.2.2 在某时刻关机</h4><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/at%E8%A2%AB%E5%BC%83%E7%94%A8%E5%90%8E%E5%A6%82/f2fd63e0-7f52-49cb-854f-1f505a6edee1">在11:11时刻关机</a></p><h3 id="1-3-取消上边的关机命令"><a href="#1-3-取消上边的关机命令" class="headerlink" title="1.3 取消上边的关机命令"></a>1.3 取消上边的关机命令</h3><p>命令行输入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shutdown -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车。</p><h2 id="2-有啥用呢？"><a href="#2-有啥用呢？" class="headerlink" title="2. 有啥用呢？"></a>2. 有啥用呢？</h2><p>首先说启动那个。</p><h3 id="2-1-cmd启动命令"><a href="#2-1-cmd启动命令" class="headerlink" title="2.1 cmd启动命令"></a>2.1 cmd启动命令</h3><h4 id="2-1-1-恶搞。"><a href="#2-1-1-恶搞。" class="headerlink" title="2.1.1 恶搞。"></a>2.1.1 恶搞。</h4><p>可以写一个for循环连续打开同一个程序多次。吓唬一下。当然。别弄成百上千次。我没试过，也不敢试。</p><p>但前提是你需要了解他（她）电脑程序安装的布局。如果他（她）没有整理电脑的习惯。那就好说了，每个程序都安装在 C 盘，不需要去了解。</p><pre class="line-numbers language-none"><code class="language-none">C:\Program FilesC:\Program Files (x86)//懂得都懂<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>QQ，微信，各个视频软件不给他安排上？让他开开眼？</p><h4 id="2-1-2-桌面启动程序"><a href="#2-1-2-桌面启动程序" class="headerlink" title="2.1.2 桌面启动程序"></a>2.1.2 桌面启动程序</h4><p>可以用c++或C语言的桌面开发，写一个自己的桌面启动程序。一个图标，一个点击事件，一个启动就建成了。</p><h3 id="2-2-cmd-关机命令"><a href="#2-2-cmd-关机命令" class="headerlink" title="2.2 cmd 关机命令"></a>2.2 cmd 关机命令</h3><h4 id="2-2-1-恶搞"><a href="#2-2-1-恶搞" class="headerlink" title="2.2.1 恶搞"></a>2.2.1 恶搞</h4><p>也是恶搞。</p><h4 id="2-2-2-平时省劲"><a href="#2-2-2-平时省劲" class="headerlink" title="2.2.2 平时省劲"></a>2.2.2 平时省劲</h4><p>平时关机需要点至少两下。如果是个生成的exe程序，或者bat文件，双击即可。</p><h4 id="2-2-3-省电"><a href="#2-2-3-省电" class="headerlink" title="2.2.3 省电"></a>2.2.3 省电</h4><p>有的时候下载东西。但是自己有事不能看着，这个命令就能用了。大概估算时间。然后设置下就行了。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python入门</title>
      <link href="/2021/08/21/python%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/21/python%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假期自学，代码都是自己看视频时联想敲得，与任何教程无关。为了腾电脑的地方，顺便复习下，学习后边的内容，就整理了下之前敲得。注释与解释不太多（别幻想别人写一大堆注释，有写注释的习惯吗），看的话凑活看，不懂得可以联系me。其他内容持续更新。</p><p>python版本:3.6.6</p><p>python在线运行代码：-&gt;&gt;&gt;&gt; [菜鸟在线 Editor](<a href="https://www.runoob.com/try/runcode.php?filename=HelloWorld&amp;type=python3">菜鸟教程在线编辑器 (runoob.com)</a>)-&gt;&gt;&gt;&gt;</p><h2 id="1-if…elif…else"><a href="#1-if…elif…else" class="headerlink" title="1. if…elif…else"></a>1. if…elif…else</h2><ul><li><p>if条件中 且 用‘and’ 或 用‘or’</p></li><li><p> keyword: “产生随机字符串”，</p></li></ul> <pre class="line-numbers language-python" data-language="python"><code class="language-python"> ##  if条件中 且 用‘and’ 或 用‘or’  n = input("输入任意数字")if int(n) % 2 == 0 and n != "0":    print("输入为偶数")elif int(n) % 2 != 0:    print("输入为奇数")else:    print("输入非数字或 “0” ")  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-运算符、文件写入、id"><a href="#2-运算符、文件写入、id" class="headerlink" title="2. 运算符、文件写入、id()"></a>2. 运算符、文件写入、id()</h2><h3 id="2-1运算符"><a href="#2-1运算符" class="headerlink" title="2.1运算符"></a>2.1运算符</h3><h4 id="2-1-1-算数与赋值运算符"><a href="#2-1-1-算数与赋值运算符" class="headerlink" title="2.1.1 算数与赋值运算符"></a>2.1.1 算数与赋值运算符</h4><p>​    几个与其他语言不同，或比较特殊的几个。</p><p>​      ** ：幂，如2**5为2^5^ 。</p><p>​      //  ：取整除，“/”，所得结果带小数部分。“//”，结果只有整数部分。</p><p>​      /=、//=、**=：类比理解。</p><h3 id="2-1-2-逻辑运算符"><a href="#2-1-2-逻辑运算符" class="headerlink" title="2.1.2 逻辑运算符"></a>2.1.2 逻辑运算符</h3><p>​    在条件组合时不是其他语言那样  “||”, “&amp;&amp;”,  “!”。</p><ul><li>“||” 用 “or” 替换</li><li>“&amp;&amp;” 用 “and” 替换</li><li>“!” 用 “not” 替换</li></ul><h3 id="2-1-3-位运算符"><a href="#2-1-3-位运算符" class="headerlink" title="2.1.3 位运算符"></a>2.1.3 位运算符</h3><p>​    &amp; <sup>与</sup> ， | <sup>或</sup>， ^ <sup>异或</sup> ， ~ <sup>取反</sup>， &lt;&lt; <sup>左移</sup>， &gt;&gt; <sup>右移</sup>。运算只针对于二进制数，运算逻辑与其他语言相同。</p><p>其中用到  <mark>格式化输出字符串</mark> 。可通过目录前往了解学习。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  encoding:utf-8#  keyword:“input”，“逻辑运算符”，“&gt;&gt;”，“&lt;&lt;”，“|”，“^”,#      “变量地址”from os import errora = input("输入字符串")x = input("输入一个数 X:")# 输入xtry:    x = int(x)except:    print("输入数据有误!")    exit(0)# 输入yy = input("输入一个数Y:")try:    y = int(y)except:    print("输入数据有误!")    exit(0)templea = "% 8s\n% 10d\n"templeb = "{0: &gt;9s}\n{1: &gt;#20b}\n"templec = "{0: &gt;9s}\n{1: &gt;#20b}\n{2: &gt;#20b}\n"a += "\n"prs1 = [    ("原数(x):", x),    ("原数(y):", y),    ("值id(x)：", id(x)),]prs2 = [    ("二进制(x):", x),    ("二进制(y):", y),    ("右，移(x&gt;&gt;2):", x &gt;&gt; 2),    ("左，移(x&lt;&lt;2):", x &lt;&lt; 2),]prs3 = [    ("异或(x^y,y^x):", x ^ y, y ^ x),    ("_或(x|y，y|x):", x | y, y | x),]for item in prs1:    a += templea % itemfor item in prs2:    a += templeb.format(item[0], item[1])for item in prs3:    a += templec.format(item[0], item[1], item[2])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-while"><a href="#3-while" class="headerlink" title="3. while"></a>3. while</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword: “while”，“ascll转字符”，“字符转ascll”，#      “ord()”，“chr()”，#  encoding:utf-8string = "A"#  根据字符取ascll码值a = ord("A")i = 0while i &lt; 60:  #  根据ascll码值取字符  st ring += chr(a)  if i % 3 == 0: print()  print(a, ":" + chr(a), end=" ")  i = i + 1  a = a + 1print(string)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-序列"><a href="#4-序列" class="headerlink" title="4. 序列"></a>4. 序列</h2><h3 id="4-1-序列的基本操作"><a href="#4-1-序列的基本操作" class="headerlink" title="4.1 序列的基本操作"></a>4.1 序列的基本操作</h3><p>加，乘，切片，索引</p><p> 序列支持负数索引, 当序数为负时从右向左数<br>        list(start,end.stop)<br>         序列为’[]’,元组为’()’,字典为’{}’。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  encoding:utf-8#  keyword：“序列加”，“序列乘”，“序列切片”，“序列索引”print("")name=["张三","张四","张五","李四","李五"]number=[1,2,3,4]#  乘print(name*3)#  加print("name+number", name+number,"")#  切片【从第二个开始，到第六个以前，间隔为2】namenum=name+numberprint("namenum[1:5:2]",namenum[1:5:2],"")print("namenum[:5:]",namenum[:5:],"")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-序列的常见方法"><a href="#4-2-序列的常见方法" class="headerlink" title="4.2 序列的常见方法"></a>4.2 序列的常见方法</h3><p>max，min，exist，unexist</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword:“序列最大值”，“序列最小值”，“序列存在判断”，#  encoding:utf-8numbers=[1.2,123.1,456,486,456,156,111,222,333]print(numbers)print("最大值",max(numbers))print("最小值",min(numbers))print("长度",len(numbers))x=456print("是否存在",x,x in numbers)y=678print("是否不存在",y,y not in numbers)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-序列的遍历"><a href="#4-3-序列的遍历" class="headerlink" title="4.3 序列的遍历"></a>4.3 序列的遍历</h3><p>for…in…(enumerate())</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># for a b in c :#  表达式#  a:序列(index)，当前值得序号。#  b:临时量，取出来的值都赋值给他，#  c:序列#  keyword:"for循环","遍历",# encoding:utf-8name = ["dage", "erge", "sange", "laosi", "laowu", "xiaoliu"]print(name)a=0for linshide in name:  if a % 2==0 :    ## 换行    print("\n")  print("\t"+linshide,end="")## 不换行打印  a=a+1 ## python不支持自增|自减运算for xuhao, name in enumerate(name):  if xuhao % 2==0 :    print("")  print("\t序号是：" + str(xuhao), "\t名字是" + name, end="")##不换行输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-序列的-增-删-改"><a href="#4-4-序列的-增-删-改" class="headerlink" title="4.4 序列的 增 删 改"></a>4.4 序列的 增 删 改</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#!keyword: “序列修改”，“序列增”，“序列删”，“序列改”，#  定义:# encoding:utf-8name = ["dage", "erge", "sange", "laosi", "laowu", "xiaoliu"]print("\n定义的数组为：")print(name)#  添加:name.append("laomo")print("\n添加一个后的数组：" )print(name)#  通过索引获取指定值。直接重新赋值。strint=name[0]="dageda"print("\n添加一个后再修改下的数组：")print(name)# 删除指定“dage” 即 删除name[2]del name[0]print("\n删除 name[0] 的数组：")print(name)#  等效的代码#  name.remove("dage")#  print("\n删除“dage” 的数组：")#  print(name)# 二次删除会出错（删除不存在的元素会出错）#  name.remove("dage")#  print(name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-序列的统计求和"><a href="#4-5-序列的统计求和" class="headerlink" title="4.5 序列的统计求和"></a>4.5 序列的统计求和</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#! keyword：“序列求和”，“序列统计出现次数”，# encoding:utf-8nums=[123,456,789,321,951,654,789,123,654,987,147,258,654,852,147,369,741,852,963]nums_plus=nums*2# 统计某一元素出现次数if 147 in nums_plus :  print("147出现次数为\t:"+ str(nums_plus.count(147)))else:  print(str(147)+"不存在")# 全部元素求和（仅限元素全为数字类型）print("nums和为\t:"+str(sum(nums))+"\nnums_plus和为\t:"+str(sum(nums_plus)))# keyword：“序列求和”，“序列统计出现次数”，nums=[123,456,789,321,951,654,789,123,654,987,147,258,654,852,147,369,741,852,963]nums_plus=nums*2##? 统计某一元素出现次数if 147 in nums_plus :  print("147出现次数为\t:"+ str(nums_plus.count(147)))else:  print(str(147)+"不存在")##? 全部元素求和（仅限元素全为数字类型）print("nums和为\t:"+str(sum(nums))+"\nnums_plus和为\t:"+str(sum(nums_plus)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-序列的排序"><a href="#4-6-序列的排序" class="headerlink" title="4.6 序列的排序"></a>4.6 序列的排序</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># / 1.sort(interable【序列名】，key=none【关键词，默认为none,-# / -可设置为 “str.lower” 不区分大小写】，-# / -reverse【降序，boolean变量，默认为升序(false)】)# / 2.排序可用sorted()方法，也可用 “yigexulie.sort()” -# / -sorted()三个参数（序列名，关键词，逆序）.返回一个序列-# / - sort()两个参数（关键词，逆序）#  keyword：“序列排序”，# encoding:utf-8# 定义俩序列names=["toms","Jone","Tony","alice","obma"]numbers=[123,456,789,321,951,654,789,123,654,987,147,258,654,852,147,369,741,852,963]print("\n原序列names:")print(names)print("\n原序列numbers:")print(numbers)#排序names.sort()numbers.sort()print("\n升序排列names(区分大小写)：")print(names)#添加key使不区分大小写names.sort(key=str.lower)print("\n升序排列names(不区分大小写)：")print(names)print("\n升序排列numbers：")print(numbers)names.sort(key=str.lower,reverse=True)print("\n降序排列names：")print(names)print("\n降序排列numbers：")numbers= sorted(numbers,reverse=True)print(numbers)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-序列推导式"><a href="#4-7-序列推导式" class="headerlink" title="4.7 序列推导式"></a>4.7 序列推导式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"># list= [a for b in c]# a:表达式; b: 为迭代个数; c: 临时量,每次取出来东西都赋值给他.# encoding:utf-8import mathimport random##example: 一般定义法list1 = []for i in range(20):  list1.append(random.randint(30, 99))print("list1")print(list1)##example:定义从30~99的20个随机数。list2 = []list2 = [random.randint(30, 99) for i in range(20)]print("\nlist2:")print(list2)##example:定义从2开始的偶数立方数列list3 = []list3 = [math.pow(i, 3) for i in range(1, 20, 3)]##//range(start，end，step)函数print("\nlist3:")print(list3)##example:从list4中运算后筛选符合条件的##//newlist=[expression for var in list if condition]list4 = []list4 = [math.sqrt(i) for i in list3 if math.sqrt(i) % 2 == 0]print("\nlist4:")print(list4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-元组"><a href="#5-元组" class="headerlink" title="5. 元组"></a>5. 元组</h2><p>元组不能编辑，不能删除一个或多个元素，只能整个删除</p><p> 序列为’[]’,元组为’()’,字典为’{}’。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># encoding:utf-8num = 156st = "string_a"one_index = [12, 45, 65, 78]##? 声明一个很杂的元组tup1 = (  num,  st,  one_index,)print("有一个元组为:")print(tup1)##! tuple 在声明是，如果只有一个值，必须在后边加逗号tup2 = ("123456321",)tup3 = ("ab", "cd", "ef", 98765132, "#$%$&amp;")print("组合后的元组：")##? 元组可进行 '+','*' 运算alltuple = tup1 + tup2 + tup3print(alltuple * 2)##? 输出指定序号元素t = input("请输入元组序数" + "0~" + str(len(alltuple)))print(alltuple[int(t) - 1]) # 序号从 0 开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-字典"><a href="#6-字典" class="headerlink" title="6. 字典"></a>6. 字典</h2><h3 id="6-1-字典的生成"><a href="#6-1-字典的生成" class="headerlink" title="6.1 字典的生成"></a>6.1 字典的生成</h3><p>序列为’[]’,元组为’()’,字典为’{}’。</p><p>示例：</p><p>​    声明两个序列，用于合成字典.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dicti_b = {"拉丁语": "Latin", "鸟语": "!&amp;*/"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"># encoding:utf-8#  声明一个字典.dicti_a = {}dicti_b = {"拉丁语": "Latin", "鸟语": "!&amp;*/"}# 两种声明方法。dicti_c = dict()# 声明两个序列，用于合成字典.English = ["Chinese", "English", "Japanese", "Russian", "French", "German", "Korean"]Chinese = ["中文", "英语", "日语", "俄语", "法语", "德语", "韩语"]# zip函数压缩.didi = zip(Chinese, English)# 生成函数.dicti_d = dict(didi)print("声明的字典a")print(dicti_a)print("声明的字典b")print(dicti_b)print("声明的字典c")print(dicti_c)print("声明的字典d")print(dicti_d)# clear用于清除字典里的所有项。dicti_c.clear()# 输出 clear 后的字典 d 中的元素及个数print("dicti_c clear()后" + "dicti_c还有" + str(len(dicti_c)) + "个元素")print(dicti_c)# del用于删除对象del dicti_dprint("delete后的 e")# 插入一个错误调试.try:  print(dicti_d)except NameError as error:  print(error)finally:  print("结束")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-字典的基本操作"><a href="#6-2-字典的基本操作" class="headerlink" title="6.2. 字典的基本操作"></a>6.2. 字典的基本操作</h3><p> add &amp; delete &amp; 遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># keyword：“字典添加”，“字典删除”，“字典遍历”# encoding :utf-8name = { "吴晓咖","刘佳怡","徐之才","单久思","曹侃儿","开俊峰","倪吉本","苗人凤","荣家达","狄俊娥","牛春波","莫桑石",}sign = {"子鼠", "丑牛", "寅虎", "卯兔", "辰龙", "巳蛇", "午马", "未羊", "申猴", "酉鸡", "戌狗", "亥猪"}# 压缩。term = zip(name, sign)roster = dict(term)print(roster)# 遍历输出for xxoo in roster.items():    print(xxoo)print("你想要添加还是删除?")t = input("1.删除。\n2.添加。\n3.修改\n")if t == "1":    del_name = input("请输入删除人的名字:")    ## 删除操作    if del_name in roster:        del roster[del_name]    else:        print("输入人名不存在.操作结束!")elif t == "2":    add_name = input("请输入姓名:")    if add_name in roster:        print("此人已录入。操作结束!")        else:        add_sign = input("请输入此人生肖:")            if add_sign not in sign:            print("兄弟，十二生肖都不会背呀。")        else:            ## 添加操作。            roster[add_name] = add_signelif t == "3":    edit_name = input("请输入修改人姓名：")    if edit_name in roster:        print(roster[edit_name])            edit_sign = input("请输入修改人生肖：")            if edit_sign not in sign:            print("兄弟，十二生肖都不会背呀。")        else:            roster[edit_name] = edit_signelse:    print("你好像没有按要求输入呦（1 or 2）！")## 只输出值，不输出标签的遍历。for ooxx in roster.keys():    print(ooxx)## 值与标签双遍历。for key, value in roster.items():    print("键是：" + key + "    值为：" + value)##  两种输出值的方法.假设输入要查询的人名变量为 find_name##  1.直接根据人名进行输出，没有后边的判断则会出错。##    print(roster[find_name] if edit_name in roster else print("没有此人"))##  2.根据人名判断是否存在，当不存在时输出后一位指定的值。默认为 “none”##    print(roster.get(find_name,"没有此人"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7. 字符串"></a>7. 字符串</h2><h3 id="7-1-字符串的基本操作"><a href="#7-1-字符串的基本操作" class="headerlink" title="7.1 字符串的基本操作"></a>7.1 字符串的基本操作</h3><p>“+”，“split”，“切片”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword:“字符串拼接”，“字符串分割”，“字符串切片”，#          “字符串计算长度”.# encoding: utf-8poem_first = "老夫聊发少年狂，左牵黄，右擎苍，锦帽貂裘，千骑卷平冈。为报倾城随太守，亲射虎，看孙郎。"poem_second = "酒酣胸胆尚开张。鬓微霜，又何妨！持节云中，何日遣冯唐？会挽雕弓如满月，西北望，射天狼。"letter = "        Transportation has been greatly changed in the past few years. In ancient days, people used to travel by horse or carriage. The journey was often tiring and tedious. Then people had buses, trains and ships, which could shorten the time of the long-distance trip. \n\n\t\t\t"#  字符串拼接all_poem = poem_first + poem_secondprint("整首诗如下：" + all_poem)#  字符串分割#  split(a,b):a为分割时的字符,b为分割次数，默认为无限（-1也是无限次）#  如果不指定第一个参数，默认以空白字符--#  --不管空多少，都算一个，eg：“   ”，“ ”，“\n” 都是一样的）strs = all_poem.split("。", -1)print("整首诗按句号分割为：")for linshi in strs:    print("@" + linshi)# 或者print(strs)#  截取字符串 poem_first[a:b:c]（同序列切片.）a = 2b = 30c = 3print(    "\n分片字符串为(开始" + str(a) + "，到" + str(b) + "，间隔为" + str(c) + ": ", poem_first[a:b:c])#  去除空格# 去除开始与末尾的\t,\n,\r(回车)与" "空格可以去除多个。特殊字符只能去除一个。print("\n英语作文去空格:\t", letter.strip(" "))# 去除左侧空格或特殊字符# print("\n英语作文去空格:\t", letter.lstrip(" "))# 去除左侧空格或特殊字符# print("\n英语作文去空格:\t", letter.rstrip(" "))#  字母变为小写。print("\n英语作文变小写:\t", letter.lower())#  字母变大写。print("\n英语作文变大写:\t", letter.upper())#  替代字符。print("\n英语作文空格换位'@'：\t", letter.replace(" ", "@"))#  计算字符串长度.#  不区分字母与汉字。字母与汉字都算一个长度。print("\n不区分字母与汉字长度为：" + str(len(poem_first)))#  以 GBK 编码格式输出字符串长度print("\nUTF-8计数长度为：" + str(len(poem_first.encode("gbk"))))#  以 UTF-8 编码格式输出字符串长度print("\nUTF-8计数长度为：" + str(len(poem_first.encode())))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-字符串索引"><a href="#7-2-字符串索引" class="headerlink" title="7.2. 字符串索引"></a>7.2. 字符串索引</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword:“字符串查找”，“字符串存在判断”，mulanshi = "唧唧复唧唧，木兰当户织。不闻机杼声，唯闻女叹息。问女何所思，问女何所忆。女亦无所思，女亦无所忆。昨夜见军帖，可汗大点兵，军书十二卷，卷卷有爷名。阿爷无大儿，木兰无长兄，愿为市鞍马，从此替爷征。东市买骏马，西市买鞍鞯，南市买辔头，北市买长鞭。旦辞爷娘去，暮宿黄河边，不闻爷娘唤女声，但闻黄河流水鸣溅溅。旦辞黄河去，暮至黑山头，不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。万里赴戎机，关山度若飞。朔气传金柝，寒光照铁衣。将军百战死，壮士十年归。归来见天子，天子坐明堂。策勋十二转，赏赐百千强。可汗问所欲，木兰不用尚书郎，愿驰千里足，送儿还故乡。爷娘闻女来，出郭相扶将；阿姊闻妹来，当户理红妆；小弟闻姊来，磨刀霍霍向猪羊。开我东阁门，坐我西阁床，脱我战时袍，著我旧时裳。当窗理云鬓，对镜帖花黄。出门看火伴，火伴皆惊忙：同行十二年，不知木兰是女郎。雄兔脚扑朔，雌兔眼迷离；双兔傍地走，安能辨我是雄雌？"mulan = "木兰"#  检测某一字符创是否存在于目标字符串（可以加入切片操作）print(mulan in mulanshi[0:5:])print(mulan in mulanshi[0:10:])#  find()   输出指定 “木兰” 在 “木兰诗” 中第一次出现的索引 -1 。print(" “木兰” \t第一次\t出现位置为：\t", mulanshi.find(mulan, 7, 390))#  rfind()  输出指定 “木兰” 在 “木兰诗” 中最后一次出现的索引 -1print(" “木兰” \t第一次\t出现位置为：\t", mulanshi.rfind(mulan))#  index()  输出“女”第一次出现的位置。print(" “女” \t\t第一次\t出现位置为：\t", mulanshi.index("女"))#  count()  输出出现次数print(    "“木兰”\t\t出现次数为：\t", mulanshi.count("木兰"), "\n “女” \t\t出现次数为：\t", mulanshi.count("女"))#  判断是否以指定字符串结尾或者开始。同样可加入切片。print(mulanshi.startswith("唧唧复唧唧", 0, 20))print(mulanshi.startswith("唧唧复唧唧", 1, 20))print(mulanshi.endswith("雄雌？"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-格式化字符串"><a href="#7-3-格式化字符串" class="headerlink" title="7.3. 格式化字符串"></a>7.3. 格式化字符串</h2><p>% 格式化</p><p>% [命名] [宽度] . [精度度] typecode</p><ul><li>表示右对齐。- 表示左对齐。<br>‘ ‘ 一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。<br>0 表示使用 0 填充。<br>“宽度”： 表示填充后的宽度。<br>精确度：表示小数点后精度 。</li></ul><table><thead><tr><th align="center">typecode</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%r</td><td align="center">字符串 (repr()显示)</td></tr><tr><td align="center">%g</td><td align="center">指数(e)或浮点数 (根据显示长度)</td></tr><tr><td align="center">%s</td><td align="center">字符串(str()显示)</td></tr><tr><td align="center">%G</td><td align="center">指数(E)或浮点数 (根据显示长度)</td></tr><tr><td align="center">%c</td><td align="center">单个字符输出</td></tr><tr><td align="center">%b(i)(d)(o)(x)</td><td align="center">二、八、十、十六进制整数</td></tr><tr><td align="center">%e（E）</td><td align="center">指数(基底写为e(E))</td></tr><tr><td align="center">%f(F)</td><td align="center">浮点数,与上相同</td></tr><tr><td align="center">%%</td><td align="center">字符”%”</td></tr></tbody></table><p>format 格式化<br>{ [index] <b style="color:red"> [ <b style="color:yellow">[:<b style="color:green">[fill] align</b> ] [sign] [#] [width] [.precision] [type] </b> ]</b>  }</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">index</td><td align="center">默认按顺序自动分配。可选参数，用于指定设置格式的对象在–<br>#           –参数列表中的索引位置，从0开始。</td></tr><tr><td align="center">fill</td><td align="center">可选参数，用于空白处填充的字符。</td></tr><tr><td align="center">align</td><td align="center">可选参数， 用于指定对齐方式。</td></tr><tr><td align="center">&lt;</td><td align="center">左对齐。</td></tr><tr><td align="center">&gt;</td><td align="center">右对齐。</td></tr><tr><td align="center">^</td><td align="center">居中对齐。需指定宽度。</td></tr><tr><td align="center">=</td><td align="center">右对齐。只对数字类型有用，尤其用于输出负数。</td></tr><tr><td align="center"><br>sign</td><td align="center">可选参数，用于指定有无符号数<br>‘+’：正数添加‘+’号,负数添加‘-’号。<br>‘-‘：只有负号添加符号。<br>‘ ‘:正数加空格补齐，负数加负号</td></tr><tr><td align="center">#</td><td align="center">可选参数，加#时输出二进制，八进制十六进制会添加  0b  0o  0x 前缀</td></tr><tr><td align="center">type</td><td align="center">…….</td></tr><tr><td align="center">type</td><td align="center">含义</td></tr><tr><td align="center">:–:</td><td align="center">:——————————–:</td></tr><tr><td align="center">s</td><td align="center">对字符串格式格式化</td></tr><tr><td align="center">b</td><td align="center">十进制数转换为二进制再格式化；</td></tr><tr><td align="center">d</td><td align="center">十进制数</td></tr><tr><td align="center">o</td><td align="center">十进制数转换为八进制再格式化；</td></tr><tr><td align="center">c</td><td align="center">十进制数转换为对应Unicode字符</td></tr><tr><td align="center">%</td><td align="center">显示百分比(默认小数后六位)</td></tr><tr><td align="center">x,X</td><td align="center">十进制数转换为十六进制再格式化</td></tr><tr><td align="center">e,E</td><td align="center">转换为科学计数法再格式化</td></tr><tr><td align="center">f,F</td><td align="center">转换为浮点数再格式化(默认六位小数)</td></tr><tr><td align="center">g,G</td><td align="center">e与f或E与F之间互换</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python">import mathtemplate_a = "编号:%-08d\t 网站名：%s \t 网站：https://www.%s.com\t 公司老总:%4s\t"temps = [    (1, "百度", "baidu", "李彦宏"),    (2, "淘宝", "taobao", "马云"),    (3, "腾讯", "tencent", "马化腾"),]print(template_a)for ls in temps:    print(template_a % ls)strin1 = "马云,\t身价:\t{0:,.5f}".format(5621684.1531516)strin2 = "刘强东,\t身价:\t{0:.10f}".format(464553126.89645321384932)print(strin1)print(strin2)print(    "π为：{:.12f}\n'1801001'\t的二进制为：\t{:#b}\n'86159452'\t的八进制为：\t{:#o}\n'4532154'\t的十六进制为：\t{:#x}".format(        math.pi, 1801001, 86159452, 4532154    ))print(    "这是abc：\t{abc}\n这是bcd：\t{bcd:#x}\n这是cde：\t{cde:}\n".format(        abc="1354632", bcd=8465123, cde=[123, 456, 789]    ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-python数据存储原理"><a href="#8-python数据存储原理" class="headerlink" title="8. python数据存储原理"></a>8. python数据存储原理</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“存储原理”，“id()”，“id”# encoding: utf-8def print_id(a, b):    print("a:{0: &gt;15s} id(a): {1: &gt;15s} ".format(str(a), str(id(a))))    print("b:{0: &gt;15s} id(b): {1: &gt;15s} ".format(str(b), str(id(b))))    print()print("{: ^40s}\n".format("-----------string测试----------"))a = "ss1263"b = "ssssss1263"print_id(a, b)a = "ssssss1263"print("修改a的值")print_id(a, b)print("修改b的值")b = "ss1263"print_id(a, b)print("删除a，b")del (a, b)c = "ss1263"print("id(c)", id(c))print("{: ^40s}\n".format("-----------number测试----------"))a = "451263"b = "1263"print_id(a, b)a = "1263"print("修改a")print_id(a, b)print("修改b")b = "451263"print_id(a, b)print("删除a与b")del (a, b)c = "451263"print("id(c)", id(c))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-正则表达式"><a href="#9-正则表达式" class="headerlink" title="9.正则表达式"></a>9.正则表达式</h2><p>基础正则了解：<a style="font-family:’kaiti’;">[点我]([正则语法整理 | X-Y-Z`s Blog (gitee.io)](https://blogofxyz.gitee.io/2021/08/14/正则语法整理/))</a></p><h3 id="9-1-查找"><a href="#9-1-查找" class="headerlink" title="9.1 查找"></a>9.1 查找</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  match &amp; search &amp; findall#  match     匹配整个字符。#  search    在字符串中匹配#  findall 匹配字符串中所有符合表达式的字符串。#  keyword：“正则表达式”，“正则匹配”，“正则”# encoding: utf-8# !!!!!!!!!!导入reimport re#  1.re.match(regular_express,string)#    比较字符串是否符合要求.elements = [    "19137934628",    "15946295618",    "78945631245",    "48651534582@qq.com",    "68453121@163.com",    "12348621@qweewq.com" "15648934529@gmail.com",    "萨博隔热垫石膏板",    "地方不对付认购",    "调查表身高多少",]regular_express_a = [    r"[0-9]{0,12}@(qq|gmail|163)\.com",    r"1[0-9]{10}$",    r"[^0-9a-zA-Z]",]for i in elements:    for index, j in enumerate(regular_express_a):        ret_a = re.match(j, i)        print(index)        if (ret_a != None) and (index == 0):            print("这是个可使用邮箱", i)        if (ret_a != None) and (index == 1):            print("这是个手机号", i)        if (ret_a != None) and (index == 2):            print("这是一串其他的", i)#  2.re.search(regular_express, string, [flags])#    从字符串中查找符合条件的第一个字符。#    flags:  re.l不区分字母大小写，#            re.A不匹配汉字string = "遥远两端，爱挂在天空飞。风停了也无所谓，只因为你总说。Everthing will be okay。准备好了three two one， I'm always Online。和你one to one ，爱开始扩散。我们连结了-穿越-天空-银河。oh~~。开始倒数three-two-one，删除我的孤单。more and more尽是深刻。爱亮了，爱笑了，I'm always online。变色的生活，任性的挑拨。疯狂的冒出了头。单方的守侯，试探的温柔，却还是少了点什么。遥远两端，爱挂在天空飞。风停了也无所谓，只因为你总说：Everthing Will Be okay。我准备好了three two one, I'm AlWays online，和你one to one 爱开始扩散。我们连结了，穿越-天空-银河-oh~~。开始倒数three two one ，删除我的孤单。"regular_express_b = r"(always|online|穿越-天空-银河)"ret_b = re.search(regular_express_b, string)print(ret_b.start())print(ret_b.end())print(ret_b.group())#  3.findall(regular_express, string, [flags])#    查找多个符合条件的字符串#    re.IGNORECASE:忽略大小写。#    re.LOCALEret_c = re.findall(regular_express_b, string, re.IGNORECASE)print(ret_c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-替换"><a href="#9-2-替换" class="headerlink" title="9.2 替换"></a>9.2 替换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword: “正则替换”，# encoding: utf-8import restring = "蒹葭苍苍，白露为霜。所谓伊人，在水一方。溯洄从之，道阻且长。溯游从之，宛在水中央。\n蒹葭萋萋，白露未晞。所谓伊人，在水之湄。溯洄从之，道阻且跻。溯游从之，宛在水中坻。\n蒹葭采采，白露未已。所谓伊人，在水之涘。溯洄从之，道阻且右。溯游从之，宛在水中沚。\n"letters = "     Transportation has been greatly changed in the past few years. In ancient days, people used to travel by horse or carriage. The journey was often tiring and tedious. Then people had buses, trains and ships, which could shorten the time of the long-distance trip."regular_express = [r"(蒹葭|伊人)", r"(en|in|an)"]print(re.sub(regular_express[0], "xx", string))print(re.sub(regular_express[1], " --XXXn-- ", letters))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-分割"><a href="#9-3-分割" class="headerlink" title="9.3 分割"></a>9.3 分割</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“正则分割”，“分割”，# encoding: utf-8import renames = "焦英武、杨清双、吕纪领、张建春、焦灵卫、赵现伟\n陈秀荣、郎波、程磊、刘子祥、谢绍明 胡红军、张克龙、戴怀海 戴怀敏、张国勤\n李小璇、李军耐、张文博、赵联、肖鹏、边宪武、李伟、李宇、夏廷堂、韩世民、董燕平、张正银\n魏国琼、肖桂茂、李德安、白建永、张旭贵、李香明\n霍建辉、吴旭峰、陈云祥、丁连奇、王遂现、范小锋\n杨宗兵、向书章、李金民、戴家元、刘传禄、贺炳强、云秀芳\n刘善刚、姚海军、贾天义、李加有、方承、杨涛\n杨天海、王富军、张中华、王成林、秦振贵、尚鲜军、李友强、尚加聪"pattern = r"( |、|\n)"tup = re.split(pattern, names)for index, item in enumerate(tup):    if index % 2 == 0:        print("第", int(index / 2), "项：", item)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-函数"><a href="#10-函数" class="headerlink" title="10. 函数"></a>10. 函数</h2><h3 id="10-1普通函数"><a href="#10-1普通函数" class="headerlink" title="10.1普通函数"></a>10.1普通函数</h3><p>掺杂前边的知识，搞得有点多。就算做前边的复习了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword: “global”，“function”，“python中的switch”，#           “switch”，“列表各项相加”，“函数”，“正则运用”，#           “正方形面积”，“圆的面积”，“一次函数”，“二次函数”# ---------------------function----------------------&gt;##  函数次方运算import mathimport re# 输入用正则处理输入字符，筛选数字# python没有switch，用字典+函数实现def case1(lis):    """一次函数"""    if len(lis) &lt; 2:        lis.append(1)    if len(lis) &lt; 3:        lis.append(0)    print(lis[0] * lis[1] + lis[2])def case2(lis):    """二次函数 lis[0]: x,lis[1]:a(默认为1), lis[2]:b(默认为0), lis[3]:c(默认为0) 。"""    if len(lis) &lt; 2:        lis.append(1)    if len(lis) &lt; 3:        lis.append(0)    if len(lis) &lt; 4:        lis.append(0)    print(lis[1] * math.pow(lis[0], 2) + lis[2] * lis[0] + lis[3])def case3(lis):    """多个数求和 &amp; 多字符串拼接"""    print("\n------------数组求和函数-----------\n\n")    string = ""    number = 0    bo = True    for i in lis:        t = re.match(regular_express_se, i)        if t != None and bo:            number += int(i)        else:            bo = False        string += i    print("{0:{2}&gt;6s}:{1:}\n".format("序列", lis, chr(12288)))    if bo:        print("{0:{2}&gt;6s}:{1:}\n".format("各项求和结果", str(number), chr(12288)))    else:        print("{0:{2}&gt;6s}:{1:}\n".format("字符拼接为", string, chr(12288)))def case4(lis):    """数字序列逐项求和"""    #  输出模板    Template = "前%03d项和为% 13d \n"    val = 0    for i in lis:        val += i        print(Template % (lis.index(i) + 1, val))def case5(lis):    """求长方形面积 lis[0]: 长，lis[1]: 宽."""    print(        """{str1:{space}&gt;7s}={length:&gt;5d} \n{str2:{space}&gt;7s}={width:&gt;5d} \n{str3:{space}&gt;7s}={squr:&gt;5d} \n""".format(            str1="此长方形长",            str2="此长方形宽",            str3="此正方形面积",            length=lis[0],            width=lis[1],            squr=lis[0] * lis[1],            space=chr(12288),        )    )def case6(lis):    return Noneswitch = {1: case1, 2: case2, 3: case3, 4: case4, 5: case5, 6: case6}def _function(lis, sec_fun):    """函数大杂烩    lis[0] : x,    lis[1] : a=1 or y    lis[2] : b=0,    lis[3] : c=0,    ……    lis[n] : ……"""    #  函数内声明全局变量时不能赋值,    #  同时，如果要引用全局变量，全局变量--    #  --所在函数必须在此操作之前使用过一次。    if len(lis) &lt; 1:        print("输入有效数据不足，无法进行运算.")        return None        else:        return switch[sec_fun](lis)def se_start_input():    """开始时的函数选择"""    #  检查选择是否合法    Regular_Express = r"^[1-6]{1}($| +)"        st = input(        "选择进行几次函数的运算\n"        + "1.一次函数\n(依次输入x，a 默认为1，b 默认为1)\n\n"        + "2.二次函数\n(依次输入x，a 默认为1，b 默认为0,c 默认为0,)\n\n"        + "3.数字或字符串相加\n(依次输入多项)\n\n"        + "4.逐项相加\n(依次输入多个数字)\n\n"        + "5.长方形求面积\n(依次输入长，宽)\n\n"        + "6.结束\n"    )        result = re.match(Regular_Express, st)    if result == None:        print("输入错误！只能输入‘1-6’ 呦！")        return 0    else:        return int(st)# ---------------------------------------------------&lt;#print("\n\n--------------函数运算-------------\n", "\n")#  选择玩的函数sec_fun_ = 0sec_fun_ = se_start_input()if sec_fun_ != 0 and sec_ele_ != 7:    print("\n请根据选择运算，输入一系列数据，以空格分隔\n        请输入:")    #  输入        inp = input()    #  分割.-1指分割不限次数    lt = inp.split(" ", -1)    #  空序列，最后传入函数处理    lis = []        #  case3的正则    regular_express_add = r"[^ \n]"    #  筛选数字的正则    regular_express_se = r"^[0-9]+$"        #  按不同函数用不同正则再次筛选    if sec_fun_ != 3:        #  处理字符串：只录入数字        for index, i in enumerate(lt):            if re.match(regular_express_se, lt[index]) != None:                try:                    lis.append(int(i))                except:                    try:                        lis.append(float(i))                    except:                        print("数字转换有误")    else:        #  处理字符串：录入非空格字符串        for index, i in enumerate(lt):            if re.match(regular_express_add, lt[index]) != None:                lis.append(i)        _function(lis, sec_fun_)    print("over")else:    print("over")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2匿名函数"><a href="#10-2匿名函数" class="headerlink" title="10.2匿名函数"></a>10.2匿名函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“匿名函数”，“关键字参数”，“默认值参数”，#  当函数中出现有默认值时必须位于参数集的最后# encoding:utf-8def R_S(R, pai=3.14, string=""):  """圆求面积"""  print(    "\n\n"    + string    + "\n"    + "此圆的半径 r={radius: 5d}\n此圆的面积 S= {squr:.3f}".format(      radius=R, squr=R * R * pai    ),  )x = int(input("输入圆的半径"))#  匿名函数 用 lambda 修饰词前缀.y = lambda ds: ds * ds * 3.14print("\n" + str(y(x)))R_S(x, string="R_S(x):")R_S(x, 3, "R_S(x, 3):")R_S(string="R_S(pai=3.142, R=x):", pai=3.142, R=x)#  传入数组，或多参数。def func(*par):  for i in par:    print(i)    #  参数原理为：定义一个变量的列表，用*来传入列表地址#  若传入参数类型繁多，则读取时需了解每次读取的数据类型。strs = ["语文", "数学", "英语", "物理", "化学"]strss = ["Chinese", [12.0, 45.12, 44.11], 45699, bin(423),hex(423)]func(*strs)print("\n")func(*strss)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-class"><a href="#11-class" class="headerlink" title="11. class"></a>11. class</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“class”，“从序列中取随机元素”，“从字典中取随机元素”#           “choice”，# encoding:utf-8brand = {"上汽集团": "大众", "东风": "雪铁龙", "奔驰": "Mercedes-Benz", "凯迪拉克": "Cadillac"}produce_country = ["China", "American", "India", "European"]code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"# -----------------class----------------&gt;#class Car:  """ 汽车模型 先生成后赋值 """  Name = ""  Brand = ""  Producer = ""  Produce_Country = ""  def make_success(self):    print(      "生成了一辆小汽车",      "\n名字:" + self.Name,      "\n品牌:" + self.Brand,      "\n生产商:" + self.Producer,      "\n产地:" + self.Produce_Country,      "\n",    )# 一个类中同一方法只能生效最后一次定义。""" 初始化函数与构造函数 括号内不加参数时函数内   def __init__():     brand = self.carname   print("生成了一辆小汽车:222") """# -------------------function-----------------------&lt;##-----------------class-----------------&gt;#def mass_produce(number):  """ 批量造车 """  import random  lis = []  i = 0  while i &lt; number:    i = i + 1    j = 0    name = ""    while j &lt;= 10:      name += code[random.randint(0, len(code) - 1)]      j = j + 1    car = Car()    car.Name = name    car.Brand = random.choice((list(brand)))    car.Produce_Country = random.choice(produce_country)    car.Producer = brand[car.Brand]    lis.append(car)  return lis# ---------------------function----------------------&lt;#numb = int(input("输入生产汽车的数量"))t = mass_produce(numb)for i in t:  i.make_success()print("已成功生产", numb, "辆车")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-访问限制"><a href="#12-访问限制" class="headerlink" title="12. 访问限制"></a>12. 访问限制</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“访问限制”，#  没多大用。。。。。。。# encoding:utf-8class car:  """ produce car """# price: ""# _brand: ""# __color: ""  def __init__(self):    self.price = 4000    self._brand = "asdfa"    self.__color = "red"vehicle = car()print(vehicle.price)print(vehicle._brand)print(vehicle._car__color)vehicle.price = 50vehicle._brand = "qqqqqqqqqqq"vehicle._car__color = "aaaaaaaaaa"print(vehicle.price)print(vehicle._brand)print(vehicle._car__color)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-property"><a href="#13-property" class="headerlink" title="13. property"></a>13. property</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“属性变化”，“装饰器”，“property”# encoding:utf-8class car:  """计算价格"""  def __init__(self, door, tie):    self.door = door    self.tie = tie    self.band_price = 5000.0#  方法转换为属性  @property  def total_cost(self):    """(door + tie) x 4 + price"""    return (self.door + self.tie) * 4 + self.band_pricespend = car(203, 450)print(spend.total_cost)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-学习中……"><a href="#14-学习中……" class="headerlink" title="14.学习中……"></a>14.学习中……</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2021/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><hr><p>常见的数据类型有：<br>[byte](#1. byte)，<a href="#char">char</a>，<a href="#short">short</a>，<a href="#int">int</a>，<a href="#float">float</a>，<a href="#long">long</a>，<a href="#double">double</a>，<a href="#date">date</a>，<a href="#date">datetime</a>，<a href="#other">other</a></p><div id="byte"></div><h3 id="1-byte"><a href="#1-byte" class="headerlink" title="1. byte"></a>1. byte</h3><p>​    byte 为字节。有点常识就知道   1字（节）=8位。即用八个二进制位来表示，所以有</p><p>​    (-2<sup>7</sup>)~(2<sup>7</sup>-1)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">byte a=1;//  -128~127<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <u>？？？为啥整数比负数少一个？？？</u></p><p>​    是因为   -128<del>-1可以用 10000000</del>11111111 来表示</p><p>​    开头的 ‘1’ 表示此数为负，只能用 00000000~01111111来表示0~127，因为再加一就是-128啦。    </p><div id="char"></div><p></p><h3 id="2-char"><a href="#2-char" class="headerlink" title="2. char"></a>2. char</h3><p>​    char 类型占用一字节，8个二进制位。</p><p>​    char为字符型，学过几门语言的人都知道：在程序中大小写英文字母，以及数字的数据大小就是一个字符。与 byte 所占内存一样为一字节。如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">char b='a';//也就是ASCII表示的字符。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是声明一个字符变量 a，给其赋值为字符 “a”。</p><div id="short"></div><h3 id="3-short"><a href="#3-short" class="headerlink" title="3. short"></a>3. short</h3><p> short 用来定义数字变量。一般很少用，其大小为两个字节，也就是16个二进制位。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">short c;// -32,768 ~ 32,768-1。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  可表示 (-2<sup>15</sup>)~(2<sup>15</sup>-1)</p><p>  理解过程看 byte型。</p><div id="int"></div><h3 id="4-int"><a href="#4-int" class="headerlink" title="4. int"></a>4. int</h3><p>  int 类型占用两字节，32个二进制位。<br>  可表示 (-2<sup>31</sup>)~(2<sup>31</sup>-1)</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int d; //-2,147,483,648 ~ 2,147,483,647    正负2十多亿<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  int类型较为常用，相比较short，int表示的数更不容易溢出，切占用内存不大。</p><div id="float"></div><h3 id="5-float"><a href="#5-float" class="headerlink" title="5. float"></a>5. float</h3><p>  float类型占用四字节，32个二进制位。</p><p>  可表示 (-3.4x10<sup>38</sup>)~(3.4x10<sup>38</sup>)</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">float e;//大概情况为越偏离0，越不精确。32位进制位分别用作字符位（正负），整数位和尾数。建议先了解编程中的多位数科学技术法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <a href="https://blog.csdn.net/albertsh/article/details/92385277">精确度以及表示范围详解（点我！点我！）</a></p><p>​    float类型为唯二的能表示小数的数据类型之一，另一个就是double类型。相比较double的64位，float占的内存更小。</p><div id="long"></div><h3 id="6-long"><a href="#6-long" class="headerlink" title="6. long"></a>6. long</h3><p><span id="long"></span></p><p>  long类型占用64个二进制位。</p><p>可表示 (-2<sup>63</sup>)~(2<sup>63</sup>-1)</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">long f;//-9,223,372,036,854,775,8078  ~  9,223,372,036,854,775,807<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  long类型一般用于特殊用途，毕竟这么大的数生活中不怎么用得到。但是，联想一下，64位。。。<br>  能否想到我们的电脑。同为64位。所以long类型就是我们的64位机的单个读取单位。</p>  <div id="double"></div><h3 id="7-double"><a href="#7-double" class="headerlink" title="7. double"></a>7. double</h3><p>  double类型  8字节，64个二进制位。</p><p>  float的升级版。升级版说明 double 的特点。</p><p>​    一般刚学编程语言的人做题时自己定义 float 型无法通过，可以换成 double 试试。因为 double 的精度更高。所以根据自己的需求选择 double 还是 float 。</p>  <div id="date"></div><h3 id="8-date"><a href="#8-date" class="headerlink" title="8. date"></a>8. date</h3><p>  此类型与datetime，localtime，关系紧密。在各个语言中，有的只有一种，有的都存在。不同语言规定不同。比如在JavaScript 中只有date，没有datetime。date的格式如下</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> time<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2021-08-21T05:12:39.827Z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  但在C#中，没有date类型，只有datetime类型。</p>  <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace ConsoleApp1{    class Program    {        static void Main(string[] args)        {            DateTime time = DateTime.Now;            Console.WriteLine(time);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2021/8/21 13:19:29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    而HTML中，这三种又都存在。特别在input中。</p><ul><li><p>指定为date类型时，只能输入年月日。</p><input type="date" style="width:50%;margin:0 auto"></li><li><p>指定为datetime时，只能输入年月日时分。但现在浏览器已不支持此控件。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/datetime">详细声明见此</a></p><input type="datetime-local" style="width:50%;margin:0 auto">    </li><li><p>指定为datetime-local时，只能输入年月日时分。</p><input type="datetime-local" style="width:50%;margin:0 auto"></li></ul><p>   具体数据显示格式根据语言不同也不同。</p>  <div id="other"></div><h3 id="9-other"><a href="#9-other" class="headerlink" title="9. other"></a>9. other</h3><p>  other 是指这几种类型可以与 sign，unsign，还有叠加形式。</p><p>如：</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">long long g;//128位unsign int h;//无符号整型。划负为正，正数的范围乘2.long int i；//还是int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  除此之外，个别语言还有 WORD 型（字，两字节。），DWORD 型，等。</p><hr><p>  不同的语言也有自己特有的，比如数据库一般都有的 datetime类型，text类型，decimal类型（也是表示小数的），imag类型（不错，就是存图片的）等等。 了解每个数据类型，就是为了根据自己的需求定义适合的数据类型。不能计算 1 + 1 就定义两个 long 类型 。养成好习惯，才能更高效合理的利用计算机有限的内存资源。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win添加右键新建项</title>
      <link href="/2021/08/21/win%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E9%A1%B9/"/>
      <url>/2021/08/21/win%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="右键新建菜单添加新项"><a href="#右键新建菜单添加新项" class="headerlink" title="右键新建菜单添加新项"></a>右键新建菜单添加新项</h1><hr><p>​    **<code>|ू･ω･</code> )检查下道具（没有js的添加项）`</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/1.png" style="zoom: 67%;"><hr><h2 id="1-打开注册表编辑器（regedit）"><a href="#1-打开注册表编辑器（regedit）" class="headerlink" title="1. 打开注册表编辑器（regedit）"></a>1. 打开注册表编辑器（regedit）</h2><p>​         win+R召唤“运行”对话框-》输入”regedit”-》回车。或者在开始菜单的搜索框输入“注册表编辑器”or“regedit”。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/2.png" style="zoom: 67%;"><h2 id="2-找到系统已统计目标后缀名"><a href="#2-找到系统已统计目标后缀名" class="headerlink" title="2. 找到系统已统计目标后缀名"></a>2. 找到系统已统计目标后缀名</h2><p>​        Ctrl+F召唤“搜索对话框”-》输入想要添加的新建文件的后缀名，前加‘.’，（eg：.js）</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/3.png" style="zoom: 50%;"><p>​        如图：</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/4.png" style="zoom:67%;"><h2 id="3-添加右键新建项"><a href="#3-添加右键新建项" class="headerlink" title="3. 添加右键新建项"></a>3. 添加右键新建项</h2><p>​        找到后缀文件夹-》右键新建项（命名为“ShellNew”）-》      ▲！别输入空格</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/5.png" style="zoom:67%;"><p>​          鼠标在“ShellNew”目录上右键-》新建-》字符串值（命名为NullFile）      ▲！别输入空格<br>​    </p><p>​    </p><pre><code>     [==也可以新建成特定样版文件==](#补充) </code></pre><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/6.png" style="zoom:67%;"><h2 id="4-验证是否成功"><a href="#4-验证是否成功" class="headerlink" title="4. 验证是否成功"></a>4. 验证是否成功</h2><p>​    返回桌面右键查看应该就出现了。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/7.png" style="zoom:120%;"><ul><li>(命名为“filename”时的效果！！注意文件名：默认还是“新建xxx.js”)</li></ul><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/8.png" style="zoom:67%;"><p><b>    如果没有显示可能情况：</b></p><ul><li>重命名时输入空格。</li></ul><hr><div id="补充"></div><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>​    <strong><strong>补充内容</strong></strong>：</p><h2 id="1-新建文件并输入模板。"><a href="#1-新建文件并输入模板。" class="headerlink" title="1. 新建文件并输入模板。"></a>1. 新建文件并输入模板。</h2><p>​    在一个偏僻的位置新建一个与添加的格式后缀相同的文件.(eg：123.js)</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/9.png" style="zoom:67%;"><h2 id="2-指定文件路径。"><a href="#2-指定文件路径。" class="headerlink" title="2. 指定文件路径。"></a>2. 指定文件路径。</h2><p>​    在添加字符串值时重命名为“filename”-》右键filename项修改，填入刚刚新建的文件的path+文件名。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/10.png" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux换源</title>
      <link href="/2021/08/14/Linux%E6%8D%A2%E6%BA%90/"/>
      <url>/2021/08/14/Linux%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="kali-Linux更换源-其他源也可通过这种方式添加"><a href="#kali-Linux更换源-其他源也可通过这种方式添加" class="headerlink" title="kali Linux更换源(其他源也可通过这种方式添加)"></a><code>kali</code> Linux更换源(其他源也可通过这种方式添加)</h2><p>主要解决国内大多数linux系统下载软件以及其他东西时网速过慢。</p><hr><h2 id="1-找配置文件"><a href="#1-找配置文件" class="headerlink" title="1.找配置文件"></a>1.找配置文件</h2><p>进入源列表文件夹</p><ul><li>可能不同的Linux下文件夹的结构不同，可以通过一级一级向下递进找到sources.list。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo cd /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-找链接"><a href="#2-找链接" class="headerlink" title="2.找链接"></a>2.找链接</h2><p>打开<span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://developer.aliyun.com/mirror/kali?spm=a2c6h.13651102.0.0.1d231b115YDKhc">这个</a><span class="github-emoji"><span>👈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>网站，复制源的链接。</p><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h2><p>回到Linux，打开sources.list文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vi sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 进入插入模式（点击‘i’进入编辑模式）</p><p>如果没有管理员权限会保存失败。</p><p>删除其他源，如果原来就没有的话直接添加进去（Linux命令行中Ctrl+shift+v复制）。</p><h2 id="5-保存"><a href="#5-保存" class="headerlink" title="5.保存"></a>5.保存</h2><p>Esc退出编辑模式，点击‘：’输入‘wq’进行保存并退出（write ，quit）。</p><h2 id="6-更新"><a href="#6-更新" class="headerlink" title="6.更新"></a>6.更新</h2><p>输入下列命令进行一些更新。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get updatesudo apt-get upgradesudo apt-get dist-upgradesudo apt-get clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/14/hello-world/"/>
      <url>/2021/08/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎使用 <a href="https://hexo.io/">Hexo</a>! 这是你第一篇文章。去<a href="https://hexo.io/docs/">documentation</a>可查看更多信息。如果你使用hexo时有问题，可以去 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 解决疑问，或者到 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>咨询我。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建另一篇文章"><a href="#创建另一篇文章" class="headerlink" title="创建另一篇文章"></a>创建另一篇文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>了解更多: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>了解更多: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署至远程网站"><a href="#部署至远程网站" class="headerlink" title="部署至远程网站"></a>部署至远程网站</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>了解更多: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win添加开机启动</title>
      <link href="/2021/08/14/win%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/08/14/win%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="如何添加开机启动项"><a href="#如何添加开机启动项" class="headerlink" title="如何添加开机启动项"></a>如何添加开机启动项</h2><ul><li>一般应用都有开机启动的选项.</li><li>但是有的应用就偏偏没有，或者一些破解软件的开机启动无法启动,</li><li>再或者360等管家就把开机启动弄坏了</li></ul><hr><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><ul><li><p>在微软标志上右键，或者开始菜单找 “运行” 这一项，运行。</p><p>  （或者 “win+R” ）</p></li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A82.jpg"></p><h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><ul><li><p>在输入框输入</p><pre class="line-numbers language-shell"><code class="language-shell">shell:startup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A83.png"></p><p>然后点 “确定”。</p><h3 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h3><ul><li>在打开的文件夹里拖入想要开机启动的程序的快捷方式。</li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A84.png"></p><h2 id="如果想关闭开机启动项……"><a href="#如果想关闭开机启动项……" class="headerlink" title="如果想关闭开机启动项……"></a>如果想关闭开机启动项……</h2><ul><li>有 N 种方式，我就不多说了。</li><li>如果觉得360管理打开太麻烦，可以用任务管理器。<span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A85.png"></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则语法整理</title>
      <link href="/2021/08/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/"/>
      <url>/2021/08/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式基础语法字符"><a href="#正则表达式基础语法字符" class="headerlink" title="正则表达式基础语法字符"></a>正则表达式基础语法字符</h2><p>   <strong>先了解两个文中用到的概念，一些语言中也有类似的功能。</strong></p><ul><li><p>贪婪模式    ：贪婪模式则尽可能多的匹配所搜索的字符串。</p></li><li><p>非贪婪模式：尽可能少的匹配所搜索的字符串。</p><hr></li></ul><h2 id="1-常用字符"><a href="#1-常用字符" class="headerlink" title="1. 常用字符"></a>1. 常用字符</h2><table><thead><tr><th align="left">符号</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。+ 等价于{1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。? 等价于{0,1}。</td></tr><tr><td align="left">{<em>n</em>,<em>m</em>}</td><td align="left"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>，m可省略。最少匹配<em>n</em>次且最多匹配<em>m</em>次。逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td align="left">.</td><td align="left">匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“`(.</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配pattern并获取这一匹配。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。可内嵌  “x|y”</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配pattern但不获取匹配结果，即非获取匹配。这在使字符“`(</td></tr><tr><td align="left">(?=pattern)</td><td align="left">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。非获取匹配。如，“`Windows(?=95</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。非获取匹配。<br>“`Windows(?!95</td></tr><tr><td align="left">(?&lt;=pattern)</td><td align="left">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配x或y。例如，“`z</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td align="left">[^xyz]</td><td align="left">不匹配括号内任意一个字符。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。<br>如：[0-9]匹配数字，[a-zA-Z]匹配所有字母</td></tr><tr><td align="left">[^a-z]</td><td align="left">排除指定范围。<br>如：[^0-9]匹配数字外的任意字符</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界。<br>如：d\b    匹配以d结尾的单词。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td align="left">\d</td><td align="left">匹配数字字符。等价于[0-9]。</td></tr><tr><td align="left">\w</td><td align="left">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。不匹配指定条件字符结尾的字符串</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td></tr><tr><td align="left">\D</td><td align="left">匹配非数字字符。等价于[^0-9]。</td></tr><tr><td align="left">\W</td><td align="left">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td align="left">\f</td><td align="left">匹配换页符。等价于\x0c和\cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配换行符。等价于\x0a和\cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配回车符。等价于\x0d和\cM。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于\x09和\cI。</td></tr></tbody></table><h2 id="2-比较难理解的字符"><a href="#2-比较难理解的字符" class="headerlink" title="2. 比较难理解的字符"></a>2. 比较难理解的字符</h2><table><thead><tr><th align="left">符号</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td></tr><tr><td align="left">\xn</td><td align="left">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td align="left">\num</td><td align="left">匹配num，其中num 是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果<em>n</em>为八进制数字（0-7），则n为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr></tbody></table><h2 id="3-常用正则表达式"><a href="#3-常用正则表达式" class="headerlink" title="3. 常用正则表达式"></a>3. 常用正则表达式</h2><p><mark>正则表达式筛选式不唯一，有的简单，有的复杂，不要惊讶。</mark></p><p><mark>更新中</mark></p><table><thead><tr><th align="center">用户名</th><th align="left"><code>/^[a-z0-9_-]{3,16}$/</code></th></tr></thead><tbody><tr><td align="center">密码</td><td align="left"><code>/^[a-z0-9_-]{6,18}$/</code></td></tr><tr><td align="center">十六进制值</td><td align="left"><code>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</code></td></tr><tr><td align="center">电子邮箱</td><td align="left"><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/ /^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/</code></td></tr><tr><td align="center">URL</td><td align="left"><code>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</code></td></tr><tr><td align="center">IP 地址</td><td align="left"><code>/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</code></td></tr><tr><td align="center">HTML 标签</td><td align="left"><code>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</code></td></tr><tr><td align="center">删除代码\注释</td><td align="left"><code>(?&lt;!http:|\S)//.*$</code></td></tr><tr><td align="center">Unicode编码中的汉字范围</td><td align="left"><code>/^[\u2E80-\u9FFF]+$/</code></td></tr><tr><td align="center">…</td><td align="left">…</td></tr></tbody></table><p>​     </p><p>  声明：本文对一篇文章进行加工，简化，美化产生的。</p><p>原文如下：<a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">点我传送</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>类别</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>成就</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>交流</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎留言"><a href="#欢迎留言" class="headerlink" title="欢迎留言"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p><ul><li><strong>Q Q</strong>：<strong>1970476603</strong></li><li><strong>微信</strong>：<strong>i_19-99-666</strong></li></ul><p>欢迎来访<br><strong>当然不介意小jiejie加我~~</strong></p><h1 id="友链交换"><a href="#友链交换" class="headerlink" title="友链交换"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p><ul><li><strong>名称：</strong>你的博客名称</li><li><strong>地址：</strong>你的博客地址</li><li><strong>简介：</strong>一句话简介</li><li><strong>头像：</strong>你的头像地址</li></ul><p>例如我的博客友链，大家可以加到自己博客里哦：</p><ul><li><strong>名称：</strong>张小白</li><li><strong>地址：</strong><a href="https://blogofxyz.gitee.io/">https://blogofxyz.gitee.io</a> (国内访问快)/<a href="https://blogofxyz.top/">https://blogofxyz.top/</a> (github部署)</li><li><strong>简介：</strong>平时没少学没用东西的一个家伙。</li><li><strong>头像：</strong><a href="https://blogofxyz.gitee.io/medias/avatar.jpg">https://blogofxyz.gitee.io/medias/avatar.jpg</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于‘俺’</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>小伙伴与大佬</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="赞赏名单"><a href="#赞赏名单" class="headerlink" title="赞赏名单"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p><h1 id="友链交换"><a href="#友链交换" class="headerlink" title="友链交换"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p><ul><li><strong>名称：</strong>你的博客名称</li><li><strong>地址：</strong>你的博客地址</li><li><strong>简介：</strong>一句话简介</li><li><strong>头像：</strong>你的头像地址</li></ul><p>例如我的博客友链，大家可以加到自己博客里哦：</p><ul><li><p><strong>名称：</strong>Zhang-little-white</p></li><li><p><strong>地址：</strong><a href="https://blogofxyz.gitee.io/">https://blogofxyz.gitee.io</a> (gitee访问快)</p><p>​           <a href="https://blogofxyz.top/">https://blogofxyz.top/</a> (github部署)</p></li><li><p><strong>简介：</strong>小白一个</p></li><li><p><strong>头像：</strong><a href="https://blogofxyz.gitee.io/medias/avatar.jpg">https://blogofxyz.gitee.io/medias/avatar.jpg</a></p></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>导航</title>
      <link href="/navigate/index.html"/>
      <url>/navigate/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
