<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>let与var,还有const</title>
      <link href="/2022/01/16/let/"/>
      <url>/2022/01/16/let/</url>
      
        <content type="html"><![CDATA[<h3 id="1-let-与-var"><a href="#1-let-与-var" class="headerlink" title="1. let 与 var"></a>1. let 与 var</h3><p><code>let</code> 为块作用域声明，即只能在声明的所在层级以及子域中使用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// part 1 可正常输出aa,bb会报错。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token string">"aaaaa"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> bb <span class="token operator">=</span> <span class="token string">"qqqq"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// part 2 输出的为 "dddddc"</span><span class="token keyword">var</span> cc<span class="token operator">=</span><span class="token string">"c"</span><span class="token punctuation">;</span><span class="token keyword">let</span> dd<span class="token operator">=</span><span class="token string">"d"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token string">"ccccc"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dd <span class="token operator">=</span> <span class="token string">"ddddd"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cc<span class="token operator">+</span>dd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-const-与-var"><a href="#2-const-与-var" class="headerlink" title="2. const 与 var"></a>2. const 与 var</h3><p><code>const</code> 与<code>var</code>为全局作用域声明。但是，<code>const</code>定义时必须初始化，且后期的修改会报错。<code>var</code> 则不会。且可以先定义，后赋值。</p><ul><li><p>在子域中定义之后，const 同 let。</p></li><li><p>在最外层定义，<code>let</code> <code>const</code> <code>var</code> 的作用域相同，都是全局。</p><blockquote><p>但。</p><ul><li><p>let在子域中可重新定义此变量，且不影响外部同样变量名的变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//以下代码输出 "222de".</span> <span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> dd <span class="token operator">=</span> <span class="token string">"d"</span><span class="token punctuation">;</span> <span class="token keyword">const</span> ee <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> dd <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> ee <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cc <span class="token operator">+</span> dd <span class="token operator">+</span> ee<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><code>const</code>在子域中无法修改值，<code>var</code> <code>let</code> 可以。且修改的都是最外层的值。</li></ul></blockquote></li></ul><blockquote><p>就作用域来说，<code>let</code>与 <code>const</code> 是一样的。</p></blockquote><p>但<code>const</code>一定程度上能保护值不被修改。<code>它没有定义常量值。它定义了对值的常量引用。</code> 我的理解是：再次引用这个变量时，这个变量的值必须是你定义时的值。所以他对对象之类的<mark>变量名指向地址</mark>的数据类型就没有太多的约束性。</p><p>如下代码：</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ap <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"Larson"</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ap<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Koepp"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 以上代码输出的<code>name</code>为<code>Koepp</code>，这就是一定程度。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 变量作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python地址问题（反斜杠转斜杠）</title>
      <link href="/2022/01/11/python%E5%9C%B0%E5%9D%80%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/11/python%E5%9C%B0%E5%9D%80%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>python中字符串不能以单数反斜杠结束。这一点在地址匹配中可能更加要命。</p><p>这里以：将地址各级转换为某一格式缩写的。记录解决步骤。</p><ul><li><p>第一种</p><p>可将地址中的反斜杠都替换为斜杠。windows中反斜杠是地址各级的分隔符，而斜杠是Linux的分隔符，但在windows中斜杠同样可用。所以可以这使用。</p><p>如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osimport repath=os.getcwd()regular='[^/:]+/'path=path.replace("\\", "/")print(path)st=re.sub(regular,'./', path,0)print(st.replace("/", "\\"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，最后再转换不转换回去根据实际情况选择。</p></li><li><p>其他的等待补充。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解构赋值</title>
      <link href="/2022/01/09/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2022/01/09/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript解构赋值"><a href="#JavaScript解构赋值" class="headerlink" title="JavaScript解构赋值"></a>JavaScript解构赋值</h3><p>[传送门](<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring">解构赋值 - JavaScript | MDN (mozilla.org)</a>)：整理的很好了，我就不整理的，MDN的资料</p><h3 id="pythn-解构赋值"><a href="#pythn-解构赋值" class="headerlink" title="pythn 解构赋值"></a>pythn 解构赋值</h3><p>没找到官方的，可以自己找其他的。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解构赋值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js注意</title>
      <link href="/2022/01/07/js%E6%B3%A8%E6%84%8F/"/>
      <url>/2022/01/07/js%E6%B3%A8%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-递归的返回值问题"><a href="#1-递归的返回值问题" class="headerlink" title="1. 递归的返回值问题"></a>1. 递归的返回值问题</h3><h4 id="1-1-递归"><a href="#1-1-递归" class="headerlink" title="1.1 递归"></a>1.1 递归</h4><p>​        我已知的有两种需求。</p><ul><li><p> 递归到底，到达某一种情况，然后结束，返回这种情况下的某一个变量。</p></li><li><p>每次递归结束都需要返回一个值，然后利用这个值进行其他操作。</p><blockquote><p>两种区别：</p><ul><li><p>第一种注重结果，只关注进行的当前递归即可。</p></li><li><p>第二种关注整体，每一次递归都需要监控。</p><p>所以说第二种更占用栈，即更容易发生栈溢出。</p></li></ul></blockquote><p>然后说下我的经历。</p><p>我踩这个坑是在练习扫雷时。需求功能如下：</p><blockquote><p>​        当点击一格，这一个不是雷时，就以这个格为中心然后向四周扩散，打开相邻的所有空格。实现如下：</p><ol><li>首先点一格判断是否为雷，不是雷，则打开这格。</li><li>固定四种移动方向的顺序。</li><li>判断一种方向上移动是否越界、是否踩雷。</li><li>进入第一种方向上的递归。即重新开辟一个他本身这样的函数（1，2，3…..）。</li><li>第二种方向的递归。</li><li>第三种方向的递归。</li><li>第四种方向的递归。</li><li>结束。</li></ol><p>​        </p><p>​        就我的需求来看是需要第二种递归操作的。但是刚开始写，就没有注意这些。然后点完之后，老是直惯到底。</p><p>​        我在函数内定义一个计数变量，每种方向递归位置并排的位置都将计数变量加一，但每次函数结束的输出都是 1 。</p></blockquote><p>​                最后才发现我的问题出在递归的产生上。</p><p>如果函数名为 loopGo()                </p><p>上边两种情况，如果是第一种的话，</p><p>可以直接</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">loopGo</span><span class="token punctuation">(</span><span class="token parameter">ep</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">loopGo</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token operator">...</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而第二种情况的话，就应该这么写。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loopGo</span><span class="token punctuation">(</span><span class="token parameter">ep</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">loopGo</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token operator">...</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-问题产生"><a href="#1-2-问题产生" class="headerlink" title="1.2 问题产生"></a>1.2 问题产生</h4><p>​            产生区别的地方在于一个是<code>return</code> 产生递归，一个是调用函数产生递归。</p><blockquote><p>​        如果是return的话，会把return后的部分作为函数的结果，然后原函数第一层就没了。如果是调用的话就想运行其他代码。这层函数还是在的。所以我就懵逼了一天，找不到问题。</p></blockquote></li></ul><h3 id="2-js-类比较"><a href="#2-js-类比较" class="headerlink" title="2. js 类比较"></a>2. js 类比较</h3><p>不能用== 或者===。</p><ul><li>使用JSON.stringfy() 将类转换为字符串进行比较。</li><li>。。。待补充</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS技巧</title>
      <link href="/2022/01/02/CSS%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/01/02/CSS%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="1-var（）函数"><a href="#1-var（）函数" class="headerlink" title="1. var（）函数"></a>1. var（）函数</h3><p>用途，某些情况下某一个数值可能用的比较多。比如某一种需求中<code>200px</code><mark>用的特别多</mark>，而且是<mark>不同的标签</mark>中，除此之外他还在<mark>不同属性</mark>中应用。</p><p>这时如果是在其他语言中，当然可以定义一个全局变量。但，</p><p>这是 <code>CSS</code> 。。。不说了，说正文。</p><p>步骤：</p><ul><li><p>定义自定义属性。</p><p>  <code>--xxxx-property : value</code></p><blockquote><p>必须以 – 开头。</p><p>如<code>--mycolor-color ：rgb(102, 15, 184)</code> </p></blockquote></li><li><p>取值。</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">var</span><span class="token punctuation">(</span>custom-property-name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  格式如上。</p><pre><code>&gt; custom-property-name：自定义变量的名字。&gt;&gt; value：默认值，当自定义属性无值，或者获取不到时使用。</code></pre></li></ul><h3 id="2-calc（）函数"><a href="#2-calc（）函数" class="headerlink" title="2. calc（）函数"></a>2. calc（）函数</h3><p>计算函数，可以用于赋值时数值不确定的属性上。</p><p>可以结合 <code>var()</code> 使用。</p><blockquote><p>一定注意。</p><p><code>calc</code> 内的运算符必须前后都有空格。</p></blockquote><p>实例代码。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span><span class="token punctuation">{</span>    <span class="token property">--basic-top</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span>40% - 50px<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--basic-top<span class="token punctuation">)</span> - 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器屏蔽右键菜单功能</title>
      <link href="/2022/01/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B1%8F%E8%94%BD%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/01/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B1%8F%E8%94%BD%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题出现原因"><a href="#1-问题出现原因" class="headerlink" title="1. 问题出现原因"></a>1. 问题出现原因</h2><p>其实是html中一个默认时间。跟click一样，但是默认是没有值的，具体执行的事件应该是根据各种浏览器的不同而执行不同的事件，即浏览器给你设置了。所以我们可以在适当的时机再改下这个事件的执行逻辑。</p><blockquote><p>这里说vue中的解决方法，其他的类比下。</p></blockquote><h2 id="2-解决方法。"><a href="#2-解决方法。" class="headerlink" title="2. 解决方法。"></a>2. 解决方法。</h2><p>给要屏蔽的标签添加<code>id</code>等标识，然后在其父标签（已绑定的标签）的<code>mounted</code>或者<code>created</code>中添加如下代码通过js的方法屏蔽。</p><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里屏蔽的标签<code>id</code>为 <code>abc</code>。后边是一个箭头函数，比较简洁。</p><blockquote><p>可以给body设定id或者其他的唯一标识达到全部屏蔽。</p></blockquote><p>没有仔细研究，根据修改了一些值推测的结果是：</p><ul><li>这个事件最后需要返回一个bool值，指定是否开启此功能。</li><li>返回bool值之前可以写一些事件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue初学注意</title>
      <link href="/2021/12/26/vue%E5%88%9D%E5%AD%A6%E6%B3%A8%E6%84%8F/"/>
      <url>/2021/12/26/vue%E5%88%9D%E5%AD%A6%E6%B3%A8%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-调试没有-vm-data问题"><a href="#1-调试没有-vm-data问题" class="headerlink" title="1. 调试没有 vm.$data问题"></a>1. 调试没有 vm.$data问题</h3><p>假设定义 vue 对象 如下。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            price<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">价格：&lt;input type="number" v-model="price" /&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue 运行后调试的话原本可以通过 vm.$加对应项查看变量。如图</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/blog/Vue/vm.$object.png" alt="image-20211226182226019" style="zoom: 80%;"><p>但某次我的就莫名其妙没有了。 变成这样</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/blog/Vue/vm.$nothing.png" alt="image-20211226182340471" style="zoom:80%;"><p>原因如下，定义的时候如果是上边代码的形式，是可以查看的。但是，如果是先声明后绑定的话。就没法查看了。</p><p><mark>不能查看</mark>的初始化例子如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            price<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">价格：&lt;input type="number" v-model="price" /&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>可以查看的初始化例子 </mark> 如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            price<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">价格：&lt;input type="number" v-model="price" /&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者先创建变量，然后在另外赋值绑定。</p><p>代码如下。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> vv <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1532"</span><span class="token punctuation">,</span> <span class="token string">"8465321"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                term<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">newValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>term<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;input v-model="term" /&gt;            &lt;!-- 添加一个数据 --&gt;            &lt;button v-on:click="newValue"&gt; 添加 &lt;/button&gt;            &lt;ul&gt; &lt;!-- 显示添加后的数据 --&gt;                &lt;my-li                 v-for="(item,index) of list"                v-bind:liItem="item"                v-bind:liIndex="index"/&gt;    &lt;/ul&gt;            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加一个组件</span>    vv<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-li"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'liItem'</span><span class="token punctuation">,</span> <span class="token string">'liIndex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;第{{liIndex}}号姐姐:{{liItem}}&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> vm<span class="token operator">=</span>vv<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span>    <span class="token comment">//在赋值绑定，查看时用 vm 查看</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-计算属性与侦听器"><a href="#2-计算属性与侦听器" class="headerlink" title="2.计算属性与侦听器"></a>2.计算属性与侦听器</h3><p>两种都可检测data里数值的变化。然后做出一些反应。</p><p>区别：</p><table><thead><tr><th>区别项</th><th>computed</th><th>watch</th></tr></thead><tbody><tr><td>页面渲染时是否执行</td><td>yes</td><td>no</td></tr><tr><td>局限</td><td>必须返回一个东西</td><td>必须侦听某一变量</td></tr><tr><td>执行时期</td><td>页面渲染到此属性时</td><td>侦听值发生变化时</td></tr></tbody></table><h3 id="3-v-if-amp-v-show"><a href="#3-v-if-amp-v-show" class="headerlink" title="3. v-if &amp; v-show"></a>3. v-if &amp; v-show</h3><h4 id="3-1-v-if"><a href="#3-1-v-if" class="headerlink" title="3.1 v-if"></a>3.1 v-if</h4><p>渲染时通过变量或者表达式判断是否渲染绑定的标签或模块。</p><p>当值发生变化后，重新渲染某一模块。</p><h4 id="3-2-v-show"><a href="#3-2-v-show" class="headerlink" title="3.2 v-show"></a>3.2 v-show</h4><p>通过一个bool变量或表达式决定一个标签或者模块的是否显示。</p><p>当bool变量或者表达式的值发生变化后，改变 display 使其显示。</p><table><thead><tr><th>区别</th><th>v-if</th><th>v-show</th></tr></thead><tbody><tr><td><code>HTML</code> 中是否存在</td><td>不存在</td><td>dislay：none隐藏</td></tr><tr><td>渲染时间</td><td>指定判别式或变量为true时</td><td>第一次页面渲染时</td></tr></tbody></table><h3 id="4-计算属性添加参数"><a href="#4-计算属性添加参数" class="headerlink" title="4. 计算属性添加参数"></a>4. 计算属性添加参数</h3><p>原来计算属性格式为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在<code>getValue</code>的括号里添加参数是会报错的。</p><p>可以结合计算属性的表面原理来改变下（真实原理还没理解）。</p><p>计算属性就是返回一个值。这个返回逻辑我们不知道怎么修改，可以对这个返回的值做手脚，比如我们再给他写一个函数，让它返回到这个函数里边继续去执行就行了。</p><p>格式如下。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">xy</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//加上你的逻辑</span>            <span class="token keyword">return</span> newValue        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，箭头函数也可以换成别的<code>function</code>，或者已经定义的函数。</p><p>引用时如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getClass(x)<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bpp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--x为变量或值--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-组件定义的方法"><a href="#5-组件定义的方法" class="headerlink" title="5.组件定义的方法"></a>5.组件定义的方法</h3><h4 id="5-1-向vue对象中添加"><a href="#5-1-向vue对象中添加" class="headerlink" title="5.1 向vue对象中添加"></a>5.1 向vue对象中添加</h4><p>步骤：先初始化<code>vue</code>对象，然后向这个对象中添加组件。</p><p>示例代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> pp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;sb /&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pp<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"sb"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2&gt;here are a sb!&lt;/h2&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        最后重新定义<code>vm</code>的原因是方便调试。可以参考本文 1 中内容。不需要的话可直接在<code>app</code>的最后进行<code>mount()</code></p></blockquote><h4 id="5-2-vue对象引入"><a href="#5-2-vue对象引入" class="headerlink" title="5.2 vue对象引入"></a>5.2 vue对象引入</h4><p>这种方法需要先定义组件，然后在初始化<code>vue</code>对象时引入这些组件。</p><p>​        示例代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> sb <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2&gt;here are a sb!&lt;/h2&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token operator">:</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">,</span>            <span class="token string">"s-p"</span><span class="token operator">:</span> sb<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;sb /&gt;&lt;s-p/&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3初始化时定义"><a href="#5-3初始化时定义" class="headerlink" title="5.3初始化时定义"></a>5.3初始化时定义</h4><p>这种方法是在vue对象初始化时在其内部直接定义，不过，少的话还行，多的话代码就臃肿了。</p><p>​        示例代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> pp <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        components<span class="token operator">:</span> <span class="token punctuation">{</span>            sb<span class="token operator">:</span><span class="token punctuation">{</span>                template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2&gt;here are a sb!&lt;/h2&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;sb /&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-组件间传值问题"><a href="#6-组件间传值问题" class="headerlink" title="6. 组件间传值问题"></a>6. 组件间传值问题</h3><p>父组件可通过属性，参数，传递数据给子组件。也可以通过路由等（我还不会）。</p><p>子组件可以选择接受，或拒收。</p><h4 id="6-1-接收"><a href="#6-1-接收" class="headerlink" title="6.1 接收"></a>6.1 接收</h4><h5 id="6-1-1-参数传值"><a href="#6-1-1-参数传值" class="headerlink" title="6.1.1 参数传值"></a>6.1.1 参数传值</h5><p>父组件调用子组件，可直接在标签内声明属性，并赋值，也可通过参数向子组件传递参数。</p><ul><li><p>通过参数接收。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;child message="what's a good day!"&gt;&lt;/child&gt;        </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">conL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;h2 @click="conL"&gt;{{message}}&lt;/h2&gt;        </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过参数传来的值，是无法进行修改的，如果想修改，只能进行备份。</p><blockquote><p>子组件传递参数，或者修改父组件中的值可参考本文<code>9--emit</code> 的内容。</p></blockquote><p>如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"clickAdd_2"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"counter_son"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                here_counter<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>counter_son<span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;h2&gt;双向奔赴&lt;/h2&gt;        &lt;h2&gt;{{here_counter}}&lt;/h2&gt;        &lt;button @click="here_counter++"&gt;点我+1&lt;/button&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="6-1-2-属性传值"><a href="#6-1-2-属性传值" class="headerlink" title="6.1.2 属性传值"></a>6.1.2 属性传值</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;child message="what's a good day!" style="color:red"&gt;&lt;/child&gt;    </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;h2&gt;{{this.$attrs.msg}}&lt;/h2&gt;    </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>style</code>会直接继承给 <code>h2</code>，</p><blockquote><p>​      </p><p>​     如果子模板中有多个标签，且没有根元素，则style属性默认将没人继承。</p><p>​     如果子模板有多个并列标签，可通过以下方式进行获取。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>    const app = Vue.createApp({        template: `    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>what<span class="token punctuation">'</span>s a good day!<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>    `,    });    app.component("child", {        template: `    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs.style<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>4865313<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs.style<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{$attrs.message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{$attrs.message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    `,    }).mount("#app");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="6-1-3-子组件拒收"><a href="#6-1-3-子组件拒收" class="headerlink" title="6.1.3 子组件拒收"></a>6.1.3 子组件拒收</h5><p>可在模板定义时指定<code>inheritAttrs</code> 属性为<code>false</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;child message="what's a good day!" style="color:red"&gt;&lt;/child&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app        <span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div&gt;          &lt;h2&gt;4865313&lt;/h2&gt;          &lt;h2&gt;{{$attrs.message}}&lt;/h2&gt;          &lt;h2&gt;{{$attrs.message}}&lt;/h2&gt;    &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         </p><p>​        此时 子模块 <code>div</code> 将不继承style属性。如果<code>inherittAttrs</code>为<code>true</code>，则将继承（此属性默认为<code>true</code>）。</p><p>​        但是又会发现，下边的<code>message</code>属性仍然显示了，所以这个值得改变并不能影响这种方法的获取，即子模版不能<code>嘴上说不要，身体又很诚实</code>。</p><h3 id="7-vue-样式绑定的方法"><a href="#7-vue-样式绑定的方法" class="headerlink" title="7. vue 样式绑定的方法"></a>7. vue 样式绑定的方法</h3><h4 id="7-1-一般方法"><a href="#7-1-一般方法" class="headerlink" title="7.1 一般方法"></a>7.1 一般方法</h4><p>声明模板时给标签添加<mark><code>id</code></mark>或者<mark>样式类</mark>等信息，然后在<code>css</code>文件或者<code>style</code>标签中写样式。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                myStyle<span class="token operator">:</span> <span class="token string">"color:red;text-decoration:line-through"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div :style="myStyle"&gt;这怎么还有一个BUG&lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-data中写style"><a href="#7-2-data中写style" class="headerlink" title="7.2 data中写style"></a>7.2 data中写style</h4><p>在<code>vue</code>的<code>data</code>属性中声明一个<code>style</code>变量并赋值然后将此变量用<code>v-model</code>绑定至标签上。</p><p>代码如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                myStyle<span class="token operator">:</span> <span class="token string">"color:red;text-decoration:line-through"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div :style="myStyle"&gt;asdsadsad&lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-在data中把样式类定义为变量。"><a href="#7-3-在data中把样式类定义为变量。" class="headerlink" title="7.3 在data中把样式类定义为变量。"></a>7.3 在data中把样式类定义为变量。</h4><p>这种也需要在<code>css</code>文件或者<code>style</code>标签中已经写好样式类。</p><p>用<code>v-model</code>将值绑定至属性上。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                myClassRed<span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span>                myClassGreen<span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div :class="myClassRed"&gt;asdsadsad&lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4-样式类对象"><a href="#7-4-样式类对象" class="headerlink" title="7.4 样式类对象"></a>7.4 样式类对象</h4><p>同样需要先写样式。</p><h5 id="7-4-1-true-amp-false"><a href="#7-4-1-true-amp-false" class="headerlink" title="7.4.1 true &amp; false"></a>7.4.1 true &amp; false</h5><p>在<code>data</code>中把需要的样式写为一个对象，然后根据需要设置<code>true</code>与<code>false</code>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                css<span class="token operator">:</span> <span class="token punctuation">{</span>                    transition<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    red<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    green<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">switch_bt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>css<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>css<span class="token punctuation">.</span>green<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>css<span class="token punctuation">.</span>green <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>css<span class="token punctuation">.</span>red<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;span :class="css"&gt;everything is ok&lt;/span&gt;&lt;br&gt;        &lt;button @click="switch_bt"&gt;switch&lt;/button&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染时，会先对对象中的值判断，为true时才会加入到<code>classlist</code>中。</p><h5 id="7-4-2-指定值"><a href="#7-4-2-指定值" class="headerlink" title="7.4.2 指定值"></a>7.4.2 指定值</h5><p>与7.2类似，只不过看着更直观，同样也是写成一个对象。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                myStyle<span class="token operator">:</span><span class="token punctuation">{</span>                    color<span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span>                    <span class="token string">"text-decoration"</span><span class="token operator">:</span><span class="token string">"line-through"</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div :style="myStyle"&gt;asdsadsad&lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果某一个属性有横线，则必须用引号引起来，没有横线的话引号可以省略。</p><h3 id="8-事件修饰符"><a href="#8-事件修饰符" class="headerlink" title="8.  事件修饰符"></a>8.  事件修饰符</h3><p><code>self</code>；<code>prevent</code>；<code>capture</code>；<code>once</code></p><p><code>self</code> :点标签自己有用，子标签没用，</p><p><code>prevent</code>：清除默认事件，如form的提交。</p><p><code>catpure</code>：使事件从父标签至字标签执行。（默认顺序为从内到外）。</p><p><code>once</code>：只执行一次。<br>。。。等<br>官方地址：<a href="https://v3.cn.vuejs.org/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">传送门</a></p><h3 id="9-emit"><a href="#9-emit" class="headerlink" title="9. emit"></a>9. emit</h3><p>第一次学真的有点懵，不过敲完代码，跑出来效果后，理解的就多了点。</p><p>先说下原理，与<code>props</code> 传参类似。只不过，<code>props</code> 传的是父组件的值，而emit是传递的函数。</p><blockquote><p> 产生这个组件时把父组件的某一个函数指定给它，而它就是通过emits属性接受的，同props接受数值一样。之后子函数就可以<mark>调用</mark>父组件的这个函数了。</p><p>之所以说是调用，是因为，如果你在父组件函数中使用<mark>父组件data的值</mark>，那么，子组件调用仍然可以正常使用。</p></blockquote><p>然后看一个代码实例:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                counter<span class="token operator">:</span> <span class="token string">"I have nothing!"</span><span class="token punctuation">,</span>                  <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">clickAdd</span><span class="token punctuation">(</span><span class="token parameter">st</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">+=</span>st<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                父数据&lt;a&gt;{{counter}}&lt;/a&gt;&lt;br&gt;                &lt;button @click="clickAdd('father_Click')"&gt;老父亲的点击&lt;/button&gt;&lt;br&gt;                子数据&lt;child @emitAdd="clickAdd" :cou="counter"&gt;&lt;/child&gt;        </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"cou"</span><span class="token punctuation">,</span><span class="token string">"Add"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        emits<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"emitAdd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>counter<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>cou<span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">sonToFather</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"emitAdd"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span>         <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div&gt;        接受的：&lt;a&gt;{{cou}}&lt;/a&gt;&lt;br&gt;        &lt;button @click='sonToFather("son_Click")'&gt;来自子组件的点击&lt;/button&gt;    &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> vm<span class="token operator">=</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中父组件声明一个<code>child</code> 标签，然后传给他<code>counter</code>，<code>clickAdd</code> ，<code>child</code>分别使用<code>props</code>、<code>emits</code>接收。</p><p>在父组件中，<code>clickAdd</code>函数是默认把<code>counter</code>字符串加<code>father_Click</code> 。但定义的函数是将一个参数加在<code>counter</code>后边，所以在子组件中，我们就可以传入这个参数。</p><p>就是在子组件中在声明一个函数——<code>sonToFather</code>。在这个函数体内就可以调用传入的函数——<code>clickAdd</code>，并指定传入这个函数的参数。这样子组件执行<code>sonToFather</code> 就等效是父组件的这个函数了。</p><p>以此实现子组件对父组件值得修改。</p><h3 id="10-slot"><a href="#10-slot" class="headerlink" title="10. slot"></a>10. slot</h3><ul><li><p><code>slot</code> 插槽一般写法。</p><p>​        插槽，在子模板中声明一个位置，然后填充父组件传入的数据（字符串、对象、<code>html</code>代码等）。当子模板slot中有数据等东西时，是默认值，即当父组件啥都没传入时才会显示。</p><blockquote><p>​        当<mark>子模板有多个插槽</mark>时，需要声明<code>slot</code>的<code>name</code>属性，然后在父组件使用时指定值。格式如第一个代码块第7、10行。第二种为省略写法。</p><p>​        但是当使用的是第二个代码块的方法时，必须带上<code>default=</code>,如第二个代码块第12行。</p><p>​        当<mark>父组件中出现多个插槽</mark>的使用时，需要使用<code>template</code>标签。然后在<code>template</code>标签内指定<code>name</code>。</p></blockquote><p>示例代码如下。</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;div&gt;            &lt;person&gt;                &lt;template v-slot:first&gt;                &lt;div&gt;第二首歌：好好过 - 胡歌&lt;/div&gt;       &lt;/template&gt;                                &lt;template #second&gt;                &lt;div&gt;第二首歌：一念执着 - 胡歌/阿兰&lt;/div&gt;       &lt;/template&gt;            &lt;/person&gt;      &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          &lt;slot name="first"&gt;            &lt;div&gt;第一首歌：我们的纪念 - 李雅微&lt;/div&gt;          &lt;/slot&gt;          &lt;slot name="second"&gt;            &lt;div&gt;第二首歌：父亲 - 筷子兄弟&lt;/div&gt;      &lt;/slot&gt;          &lt;slot name="third"&gt;            &lt;div&gt;第三首歌：Letting GO - 蔡健雅&lt;/div&gt;          &lt;/slot&gt;          </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>slot简写</p><p>这种简写算是都没有声明<code>name</code>的情况。</p><p>这里第一次使用时用到了一个知识点<mark>对象解构赋值</mark>，其作用是将子组件传来的对象还是啥都变成值。同时，也可以设定默认值如下代码块第6行。</p><blockquote><p>如果不解构，name输出的可能是个类。当然加<code>.valueName</code>也行。（valueName为类中项的名称）</p></blockquote><p>代码如下：</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div&gt;            &lt;person v-slot="{song:item='未收录'}"&gt;              &lt;div&gt;{{item}}&lt;/div&gt;          &lt;/person&gt;    &lt;/div&gt;        还可以缩写呦!&lt;br&gt;        &lt;div&gt;            &lt;person #default="{song:item='未收录'}"&gt;              &lt;div&gt;{{item}}&lt;/div&gt;          &lt;/person&gt;       &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                songs<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"第一首歌：我们的纪念 - 李雅微"</span><span class="token punctuation">,</span>                    <span class="token string">"第二首歌：父亲 - 筷子兄弟"</span><span class="token punctuation">,</span>                    <span class="token string">"第三首歌：Letting GO - 蔡健雅"</span><span class="token punctuation">,</span>                    <span class="token keyword">undefined</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div&gt;          &lt;slot v-for="song in songs" :song="song" /&gt;    &lt;/div&gt;          </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML塌陷</title>
      <link href="/2021/12/17/HTML%E5%A1%8C%E9%99%B7/"/>
      <url>/2021/12/17/HTML%E5%A1%8C%E9%99%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>父元素高度未指定时,子元素设置高度,子元素会超出父元素显示.</p><p>如下：</p><div id="fa" style="width:200px;border:5px solid black; margin:0 auto;">    <div style="margin:20px;height:20px;background-color:red;float:left">1</div>    <div style="margin:20px;height:20px;background-color:blue;float:left">2</div></div><p>代码为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>5px solid black<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>为父元素指定高度。</p><div id="fa" style="width:200px;height:60px;border:5px solid black; margin:0 auto;">    <div style="margin:20px;height:20px;background-color:red;float:left">1</div>    <div style="margin:20px;height:20px;background-color:blue;float:left">2</div></div><p>代码为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>60px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>5px solid black<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>弊端：当子元素发生变化后，仍然可能发生塌陷。</p></blockquote><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>为父元素添加<code>overflow:hidden</code> 属性。</p><blockquote><p>当父元素子域中有设置意料中溢出效果时会被隐藏。</p></blockquote><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>在父元素子域的最后添加一个附带<code>clear:both</code> 的元素。</p><p>较为简便的方法为</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#fa:after</span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span><span class="token string">'block'</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处父元素<code>id</code>设置为 <code>fa</code></p><p><code>:after</code> 是在前边选择器选择元素最后添加内容.</p><p><code>content:''</code> 是添加内容为空.</p><p><code>clear:both</code> 为排除添加内容上边元素float属性对自己的影响.</p><blockquote><p>clear 可设定三个值,left、right、both。指定忽略向哪个方向浮动的影响。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue借用axios向Java服务器发送请求</title>
      <link href="/2021/12/13/HTML%E5%80%9F%E7%94%A8axios%E5%90%91Java%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/12/13/HTML%E5%80%9F%E7%94%A8axios%E5%90%91Java%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    methods<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>        username<span class="token operator">:</span> username<span class="token punctuation">,</span>        password<span class="token operator">:</span> password    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请求已发送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">er</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>er<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="post"><a href="#post" class="headerlink" title="post"></a>post</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Java </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> axios </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3模板props问题</title>
      <link href="/2021/12/12/vue3%E6%A8%A1%E6%9D%BFprops%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/12/vue3%E6%A8%A1%E6%9D%BFprops%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-无参数模板"><a href="#1-无参数模板" class="headerlink" title="1.无参数模板"></a>1.无参数模板</h2><p>模板不需要传递参数，模板内标签是固定的。</p><p>虽然内容固定，但是它支持插值表达式，即可进行简单运算(四则运算<mark>+,-,*,/,%</mark>外加逻辑运算<mark>&amp;,|,!,&gt;&gt;,&lt;&lt;,^</mark>,吧)。比如<code>{{1+3}}{{(123&gt;456)}}</code></p><p>其模板为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;t2&gt;{{456+123}}&lt;/t2&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假设已声明  <code>vue</code> 对象 <code>pp</code>，则可添加模板 <code>example</code>如下。</p><blockquote><p><code>vue</code>对象声明组件需要在挂载之前。即<code>mount(“#asp”)</code>之前。</p></blockquote><ul><li>HTML代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title_tag</span> <span class="token attr-name">title_l</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token attr-name">title_r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title_tag</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title_tag</span> <span class="token attr-name">:title_l</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title_a<span class="token punctuation">"</span></span> <span class="token attr-name">:title_r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title_b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title_tag</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">//.....</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>script代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span>          title_a<span class="token operator">:</span> <span class="token string">"ook"</span><span class="token punctuation">,</span>         title_b<span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"title_tag"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title_l"</span><span class="token punctuation">,</span> <span class="token string">"title_r"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a&gt;{{title_l}}---{{title_r}}&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a&gt;abc123&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#asp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-有参数模板"><a href="#2-有参数模板" class="headerlink" title="2.有参数模板"></a>2.有参数模板</h2><p>模板通过声明<code>props</code>来接收参数。</p><p>传递参数值有两种形式：</p><ul><li>固定值，可以像标签的 <code>id</code> <code>src</code>等属性一样，直接赋值。</li><li>动态值，把<code>vue</code>对象中<code>data</code>内的变量赋值，这样模板的内容会随着此变量的变化而变化。</li></ul><h3 id="2-1非属性参数"><a href="#2-1非属性参数" class="headerlink" title="2.1非属性参数"></a>2.1非属性参数</h3><ul><li>html 部分代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>vue模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title_tag</span> <span class="token attr-name">title_l</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token attr-name">title_r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title_tag</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title_tag</span> <span class="token attr-name">:title_l</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title_a<span class="token punctuation">"</span></span> <span class="token attr-name">:title_r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title_b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title_tag</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//...</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中，script导入的是vue的包，应该不用多说。</p><p>HTML部分引用了两次模板，</p><p>第一次为声明一个自己写的模板，两个参数大的值是固定的，title_l=”123456” title_r=”abc”。</p><p>然后第二个是动态绑定。两个参数的值分别为vue对象app内的变量 title_a: “ook”,title_b: “error”,当这两个变量发生变化时，模板的内容也会发生变化。<mark>vue 的特色，数据驱动视图</mark></p></blockquote><ul><li>script代码</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          title_a<span class="token operator">:</span> <span class="token string">"ook"</span><span class="token punctuation">,</span>          title_b<span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"title_tag"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"title_l"</span><span class="token punctuation">,</span> <span class="token string">"title_r"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a&gt;{{title_l}}---{{title_r}}&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#asp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2属性参数"><a href="#2-2属性参数" class="headerlink" title="2.2属性参数"></a>2.2属性参数</h3><ul><li><p>HTML部分代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span> <span class="token attr-name">:style_m</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class_red<span class="token punctuation">"</span></span> <span class="token attr-name">:click_e</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a_click<span class="token punctuation">"</span></span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>example</span>        <span class="token attr-name">:style_m</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class_green<span class="token punctuation">"</span></span>        <span class="token attr-name">:click_e</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b_click<span class="token punctuation">"</span></span>        <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我green<span class="token punctuation">"</span></span>      <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>example</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//...</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>声明两个标签,分别赋值style属性、click事件、显示文本。</p></blockquote></li><li><p>script 部分代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title_a<span class="token operator">:</span> <span class="token string">"ook"</span><span class="token punctuation">,</span>      title_b<span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>      class_red<span class="token operator">:</span> <span class="token string">"background-color:red"</span><span class="token punctuation">,</span>      class_green<span class="token operator">:</span> <span class="token string">"background-color:green"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">a_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">b_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"bbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"click_e"</span><span class="token punctuation">,</span> <span class="token string">"style_m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;button @click="click_e" :style="style_m"&gt;{{text}}&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#asp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>定义的两个事件以作点击区分；</p><p>三个参数 文本，点击事件，style属性。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML选择器</title>
      <link href="/2021/12/10/HTML%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2021/12/10/HTML%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>queryselector为选择符合条件的第一个元素</p><p>queryselectorall 为选择符合条件的所有元素</p><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><table><thead><tr><th>位置</th><th>代码</th></tr></thead><tbody><tr><td>css</td><td>#myid</td></tr><tr><td>JavaScript</td><td>document.getElementById(“myid”)</td></tr><tr><td></td><td>document.queryselector(“#myid”)</td></tr></tbody></table><p>​    </p><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><table><thead><tr><th>位置</th><th>代码</th></tr></thead><tbody><tr><td>css</td><td>div</td></tr><tr><td>JavaScript</td><td>document.getElementByTag(“div”)  //获取到的是集合</td></tr><tr><td></td><td>document.queryselector(“div”) //同样是集合</td></tr></tbody></table><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><table><thead><tr><th>位置</th><th>代码</th></tr></thead><tbody><tr><td>css</td><td>.myclass</td></tr><tr><td>JavaScript</td><td>document.getElementsByClassName(“myclass”)</td></tr><tr><td></td><td>document.queryselector(“.myclass”)</td></tr></tbody></table><p>​    </p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><table><thead><tr><th>位置</th><th>代码</th></tr></thead><tbody><tr><td>css</td><td>[click=‘ook’]</td></tr><tr><td>JavaScript</td><td>document.querySelector(“button[class=myclass]”)</td></tr></tbody></table><p>​    </p><h2 id="伪-选择器"><a href="#伪-选择器" class="headerlink" title="(伪)选择器"></a>(伪)选择器</h2><table><thead><tr><th>位置</th><th>代码</th></tr></thead><tbody><tr><td>css</td><td>div::after    div:hover</td></tr><tr><td></td><td></td></tr></tbody></table><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2021/12/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/12/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一种比较常用算法，就像水下产生的泡泡一样，往上浮动，越来越大。有两种形式，越往后越大、越往后越小。</p><p>排序的方式（从小到大）：每次比较两个数，大的往后放。这样如果一个数最大，他就会依次交换，最后被放到最后一位。第二大的在倒数第二位。其他数依次。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以js代码为例说明。<mark>&nbsp;从小到大排序为例&nbsp;</mark></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">op</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//排序函数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> x <span class="token operator">=</span> n<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                n<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                n<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出原来数组</span><span class="token function">op</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入排序后数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，有两个循环。</p><p>第一个循环是定位，即现在排到第几个数。</p><p>第二个循环是用来比较，每次都再从头开始，即在仅存的数中再找到最大的，依次交换移到到最后。这时需要注意，<mark>最后不是数组的长度减一</mark>。因为上一级每一次循环都会找到最大的数，然后放在最后，此时最后边的数是已排序完成的。所以这时的循环次数需要减上级循环数。</p><p><mark>如果需要从大到小，只需要改变判断符号即可</mark></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java连接数据库（MySQL）</title>
      <link href="/2021/11/14/java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88MySQL%EF%BC%89/"/>
      <url>/2021/11/14/java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88MySQL%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备数据库连接的jar包"><a href="#1-准备数据库连接的jar包" class="headerlink" title="1. 准备数据库连接的jar包"></a>1. 准备数据库连接的jar包</h2><p><a href="https://www.aliyundrive.com/s/HYFjvqyfriz">传送门</a></p><h2 id="2-添加包"><a href="#2-添加包" class="headerlink" title="2. 添加包"></a>2. 添加包</h2><p>如图，选择项目结构。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/blog/java/java%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%8C%85.png" alt="image-20211114230412195" style="zoom:67%;"><p>点击<code>+</code> 选择java，然后选择下载的文件包。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/blog/java/java%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%8C%852.png" alt="image-20211114230606459" style="zoom: 33%;"><h2 id="3-连接代码"><a href="#3-连接代码" class="headerlink" title="3. 连接代码"></a>3. 连接代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class mysql_ex {    static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";    //声明连接数据库的驱动，有两种“com.mysql.cj.jdbc.Driver”，与“com.mysql.jdbc.Driver”    //取决于包的版本，8.0.x用带'.cj.'的    static final String DB_URL = "jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC";    //连接字符串，test为数据库名，3306为MySQL使用的端口号。    static final String USER = "root";    //数据库账户名    static final String PASS = "******";    //数据库密码    public static void main(String[] args) throws Exception {        Connection cn = null;        Statement st = null;        //声明连接        Class.forName(JDBC_DRIVER);        //引入连接驱动        cn = DriverManager.getConnection(DB_URL, USER, PASS);        //连接初始化        st = cn.createStatement();        String sql = "select * from students";        ResultSet re = st.executeQuery(sql);        //返回结果        while (re.next()) {            System.out.println(                    String.format("姓名：%s 学号：%d 性别: %s",                            re.getString("name"),re.getInt("no"),re.getString("sex")));        }        re.close();        st.close();        cn.close();        //关闭连接    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨域问题</title>
      <link href="/2021/11/13/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/13/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h2><p>在一个域名内访问另一个域名时，如果两者【域名，端口，协议】有一个不一样，就会提示跨域错误。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><ul><li>前提，服务器支持JSONP请求。</li><li>局限，只支持get请求。</li><li>安全，很低。</li></ul><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>通过设置网页的header，跟服务器进行协商，然后实现跨域访问。</p><p>以下为调用某api时我的代码，axios实现的请求访问。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url<span class="token operator">:</span> <span class="token string">"https://xxxx.xxxxx.xxx//xxx.xxx"</span><span class="token punctuation">,</span>            headers<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token string">'Access-Control-Allow-Headers'</span><span class="token operator">:</span> <span class="token string">'X-Requested-With'</span><span class="token punctuation">,</span>                <span class="token string">'Access-Control-Allow-Methods'</span><span class="token operator">:</span> <span class="token string">'PUT, GET, POST, DELETE, OPTIONS'</span><span class="token punctuation">,</span>                <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/json'</span><span class="token punctuation">,</span>                <span class="token string">"Access-Control-Allow-Headers"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>                <span class="token string">"Authorization"</span><span class="token operator">:</span> <span class="token string">'APPCODE ********************'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//获取到数据之后执行的操作。</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为ajax 实现get请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>        <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"http://apia.yikeapi.com/olympic/?appid=********************"</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ress <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            lis <span class="token operator">=</span> ress<span class="token punctuation">.</span>list<span class="token punctuation">;</span>            $imgs<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lis<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $imgs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>                    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="score-table"&gt;                国旗:&lt;img src='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>flag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'&gt;&lt;br&gt;                国家或地区：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>country<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;br&gt;                金牌：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>jin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;br&gt;                银牌：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>yin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;br&gt;                铜牌：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>tong<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;br&gt;                总数：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;br&gt;                &lt;/div&gt; </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">er</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>er<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>这种暂时用不到，因为我不是前端开发人员，暂时没空研究，可以自行搜索。这种用的最多，最为正式。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）CPU</title>
      <link href="/2021/11/07/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89CPU/"/>
      <url>/2021/11/07/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89CPU/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CPU-功能"><a href="#1-CPU-功能" class="headerlink" title="1. CPU 功能"></a>1. CPU 功能</h2><ul><li><p>指令控制。</p><p>​        程序的顺序控制。因为程序是一个指令序列，这些指令的相互顺序不能任意颠倒，所以必须严格按照规定的顺序进行。</p></li><li><p>操作控制</p><p>​        一条指令的功能往往由多个操作信号组合来实现，因此CPU管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。</p></li><li><p>时间控制</p><p>​        对各种此操作实施时间上的定时。在计算机中，各种指令的操作信号均受到时间的严格定时。其次，每条指令的整个执行过程也受时间的阉割定时。</p></li><li><p>数据加工</p><p>​        对数据进行算术运算和逻辑运算处理。</p></li></ul><h2 id="2-CPU组成"><a href="#2-CPU组成" class="headerlink" title="2. CPU组成"></a>2. CPU组成</h2><p>​    传统CPU由运算器与控制器组成，现代CPU由浮点运算器、cache、存储管理等部件构成。</p><h3 id="2-1-控制器"><a href="#2-1-控制器" class="headerlink" title="2.1 控制器"></a>2.1 控制器</h3><p>​    由程序计数器、指令寄存器、指令译码器、时序产生器和操作控制器组成。</p><p>​    协调和指挥整个计算机系统。</p><p>​    主要功能：</p><ul><li>从指令cache中取出一条指令，并指向下一条指令在cache中的位置。</li><li>对指令进行译码与测试，并产生相应的操作控制信号，以启动规定的动作。</li><li>指挥并控制CPU、数据cache和输入/输出设备之间数据流动的方向。</li></ul><h3 id="2-2-运算器"><a href="#2-2-运算器" class="headerlink" title="2.2 运算器"></a>2.2 运算器</h3><p>​    由 <mark>算术逻辑运算单元（ALU）</mark>、通用寄存器、数据缓冲寄存器（DR）、和程序状态寄存器（状态条件寄存器  PSWR）组成。</p><p>​    主要进行数据加工处理部件。</p><p>​    主要功能：</p><ul><li><p>执行所有的算术运算。</p></li><li><p>执行所有的逻辑运算，并进行逻辑测试。</p></li></ul><h3 id="2-3-CPU中主要寄存器"><a href="#2-3-CPU中主要寄存器" class="headerlink" title="2.3 CPU中主要寄存器"></a>2.3 CPU中主要寄存器</h3><h4 id="2-3-1-数据缓冲寄存器——DR"><a href="#2-3-1-数据缓冲寄存器——DR" class="headerlink" title="2.3.1 数据缓冲寄存器——DR"></a>2.3.1 数据缓冲寄存器——DR</h4><p>功能：暂时存放ALU的运算结果、数据存储器读出一个数据字、来自外部接口的一个数据字。</p><p>作用：</p><ul><li>作为ALU运算结果和通用寄存器之间信息传送中时间上的缓存。</li><li>补偿CPU和内存、外围设备之间在操作速度上的差别。    </li></ul><h4 id="2-3-2-指令寄存器——IR"><a href="#2-3-2-指令寄存器——IR" class="headerlink" title="2.3.2 指令寄存器——IR"></a>2.3.2 指令寄存器——IR</h4><p>保存当前正在执行的一条指令。</p><blockquote><p><mark>指令译码器 (ID)</mark></p><p>当执行指令时，先把一条指令从指令存储器读出，然后传送至指令寄存器。执行任何给定的指令，必须对指令中的操作码进行测试和翻译，以识别对应的操作。这些工作就是指令译码器的工作。</p></blockquote><h3 id="2-3-3-程序（指令）计数器——PC"><a href="#2-3-3-程序（指令）计数器——PC" class="headerlink" title="2.3.3 程序（指令）计数器——PC"></a>2.3.3 程序（指令）计数器——PC</h3><p>程序运行时，用来记录当前指令位置，并确定时下一条指令的位置，以保证程序能够连续执行。</p><p>程序开始执行时指向从指令存储器中提取的第一条指令的地址，当程序运行时，CPU会自动修改PC中的位置。当运行至跳转语句时，PC不再是加一，而是修改为跳转语句中指定的指令地址。</p><h4 id="2-3-4-数据地址寄存器——AR"><a href="#2-3-4-数据地址寄存器——AR" class="headerlink" title="2.3.4 数据地址寄存器——AR"></a>2.3.4 数据地址寄存器——AR</h4><p>保存当前CPU所访问的数据存储器单元的地址。</p><p>对数据存储器的访问需要进行地址译码，故需要使用地址寄存器保存地址信息，直至一次读/写完成。</p><h4 id="2-3-5-通用寄存器"><a href="#2-3-5-通用寄存器" class="headerlink" title="2.3.5 通用寄存器"></a>2.3.5 通用寄存器</h4><p>CPU中通用寄存器有许多，任何一个都可存放源操作数、结果操作数。</p><p>作用：为ALU提供工作区、地址指示器、变址寄存器、堆栈指示器等。</p><h4 id="2-3-6-程序状态字寄存器——PSWR"><a href="#2-3-6-程序状态字寄存器——PSWR" class="headerlink" title="2.3.6 程序状态字寄存器——PSWR"></a>2.3.6 程序状态字寄存器——PSWR</h4><ul><li>保存由算术运算单元和逻辑运算单元指令运算或测试结果简历的各种条件代码。</li></ul><blockquote><p>如，进位标志、溢出标志、为零标志、为负标志等。</p></blockquote><ul><li>保存中断和系统工作状态等信息，以便使CPU和系统性能及时了解机器运行状态和程序运算状态。</li></ul><h3 id="2-4-操作控制器"><a href="#2-4-操作控制器" class="headerlink" title="2.4 操作控制器"></a>2.4 操作控制器</h3><p>各个寄存器之间存在传送信息的通路（<mark>数据通路</mark>），这些通路的建立就是由操作控制器的部件完成的。其功能就是根据指令操作码和时序信号，产生各种操作控制信号，然后正确的选择数据通路，把有关数据存入一个寄存器。从而完成取指令和执行指令的控制。</p><h3 id="2-5-时序控制器"><a href="#2-5-时序控制器" class="headerlink" title="2.5 时序控制器"></a>2.5 时序控制器</h3><p>按设计方法可分为时序逻辑型、存储逻辑型。</p><h4 id="2-5-2-硬布线控制器——时序逻辑型"><a href="#2-5-2-硬布线控制器——时序逻辑型" class="headerlink" title="2.5.2 硬布线控制器——时序逻辑型"></a>2.5.2 硬布线控制器——时序逻辑型</h4><h4 id="2-5-1-微程序控制器——存储逻辑型"><a href="#2-5-1-微程序控制器——存储逻辑型" class="headerlink" title="2.5.1 微程序控制器——存储逻辑型"></a>2.5.1 微程序控制器——存储逻辑型</h4><h2 id="3-指令周期"><a href="#3-指令周期" class="headerlink" title="3. 指令周期"></a>3. 指令周期</h2><p>取出一条指令并执行这条指令的时间。指令周期常常由若干个<mark>CPU</mark>周期组成。</p><h2 id="4-微程序控制器"><a href="#4-微程序控制器" class="headerlink" title="4. 微程序控制器"></a>4. 微程序控制器</h2><h3 id="4-1-微程序控制原理"><a href="#4-1-微程序控制原理" class="headerlink" title="4.1 微程序控制原理"></a>4.1 微程序控制原理</h3><p>仿照通常的阶梯程序的方法，把操作控制信号变成所谓的“微指令”，存放到一个只读存储器里。当机器运行是，一条一条地读出这些微指令，从而产生全机所需要的各种操作控制信号，使相应部件执行所规定的的操作。</p><p>主要由控制存储器、微指令寄存器和地址转移逻辑组成。</p><blockquote><p><mark>微指令寄存器</mark> :由微地址寄存器、微命令寄存器组成。</p></blockquote><h4 id="4-1-1-控制存储器"><a href="#4-1-1-控制存储器" class="headerlink" title="4.1.1 控制存储器"></a>4.1.1 控制存储器</h4><p>用来存放实现全部指令系统的微程序。</p><h3 id="4-2-微命令、微操作"><a href="#4-2-微命令、微操作" class="headerlink" title="4.2 微命令、微操作"></a>4.2 微命令、微操作</h3><ul><li><p>微命令——控制部件通过控制线向执行不见发出的各种控制在命令。</p></li><li><p>微操作——执行不见接受微命令后所进行的操作。</p><blockquote><p><mark>相容性微操作</mark> :在同时或同一个CPU周期内可以并行执行的微操作。</p><p><mark>想斥性微操作</mark> :不能在同时或同一个CPU周期内并行执行的微操作。</p></blockquote></li></ul><h3 id="4-3-微指令、微程序"><a href="#4-3-微指令、微程序" class="headerlink" title="4.3 微指令、微程序"></a>4.3 微指令、微程序</h3><ul><li>微指令——在机器的一个CPU周期中，一组实现一定操作程序的微命令的组合。</li><li>微程序——许多微指令组成的序列。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）连续分配存储管理方式</title>
      <link href="/2021/10/31/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/10/31/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/2021/10/30/%E6%AD%BB%E9%94%81/"/>
      <url>/2021/10/30/%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p><em>教材：计算机操作系统（慕课版）</em></p><h2 id="1-死锁概述"><a href="#1-死锁概述" class="headerlink" title="1. 死锁概述"></a>1. 死锁概述</h2><p>一台计算机有两个进程P<sub>1</sub>, P<sub>2</sub> ，两台外设R<sub>1</sub> ,R<sub>2</sub> 。进程P<sub>1</sub> 请求R<sub>1</sub> 成功，进程P<sub>2</sub> 请求R<sub>2</sub> 成功。</p><p>然后P<sub>2</sub> 又需要请求R<sub>1</sub> ，然后P<sub>1</sub> 又需要请求R<sub>2</sub> ，.结果两者都因为被占用无法分配成功，又都希望对方释放自己需要，而对方占有的资源。但它们都会因为无法获取自己所需的资源去继续运行而无法释放自己当下占有的资源。则他们将一直处于这样的僵持状态——死锁。</p><h3 id="1-1资源问题"><a href="#1-1资源问题" class="headerlink" title="1.1资源问题"></a>1.1资源问题</h3><p>可导致死锁的资源是需要<mark style="background-color:#2AA6FD;border-radius:5px;padding:5px">采用互斥访问方法</mark>的、<mark style="border-radius:5px;padding:5px">不可被抢占</mark>的资源。如，打印机，数据文件，队列，信号。</p><h4 id="1-1-1-可重复资源-与-可消耗资源"><a href="#1-1-1-可重复资源-与-可消耗资源" class="headerlink" title="1.1.1 可重复资源 与 可消耗资源"></a>1.1.1 可重复资源 与 可消耗资源</h4><h5 id="1-1-1-1可重复资源"><a href="#1-1-1-1可重复资源" class="headerlink" title="1.1.1.1可重复资源"></a>1.1.1.1可重复资源</h5><p>可供用户重复使用多次的资源。</p><ul><li><p>性质</p><ol><li>每个可重用资源中的单元，职能分配给一个进程使用，而不允许多个进程共享。</li><li>进程若要使用可重复资源，必须按以下流程<ul><li>请求资源，若请求失败，则将会阻塞或循环等待；</li><li>使用资源，进程对资源进行操作。</li><li>释放资源，当进程使用完毕后<mark style="border-radius:5px;padding:5px">自己</mark>将其释放。</li></ul></li><li>系统中每类可重用资源中的单元数量是相对固定的，进程在运行期间既不能创建资源，也不能删除资源。</li></ol><blockquote><p>资源的请求与释放通常都是利用系统调用实现的。另，系统中大多数资源属于可重用资源。</p></blockquote></li></ul><h4 id="1-1-1-2-可消耗资源"><a href="#1-1-1-2-可消耗资源" class="headerlink" title="1.1.1.2 可消耗资源"></a>1.1.1.2 可消耗资源</h4><p>又称临时性资源，在进程运行期间又进程动态创建和消耗。</p><ul><li><p>性质</p><ol><li><p>每类可消耗性资源的单元数目在进程运行期间是可以不断变化的，有时多，有时少（甚至0）。</p></li><li><p>进程运行过程中可不断创造可消耗资源的但愿你，将它们放入该资源类的缓冲区中，以增加该资源类的单元数目</p></li><li><p>进程在运行过程中可以请求若干个可消耗资源单元，用于进程自己消耗，并不把这些返回给该资源类。</p><blockquote><p>可消耗资源通常由生产者进程创建，由消费者进程消耗。如进程间通信的消息。</p></blockquote></li></ol></li></ul><h4 id="1-1-2-可抢占资源-与-不可抢占资源"><a href="#1-1-2-可抢占资源-与-不可抢占资源" class="headerlink" title="1.1.2 可抢占资源 与 不可抢占资源"></a>1.1.2 可抢占资源 与 不可抢占资源</h4><ul><li><p>可抢占资源</p><p>指进程获得这类资源后，这类资源可以在被其他进程或系统抢占。</p><blockquote><p>如    </p><blockquote><p>​    优先级高的进程抢占优先级低的进程的处理机；</p></blockquote><blockquote><p>​    一个进程从一个存储区转移到另一个存储区，在内存紧张时，还可以将一个进程从你内存调回到外存，即抢占进程内存的空间；</p></blockquote><blockquote><blockquote><p>故，处理机与内存都属于可抢占资源。不会引起死锁。</p></blockquote></blockquote><blockquote></blockquote></blockquote></li><li><p>不可抢占资源</p><p>一旦系统把这类资源分配给某进程后，便无法强行收回，只能等待进程运行结束后自行释放。</p><blockquote><p>如</p><blockquote><p>进程开始刻录光盘，如果刻录机被打断分配给其他进程，则光盘将会损坏。因此刻录机只能输入不可抢占资源。</p></blockquote></blockquote></li></ul><h3 id="1-2-计算机系统中的死锁"><a href="#1-2-计算机系统中的死锁" class="headerlink" title="1.2 计算机系统中的死锁"></a>1.2 计算机系统中的死锁</h3><p>起因：通常源于多个进程对资源的争夺，不仅对不可抢占资源进行争夺时会引起死锁，而且对可消耗资源进行那个争夺时也会引起死锁。</p><h4 id="case-1：竞争不可抢占资源引起"><a href="#case-1：竞争不可抢占资源引起" class="headerlink" title="case 1：竞争不可抢占资源引起"></a>case 1：竞争不可抢占资源引起</h4><p>两个进程P<sub>1</sub> ，P<sub>2</sub> 并发执行时。如果两个进程操作的资源存在交叉且顺序相反，则可能出现以下情况。</p><ol><li><p>P<sub>1</sub> 先打开文件F<sub>1</sub> ，P<sub>2</sub> 先打开文件F<sub>2</sub> ，接下来P<sub>1</sub>需要去打看F<sub>2</sub>， P<sub>2</sub> 需要去打开F<sub>1</sub> 。</p></li><li><p>然后 P<sub>1</sub> 经过一段时间或者马上（总之就是P<sub>2</sub> 打开F<sub>2</sub>之后 ）需要去打开文件 F<sub>2</sub> 进行操作 ，此时P<sub>2</sub> 肯定不让，因为此资源是不可抢占资源 ，只能等P<sub>2</sub> 运行结束之后才能交出F<sub>2</sub> 的操作权。</p></li><li><p>P<sub>1</sub> 只能等待P<sub>2</sub> 结束。</p></li><li><p>P<sub>2</sub> 运行至需要操作 F<sub>1</sub> 的环节。但是P<sub>1</sub> 还在等待P<sub>2</sub> 交出F<sub>2</sub>  .</p></li><li><p>因此两进程将无限期地等待下去，进而形成死锁。</p></li></ol><h4 id="case-2：竞争可消耗资源引起"><a href="#case-2：竞争可消耗资源引起" class="headerlink" title="case 2：竞争可消耗资源引起"></a>case 2：竞争可消耗资源引起</h4><p>用一个聊天软件为例，三个用户在互相聊天。用户分别为m<sub>1</sub>、m<sub>2</sub>、m<sub>3</sub> ，m<sub>1</sub> 给m<sub>2</sub> 发送消息，接收m<sub>3</sub> 发送的消息；m<sub>2</sub> 给m<sub>3</sub> 发送消息， 接收m<sub>1</sub> 发出的消息；m<sub>3</sub> 给m<sub>1</sub> 发送消息， 接收m<sub>2</sub> 发出的消息 。</p><blockquote><p>将用户替换为进程即为真实情况。进程之间也存在互相交换信息。</p></blockquote><div style="text-align:center"><svg height="342" width="403" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 403 342.249">    <defs>        <linearGradient y2="100%" id="lg1" y1="0%" x2="0%" x1="0%">            <stop offset="0.35" stop-color="#7fe0ea"></stop>            <stop offset="0.46" stop-color="#4cdae6"></stop>            <stop offset="1.00" stop-color="#44c5d0"></stop>        </linearGradient>        <linearGradient y2="100%" id="lg2" y1="0%" x2="0%" x1="0%">            <stop offset="0.00" stop-color="#7fe0ea"></stop>            <stop offset="0.46" stop-color="#4cdae6"></stop>            <stop offset="1.00" stop-color="#44c5d0"></stop>        </linearGradient>    </defs>    <g id="group1" transform="translate(-25.36,-50.03)">        <g id="group2" transform="translate(190.21,51.02)">            <path fill-rule="nonzero" d="M.0,20.7C.0,20.7,7.7,.1,7.7,.1C21.6,3.0,33.8,.1,33.8,.1L40.6,20.7L35.9,23.3L30.5,8.2L30.5,26.7L37.6,60.5L30.1,60.5L20.9,32.4L11.8,60.5L3.8,60.9L11.5,26.7L11.5,8.8L5.9,23.3L.0,20.7z" id="shape3" fill="url(#lg1)" stroke="#4cdae6" transform="translate(0.00,20.29)"></path>            <path fill-rule="nonzero" d="M.0,8.4C.0,3.8,3.8,.0,8.5,.0C13.1,.0,16.9,3.8,16.9,8.4C16.9,13.1,13.1,16.9,8.5,16.9C3.8,16.9,.0,13.1,.0,8.4z" id="shape4" fill="url(#lg1)" stroke="#4cdae6" transform="translate(11.83,0.01)"></path>            <text style="fill:#000000;font-family:Microsoft YaHei;font-size:14.00pt" xml:space="preserve">                <tspan x="8.9" y="102.1">m</tspan>                <tspan style="font-size:9.10pt" x="26.5" y="106.0" textLength="7.2">1</tspan>            </text>        </g>        <g id="group5" transform="translate(66.71,274.71)">            <path fill-rule="nonzero" d="M.0,20.7C.0,20.7,7.7,.1,7.7,.1C21.6,3.0,33.8,.1,33.8,.1L40.6,20.7L35.9,23.3L30.5,8.2L30.5,26.7L37.6,60.5L30.1,60.5L20.9,32.4L11.8,60.5L3.8,60.9L11.5,26.7L11.5,8.8L5.9,23.3L.0,20.7z" id="shape6" fill="url(#lg2)" stroke="#4cdae6" transform="translate(0.00,20.29)"></path>            <path fill-rule="nonzero" d="M.0,8.4C.0,3.8,3.8,.0,8.5,.0C13.1,.0,16.9,3.8,16.9,8.4C16.9,13.1,13.1,16.9,8.5,16.9C3.8,16.9,.0,13.1,.0,8.4z" id="shape7" fill="url(#lg2)" stroke="#4cdae6" transform="translate(11.83,0.01)"></path>            <text style="fill:#000000;font-family:Microsoft YaHei;font-size:14.00pt" xml:space="preserve">                <tspan x="8.9" y="102.1">m</tspan>                <tspan style="font-size:9.10pt" x="26.5" y="106.0" textLength="7.2">3</tspan>            </text>        </g>        <g id="group8" transform="translate(317.11,271.62)">            <path fill-rule="nonzero" d="M.0,20.7C.0,20.7,7.7,.1,7.7,.1C21.6,3.0,33.8,.1,33.8,.1L40.6,20.7L35.9,23.3L30.5,8.2L30.5,26.7L37.6,60.5L30.1,60.5L20.9,32.4L11.8,60.5L3.8,60.9L11.5,26.7L11.5,8.8L5.9,23.3L.0,20.7z" id="shape9" fill="url(#lg2)" stroke="#4cdae6" transform="translate(0.00,20.29)"></path>            <path fill-rule="nonzero" d="M.0,8.4C.0,3.8,3.8,.0,8.5,.0C13.1,.0,16.9,3.8,16.9,8.4C16.9,13.1,13.1,16.9,8.5,16.9C3.8,16.9,.0,13.1,.0,8.4z" id="shape10" fill="url(#lg2)" stroke="#4cdae6" transform="translate(11.83,0.01)"></path>            <text style="fill:#000000;font-family:Microsoft YaHei;font-size:14.00pt" xml:space="preserve">                <tspan x="8.9" y="102.1">m</tspan>                <tspan style="font-size:9.10pt" x="26.5" y="106.0" textLength="7.2">2</tspan>            </text>        </g>        <path fill-rule="nonzero" d="M.0,.0C.0,.0,17.3,2.0,34.9,9.0C52.5,16.1,70.9,30.0,80.3,40.2C89.2,49.8,97.1,60.8,102.2,70.5C107.2,79.9,113.2,93.7,113.2,93.7L123.0,92.8L112.2,118.6L84.4,97.1L93.8,95.7C93.8,95.7,90.0,85.2,84.9,75.6C79.9,66.2,73.2,54.6,67.0,46.7C60.4,38.1,49.0,25.8,38.0,17.8C21.7,5.9,.9,1.0,.0,.0z" id="shape11" fill="#8e5eef" stroke="#8e5eef" transform="matrix(0.97,0.26,-0.26,0.97,255.6,115.7)"></path>        <g id="shape12" transform="translate(207.71,75.63)">            <text style="fill:#454545;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan x="23.5" y="37.9">发送信息</tspan>            </text>        </g>        <path fill-rule="nonzero" d="M.0,.0C.0,.0,18.3,2.1,36.8,9.5C55.3,17.0,74.7,31.7,84.6,42.4C94.0,52.6,102.4,64.2,107.7,74.4C113.0,84.3,119.3,98.9,119.3,98.9L129.7,98.0L118.2,125.2L88.9,102.5L98.9,101.0C98.9,101.0,94.8,89.9,89.5,79.8C84.3,69.9,77.1,57.7,70.7,49.3C63.7,40.3,51.6,27.3,40.0,18.8C22.8,6.3,.9,1.0,.0,.0z" id="shape13" fill="#8e5eef" stroke="#8e5eef" transform="matrix(-0.77,0.64,-0.64,-0.77,299.4,368.6)"></path>        <g id="shape14" transform="translate(239.66,319.55)">            <text style="fill:#454545;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan x="23.5" y="37.9">发送信息</tspan>            </text>        </g>        <path fill-rule="nonzero" d="M.0,.0C.0,.0,16.1,1.8,32.5,8.4C48.9,15.0,66.0,28.0,74.7,37.5C83.0,46.4,90.4,56.7,95.2,65.7C99.8,74.4,105.4,87.3,105.4,87.3L114.5,86.5L104.4,110.6L78.5,90.5L87.3,89.2C87.3,89.2,83.8,79.4,79.0,70.4C74.4,61.7,68.1,50.9,62.4,43.5C56.3,35.6,45.6,24.1,35.3,16.6C20.2,5.5,.8,.9,.0,.0z" id="shape15" fill="#8e5eef" stroke="#8e5eef" transform="matrix(-0.17,-0.98,0.98,-0.17,85.3,243.4)"></path>        <g id="shape16" transform="translate(26.36,221.55)">            <text style="fill:#454545;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan x="23.5" y="37.9">发送信息</tspan>            </text>        </g>        <g id="shape17" transform="translate(326.34,233.54)">            <text style="fill:#454545;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan x="23.5" y="37.9">接收信息</tspan>            </text>        </g>        <g id="shape18" transform="translate(85.08,299.84)">            <text style="fill:#454545;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan x="23.5" y="37.9">接收信息</tspan>            </text>        </g>        <g id="shape19" transform="translate(93.07,65.77)">            <text style="fill:#454545;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan x="23.5" y="37.9">接收信息</tspan>            </text>        </g>    </g></svg></div><p>当设定每个用户的执行顺序为先发送给下一个用户消息，然后再接受上一位用户的消息，那么可以顺利运行。但是会存在延迟。</p><p>但如果顺序颠倒，先接受，后发送。确实没有了延迟，但是问题就产生了。因为没有第一个发送消息的人。所以这个循环就进行不下去。三个进程就都阻塞在接收操作上。因此产生死锁。</p><h4 id="case-3：进程推进顺序不当引起"><a href="#case-3：进程推进顺序不当引起" class="headerlink" title="case 3：进程推进顺序不当引起"></a>case 3：进程推进顺序不当引起</h4><p>进程在运行过程中，对资源进行申请和释放的顺序是否合法，也是在系统中是否会产生死锁的一个重要因素。</p><blockquote><p>这种情况可根据<code>case 1</code>理解 。只不过，<code>case 3</code> 与<code>case 1</code> 的区别是：<code>case 1</code> 中进程顺序不当必定会造成死锁。<code>case 3</code> 中的顺序不当，只有在竞争不可抢夺资源时才会造成死锁。两者关系为：<code>case 1</code>是<code>case 3</code> 的充分条件。</p></blockquote><h3 id="1-2-死锁-定义"><a href="#1-2-死锁-定义" class="headerlink" title="1.2. 死锁-定义"></a>1.2. 死锁-定义</h3><p>如果一度进程中的每个进程都在等待仅由改组进程中的其他进程才能引发的事件发生，那么改组进程就是死锁的。</p><h3 id="1-3-产生死锁的必要条件"><a href="#1-3-产生死锁的必要条件" class="headerlink" title="1.3. 产生死锁的必要条件"></a>1.3. 产生死锁的必要条件</h3><ul><li><mark style="background-color:#64FA9B;padding:5px;border-radius:5px">互斥条件</mark>。一段时间内，某资源只能被一个进程使用。</li><li><mark style="background-color:#64FA9B;padding:5px;border-radius:5px">请求和保持条件</mark>。进程已占有至少一个资源，但有一处了新的资源请求，而被请求的资源已被其他进程占用，则此时请求进程被阻塞，同时对自己已占有的资源不放。</li><li><mark style="background-color:#64FA9B;padding:5px;border-radius:5px">不可抢占条件</mark>。进程已获得的资源在未使用完之前不能被抢占，只能在进程使用完之后由其自己释放。</li><li><mark style="background-color:#64FA9B;padding:5px;border-radius:5px">循环等待条件</mark>。发生死锁时必定存在一个“进程-资源”的循环链。首尾相接，每一个进程都需要下一个进程已占的资源，而下一个又需要它的下一个进程已经占用的资源。最后一个又需要第一个进程已占用的资源。</li></ul><h2 id="4-死锁的处理方法"><a href="#4-死锁的处理方法" class="headerlink" title="4. 死锁的处理方法"></a>4. 死锁的处理方法</h2><ul><li>采用某个协议来预防与避免死锁，确保系统永远不会进入死锁状态；</li><li>允许系统进入死锁状态，但是会检测它，然后恢复。</li><li>忽略这个问题，并假装系统中永远不会出现死锁。</li></ul><h2 id="5-死锁的预防"><a href="#5-死锁的预防" class="headerlink" title="5. 死锁的预防"></a>5. 死锁的预防</h2><p>通过破坏产生死锁的四个必要条件中的一个或几个来实现。</p><blockquote><p>​        互斥条件是非共享设备所必须具备的条件，不仅不能改变，还应加以保证。</p><p>因此智能破坏后三个条件。</p></blockquote><h4 id="a-破坏“请求和保持”条件。"><a href="#a-破坏“请求和保持”条件。" class="headerlink" title="a. 破坏“请求和保持”条件。"></a>a. 破坏“请求和保持”条件。</h4><p>破环“请求和保持”条件，则系统必须保证：当一个进程在请求资源时，他不能占有不可抢占资源。</p><p>所以有以下两种协议可实现：</p><ul><li><p>第一种协议</p><p>协议规定，所有进程开始运行之前，必须一次申请其在整个运行过程中需要的全部资源。即只要有一种资源不满足分配条件，此进程就得不到所需的任何资源。因此进程就无法 占用其他进程需要资源 的同时又去申请 其他资源 而导致死锁。</p><blockquote><p>特点：简单、易行、安全。但资源被严重浪费，降低了资源利用率。另外容易导致饥饿现象。</p></blockquote></li><li><p>第二种协议</p><p>  第一种协议的改进。它允许进程只获得运行初期所需的资源就开始运行。金策好难过运行过程中再逐步释放已分配给自己的、且已用完的全部资源，然后再请求新的所需资源。</p><blockquote><p>特点：使进程更快的完成任务，提高了设备的利用率，还减少了进程发生饥饿的概率。</p></blockquote></li></ul><h4 id="b-破坏“不可抢占”条件"><a href="#b-破坏“不可抢占”条件" class="headerlink" title="b.破坏“不可抢占”条件"></a>b.破坏“不可抢占”条件</h4><p>为了破坏“不可抢占”条件，协议规定，当一个已经保持了某些不可抢占资源的进程提出新的资源请求而不能满足时，他必须释放已经占有的所有资源，待以后需要时再重新申请。即申请不到，就释放自己有的资源，这就没有什么不可抢占一说了。</p><blockquote><p>特点：</p><ul><li><p>实现起来比较复杂，且付出代价较大。因为不可抢占资源中途被释放，会导致之前的执行的任务失效，即使采取防范措施，也会事进程前后两次运行信息不连续；</p></li><li><p>可能使进程不断被推迟。增加系统开销，降低系统吞吐量。</p></li></ul></blockquote><h4 id="c-破坏“循环等待”条件"><a href="#c-破坏“循环等待”条件" class="headerlink" title="c. 破坏“循环等待”条件"></a>c. 破坏“循环等待”条件</h4><p> 能保证“循环等待”不成立的方法是，对系统的所有资源类型进行线性排序，并赋予它们不同的序号。然后再添加以下规定：</p><p>每个进程必须按顺序递增的顺序请求资源。</p><blockquote><p>如果一个进程需要申请多种资源，则请求需按顺序排序，然后一起申请。</p><p>如果一个进程需要申请较低序号资源，但已占用较高序号资源，则必须限时房所有具有相同和更高序号的资源，然后进行申请。</p></blockquote><p>这种策略，需要合理规定资源的序号。由于一般进程都是先输入程序和数据，然后运算，最后输出。所以一般会规定输入设备较低，输出设备较高。</p><blockquote><p>特点：</p><ul><li>资源利用率、系统吞吐量相比前两种都有提高。</li><li>资源的序号必须相对稳定，因此限制了资源的增加，即新设备的增加。</li><li>对顺序的限制太大。如果进程运行顺序不符合设计条件，则会造成资源的浪费。</li><li>为了方便用户，系统应该尽量少的限制用户在编程时的操作性。但是这种请求资源顺序的规定，对用户进行简单、自主的编程限制很大。</li></ul></blockquote><h2 id="6-死锁的避免"><a href="#6-死锁的避免" class="headerlink" title="6. 死锁的避免"></a>6. 死锁的避免</h2><p>死锁避免同样输入事先预防策略，但不需要通过实现采取某种限制措施来破坏产生死锁的必要条件，而是在内存分配过程中，防止系统进入不安全的状态，以避免死锁。</p><blockquote><p>此方法是假的限制条件较弱，可能会获得较好的系统性能，因此目前常用此方法来避免死锁。</p></blockquote><h3 id="6-1-系统安全状态"><a href="#6-1-系统安全状态" class="headerlink" title="6.1 系统安全状态"></a>6.1 系统安全状态</h3><p>避免死锁方法中，吧系统状态分为安全状态与不安全状态两种。系统处于安全状态可避免死锁。</p><h4 id="6-1-1-安全状态"><a href="#6-1-1-安全状态" class="headerlink" title="6.1.1 安全状态"></a>6.1.1 安全状态</h4><p>避免死锁方法中，允许进程动态地申请自愿，但系统在进行资源分配之前，应县计算此次资源分配的安全性。分配不会导致系统进入不安全状态，就分配。否则就零进程等待。</p><p><mark style="background-color:#9767F8;border-radius:5px;padding:5px">定义</mark>：系统能按照某种进程推进顺序，为每个进程分配其所需的资源，址址满足每个进程对资源的最大需求，进而是每个进程都能顺利完成的一种系统状态。此推进序列为安全序列。如果系统不能找到这样一种安全状态，则称系统为不安全状态。</p><blockquote><p>不安全状态不一定会导致死锁。安全状态一定不会导致死锁。</p></blockquote><table style="text-align:center;">    <tbody><tr>        <th>进程</th>        <th>最大需求</th>        <th>已分配</th>        <th>可用</th>    </tr>    <tr>        <td>P1</td>        <td>10</td>        <td>5</td>        <td rowspan="3" style="vertical-align:middle">3</td>    </tr>    <tr>                <td>P2</td>        <td>4</td>        <td>2</td>    </tr>    <tr>        <td>P3</td>        <td>9</td>        <td>2</td>    </tr></tbody></table><p>假定系统中有三个进程，P1，P2，P3，共有12台磁带机，进程P1共需要用10台磁带机，金策换那个P2和P3分别要用4和9台。某时刻t0，进程P1，P2，P3已分别获得5，2，2台。上有三台为空闲。</p><blockquote><p>经分析的，在t0时刻系统是安全的。因为这是存在一个安全序列（P2，P1，P3），只要按此序列分配资源，就能使进程顺利完成。步骤如下：</p><ol><li>从剩余三台中取两台给P2，使其完成。空闲为5台。</li><li>将5台分给P1，使其完成。空闲为10台。</li><li>将10台分给P3，使其完成。任务全部完成。</li></ol><p>即安全序列为（P2，P1，P3）。<mark style="border-radius:5px;padding:5px">只分存在于不存在，唯一性是不确定的。</mark></p></blockquote><p>一个系统开始时是处于安全状态的，当有进程请求一个可用资源时，系统需对该进程的请求进行计算，若将资源分配给进程后系统仍处于安全状态，则将资源分配给此进程。</p><h4 id="6-1-2-银行家算法"><a href="#6-1-2-银行家算法" class="headerlink" title="6.1.2 银行家算法"></a>6.1.2 银行家算法</h4><hr><h5 id="6-1-2-1-银行家算法中的数据结构"><a href="#6-1-2-1-银行家算法中的数据结构" class="headerlink" title="6.1.2.1 银行家算法中的数据结构"></a>6.1.2.1 银行家算法中的数据结构</h5><ul><li>可利用资源向量Available，含有m个元素的数组，其中的每个元素代表一类可利用的资源数目，其初值是系统中配置的该类全部可用资源的数目，该数目会随对应资源的分配和回收而动态改变。如果Available[i]=K,则表示系统中现有R<sub>j</sub> 类资源K个。</li><li>最大需求量矩阵Max。一个n*m的矩阵，定义了系统中n个进程中的每个进程对m类资源的最大需求。如果Max[i，j]=K，则表示进程i需要R<sub>j</sub> 类资源的最大数目为K。</li><li>分配矩阵Allocation </li></ul><h2 id="7-死锁的检测与解除"><a href="#7-死锁的检测与解除" class="headerlink" title="7. 死锁的检测与解除"></a>7. 死锁的检测与解除</h2><h3 id="7-1-死锁的检测"><a href="#7-1-死锁的检测" class="headerlink" title="7.1 死锁的检测"></a>7.1 死锁的检测</h3><p>为了保证死锁是可检测的，系统中必须：</p><ul><li>保存有关资源的请求和分配信息。</li><li>嵌入一种算法，是能够利用这些信息来检测系统是否出现死锁。</li></ul><h4 id="7-1-1-死锁原理"><a href="#7-1-1-死锁原理" class="headerlink" title="7.1.1 死锁原理"></a>7.1.1 死锁原理</h4><p>通过以下步骤可确定系统是否处于死锁状态：</p><ul><li>首先在资源分配表中找到一个既不阻塞又非独立的进程节点P<sub>i</sub> 。P<sub>i</sub> 在顺利情况下可获取所需资源而继续运行，直至运行完毕在释放其所占资源。然后消除其请求边与分配边。</li><li>然后重复上步操作。分离其他所有可分离的节点。</li><li>如果能够消去图中所有边，即使所有进程都成为孤立的进程节点，则称该图是可完全简化的；若不能使该图完全简化，则称该图为不可完全简化的。</li></ul><p>如果有进程节点无法简化，则所有的简化顺序都将获得相同的不可简化图。即：</p><blockquote><p>当且仅当S状态的资源分配图是不可完全简化的，则此进程图的状态为死锁状态。</p></blockquote><h3 id="7-2-死锁的解除"><a href="#7-2-死锁的解除" class="headerlink" title="7.2 死锁的解除"></a>7.2 死锁的解除</h3><h4 id="7-2-1-终止死锁进程的方法"><a href="#7-2-1-终止死锁进程的方法" class="headerlink" title="7.2.1 终止死锁进程的方法"></a>7.2.1 终止死锁进程的方法</h4><ul><li><p>终止所有死锁进程</p></li><li><p>逐个终止死锁进程</p><p>按照某种顺序逐个地终止死锁进程，直至有足够的资源来打破循环等待，吧系统从死锁状态中解脱出来。</p></li></ul><h4 id="7-2-2-付出代价最小的死锁解除算法"><a href="#7-2-2-付出代价最小的死锁解除算法" class="headerlink" title="7.2.2 付出代价最小的死锁解除算法"></a>7.2.2 付出代价最小的死锁解除算法</h4>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 死锁 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）处理机调度</title>
      <link href="/2021/10/30/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6/"/>
      <url>/2021/10/30/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode运行乱码</title>
      <link href="/2021/10/29/vscode%E8%BF%90%E8%A1%8C%E4%B9%B1%E7%A0%81/"/>
      <url>/2021/10/29/vscode%E8%BF%90%E8%A1%8C%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>一般人都能看出来是因为编码问题。但是因为个人使用软件的过程以及其他原因。造成问题的原因有很多。所以解决不了很正常。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>先说下vscode运行编写代码的原理。用vscode的人都应该知道，vscode 只是一个文本编辑器，如果没有那些拓展，他就是一个好看的记事本。除此之外，以python为例，如果计算机上没有安装python，也是没办法运行python代码的。</p><p>然后先反问下，正在看文章的你是否了解通过命令行运行代码。</p><p>比如如果计算机以安装python，那么在命令行输入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python 123.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后回车也是可以运行此文件的。</p><p>所以拓展的作用，这里就指<code>.Run</code>拓展吧。运行你刚刚编写完的文件，就相当于在命令行输入以上代码。</p><p>现在再说问题。乱码就是代码文件与系统的编码有一个出了问题。<del>毕竟操作系统发展的关键时期我们中国人没怎么参与，所以就对我们汉字不太友好。</del></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决问题就是 首先找到vscode的<code>setting.json</code>文件，然后找到<code>.Run</code> 的设置代码。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/error/image-20211029230324730.png" style="border-radius:15px;text-align:center;width:80%" alt="image-20211029230324730"><p>然后找到<code>cpp</code>、或者<code>c</code>或<code>JavaScript</code> 找到对应的项。</p><p>如果是<code>Java</code> 修改为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"java": "cd $dir &amp;&amp; javac -encoding utf-8 $fileName &amp;&amp; java $fileNameWithoutExt"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是<code>C</code>或 <code>C++</code> ，则修改为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"c": "cd $dir &amp;&amp;  CHCP 65001 &amp;&amp;  gcc  $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt","cpp": "cd $dir &amp;&amp;  CHCP 65001 &amp;&amp;  g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的语句，以<code>&amp;&amp;</code> 分割，每一部分都是一次执行的命令。然后这里就是在切换完路径之后执行<code>CHCP 65001</code> 命令。然后再调用对应的编译器去编译、执行代码。</p><p>over！</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 乱码，C语言乱码 </tag>
            
            <tag> Java乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法</title>
      <link href="/2021/10/29/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2021/10/29/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="题目如下："><a href="#题目如下：" class="headerlink" title="题目如下："></a>题目如下：</h2><blockquote><p>一个小孩练习爬台阶，一共10级台阶，小孩可以一次向上选择爬1 - 3级。但是第3级和第6级台阶被施加了魔法，小孩一旦踏上就会停下来就开始跳《新宝岛》。那么，不让小孩跳《新宝岛》的爬法一共有多少种？</p></blockquote><p>emm，很是B站up主的风格。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>先看代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void ret(int *x, int step){    //第一个参数为成功的记录数，第二个参数为当前处于第几阶阶梯。    if (step == 10)    {        //到达第十阶记录加一，然后结束递归。        (*x)++;        return;    }    if (step == 3 || step == 6)    {        //如果跳珍宝岛就什么都不执行，然后结束递归。    return;    }    else if (step &lt; 10)    {        // 条件允许继续往上走。先递归一次走一阶的。如果返回就递归走两阶的。然后第三阶。        ret(x, step + 1);        ret(x, step + 2);        ret(x, step + 3);    }    else    {        //其他情况就直接返回.        return;    }}int main(){    int *n = NULL;    //用来存放已经成功的次数。用指针，传递比较方便。    int x = 0;    //成功的次数。指针指向的数。    n = &amp;x;    ret(n, 0);    printf("%d", x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后输出  <code>42</code></p><p>然后再说递归。</p><p>第一次接触时是大一的斐波那契数列。不过当时看着就头大，也不怎么理解。但是看到这道题想了一会这算法就跳出来了。</p><p>递归算法，我的理解就是分层解决问题。尤其是这种，一步一步往下深入，并且每一步往下分叉情况一样或非常类似的情况。</p><p>比如这道题。当准备迈出第一步时有三种情况，一步、两步、三步（先不考虑被禁止的），然后第二次迈时，也同样是三种情况。所以，递归的情况就有三种，而这里每次的三种情况都要递归。随意函数里是依次进行的。</p><p>然后说下原理：</p><p>假设第一条路已执行至第十阶。步程为：1 1 2 1 2 1 1 1。</p><p>但是递归的第一种可能性应该是：1 1 1 1 1 1 1 1 1 1。</p><p>然后不管这些，我们先从头看，</p><p>​    第一步，<code>1</code>  step为<code>1</code>,继续深入，此时，step加一，x是指针，所以直接往下传。对于此时函数体内的一切内容，系统是保存在栈中的。</p><p>​    第二步，<code>1</code>  step为<code>2</code>,再深入，同上。</p><p>​    第三步，<code>1</code>  step为<code>3</code>，此时ret函数内判断不成立，然后返回。</p><blockquote><p>这时，在栈中第二步的数据被唤醒，替换第三步的数据。即开始执行第二步中的<code>ret(x,step+2)</code> ,此时，step为2</p></blockquote><p>​    …</p><p>​    后续类似。</p><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>第一、递归必须有满足条件结束的语句。</p><p>第二、递归的次数不能太多，否则容易造成栈溢出（程序会被终止）。</p><p>第三、递归相对于其他算法可大大提升效率。如果能用，就用递归。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 递归算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）线性表</title>
      <link href="/2021/10/29/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2021/10/29/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="0-0-初识"><a href="#0-0-初识" class="headerlink" title="0.0 初识"></a>0.0 初识</h3><p>为了表示每个数据元素与其直接后继数据元素之间的逻辑关系，每个数据元素除了自身的信息以外，还需要存储一个指示其直接后继的信息（后继节点的存储位置）。这两部分信息组成数据元素的存储映像——<mark>节点</mark>。</p><p>其中存储元素<code>数据信息</code>的域: <mark>数据域</mark>；存储<code>直接后继</code> 存储位置 的域: <mark>指针域</mark>。<code>n</code>个节点<code>链结</code>成一个链表，为线性表的链式存储结构。</p><h3 id="0-1操作习惯"><a href="#0-1操作习惯" class="headerlink" title="0.1操作习惯"></a>0.1操作习惯</h3><ul><li><p>整个链表的存取必须从<mark>头指针</mark>开始进行。<code>头指针</code>: 链表中第一个节点的存储位置。</p></li><li><p>单链表的头元素为单独的一个元素。其数据信息可以什么都不存储，或 保存整个链表的部分信息，</p><blockquote><p>​        如链表长度；或节点个数。</p></blockquote></li><li><p>要取得第<code>i</code> 个数据元素，必须从头指针出发顺链进行寻找。</p><blockquote><p>​        因单链表中，任何两个元素的存储位置之间没有固定的联系。每个元素的存储位置都保存在其直接前驱节点的信息里。</p></blockquote></li></ul><h3 id="1-顺序表"><a href="#1-顺序表" class="headerlink" title="1. 顺序表"></a>1. 顺序表</h3><p>声明一个结构体。结构体内包含一个数组与一个<code>int</code> 型记录数组长度。然后自动初始化，再根据提示进行查找，删除，插入操作。</p><h4 id="1-1-声明区"><a href="#1-1-声明区" class="headerlink" title="1.1 声明区"></a>1.1 声明区</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;malloc.h&gt;#define maxsize 20//字符串的最大长度#define OK 1//操作OK时返回OK#define error -1//操作不OK时返回errortypedef struct Lnode {int *elem;int length;}Lnode;//定义结构体 Lnodevoid list_init(Lnode* l);//数组初始化,给数组的每一项赋值。void list_print(Lnode*l);//把整个数组打印出来,打印格式为: elem [index]: value。int list_find(Lnode* l, int value);//根据 value ，返回这个值的序列或 -1 。int list_insert(Lnode* l,int value,int index );//在数组末尾插入 value，超出最大范围返回-1。int list_delete(Lnode *l, int index); //删除传入序列对应的值。//函数预声明。避免顺序问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-主函数"><a href="#1-2-主函数" class="headerlink" title="1.2 主函数"></a>1.2 主函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int main() {Lnode *ln = (Lnode*)malloc(sizeof(Lnode));list_init(ln);//初始化list_print(ln);printf("\n请输入要查找的值,将会输出他的序列:\n");int value;scanf("%d", &amp;value);//查找int term=list_find(ln, value) ;if (term&lt; 0)printf("查找的值不存在");else {printf("所查找的值的序列为%d\n", term);}//删除list_print(ln);int index;printf("\n请输入删除的序列:\n");scanf("%d", &amp;index);printf(((list_delete(ln, index)==OK)?"删除成功":"删除失败"));printf("\n删除后数组:");list_print(ln);//插入printf("\n输入将要插入的值与序列，之间以空格隔开:\n");value = NULL;index = NULL;scanf("%d %d", &amp;value,&amp;index);printf(((list_insert(ln,value,index-1)==OK)?"插入成功":"插入失败"));printf("\n插入后数组为:\n");list_print(ln);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-初始化函数"><a href="#1-3-初始化函数" class="headerlink" title="1.3 初始化函数"></a>1.3 初始化函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">void list_init(Lnode* l) {//根据传入的指针，初始化此结构体内数组；l-&gt;elem = (int*)malloc(sizeof(int[maxsize]));if (!l-&gt;elem) exit(0);l-&gt;length = 0;for (int i = 0; i &lt; maxsize; i++){(l-&gt;elem)[i] = i * 2;l-&gt;length++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4输出函数"><a href="#1-4输出函数" class="headerlink" title="1.4输出函数"></a>1.4输出函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">void list_print(Lnode*l) {    //格式:每五个换行    //   elem[0  ]:0for (int i = 0; i &lt; l-&gt;length; i++){if (i % 5 == 0)printf("\n");printf("elem[%-3d]:%-3d  ",i, l-&gt;elem[i]);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-查找"><a href="#1-5-查找" class="headerlink" title="1.5 查找"></a>1.5 查找</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int list_find(Lnode* l,int value) {//传入值value，输出序列至x；for (int i = 0; i &lt; l-&gt;length; i++){if (l-&gt;elem[i] == value) {return i;}}return error;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-插入"><a href="#1-6-插入" class="headerlink" title="1.6 插入"></a>1.6 插入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int list_insert(Lnode* l,int value,int index ) {    //刚满,或不足,或序列不合规返回error。if (l-&gt;length == maxsize||index&gt;maxsize||index&lt;0) {return error;}else {l-&gt;length++;for (int i = l-&gt;length;  i &gt; index;  i--){l-&gt;elem[i] = l-&gt;elem[i - 1];l-&gt;elem[index] = value;}l-&gt;elem[l-&gt;length-1] = value;return OK;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-7-删除"><a href="#1-7-删除" class="headerlink" title="1.7 删除"></a>1.7 删除</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int list_delete(Lnode *l, int index) {if (index&lt;0 || index&gt;maxsize - 2) {return error;}else{for (int j = index; j &lt; l-&gt;length - 1; j++){l-&gt;elem[j] = l-&gt;elem[j + 1];}l-&gt;length--;return OK;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2. 单链表"></a>2. 单链表</h3><ul><li>代码</li></ul><p>查找不想写了，在顺序表中有。</p><h4 id="2-1-声明"><a href="#2-1-声明" class="headerlink" title="2.1 声明"></a>2.1 声明</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;malloc.h&gt; typedef struct TEST {int num;struct TEST *next;} TEST;int init(TEST * head);int create(TEST * head, int n);int deleteEle(TEST *head, int pos); int destroy(TEST* head);void connect(TEST* a, TEST* b);int insertEle(TEST* head, int pos, int value);void printNode(TEST* head);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-main函数"><a href="#2-2-main函数" class="headerlink" title="2.2 main函数"></a>2.2 main函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int main() {TEST * head = NULL;//链表头int n=0;int pos=1;if (init(&amp;head) == 0) {printf("创建失败");return 0;}    else{    printf("请输入链表节点数:\n");scanf_s("%d", &amp;n);    if (create(&amp;head, n) == 0) {printf("添加数据失败");return 0;}    }printNode(head);//输出printf("\n\n再添加一个\n");    //插入printf("请输入插入位置（0~%d之间）:\n",head-&gt;num+2);scanf_s("%d", &amp;pos);if (pos&lt;1 || pos&gt;head-&gt;num + 2) {printf("输入有误,将跳过插入操作。");}else {int value = 0;printf("输入插入的值(别输太大)：\n");scanf_s("%d", &amp;value);insertEle(&amp;head, pos, value);}printNode(head);//输出pos = 0;    //删除printf("输入要删除的索引号(1~%d):\n", head-&gt;num);scanf_s("%d", &amp;pos);if (pos&lt;1 || pos&gt;head-&gt;num) {printf("输的什么鬼！，直接跳过删除。");}else {deleteEle(&amp;head, pos);//删除一个元素printf("\n删除一个数据后:\n");}printNode(head);//输出}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int init(TEST * head) {//加个链表头。head-&gt;next = NULL;head-&gt;num = 0;if (head == NULL) {return 0;}else {return 1;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-创建"><a href="#2-4-创建" class="headerlink" title="2.4 创建"></a>2.4 创建</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int create(TEST * head, int n) {//链表添加数据，共 n 个TEST *q;TEST* p;head-&gt;num = n;q = head;for (int i = 1; i &lt;= n; i++) {p = (struct TEST*)malloc(sizeof(TEST));p-&gt;num = i;p-&gt;next = NULL;q-&gt;next = p;q = p;}if ((head)-&gt;num != n) {return 0;}else {return 1;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-打印输出"><a href="#2-5-打印输出" class="headerlink" title="2.5 打印输出"></a>2.5 打印输出</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">void printNode(TEST* head) {//遍历输出打印.if (head-&gt;num == 0) {printf("\n\n一个空链表。没啥输出的。\n");return;}else {int j = 0;for (TEST* i = head-&gt;next; j &lt; head-&gt;num; i = i-&gt;next) {if (i != NULL) {printf("%d ", i-&gt;num);j++;}else {break;}}printf("\n");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-插入"><a href="#2-6-插入" class="headerlink" title="2.6 插入"></a>2.6 插入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int insertEle(TEST* head, int pos, int value) {TEST* q = head;TEST* p = q-&gt;next;if (pos &lt;= ((head)-&gt;num + 1) &amp;&amp; pos &gt; 0) {pos--;while (pos != 0 &amp;&amp; p != NULL) {q = p;p = q-&gt;next;pos--;}//找位置q-&gt;next = (TEST*)malloc(sizeof(struct TEST));q-&gt;next-&gt;next = p;q-&gt;next-&gt;num = value;(head)-&gt;num++;//插数据。return 1;}else {return 0;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-删除"><a href="#2-7-删除" class="headerlink" title="2.7 删除"></a>2.7 删除</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int deleteEle(TEST *head, int pos) {//删除指定的项.TEST* p;TEST* q;q = head;p = q-&gt;next;if (pos == 1) {head-&gt;next = p-&gt;next;free(p);head-&gt;num--;return 1;}else if (pos &gt; head-&gt;num) {printf("输入序列超出索引。");return 0;}else {do{q = p;p = q-&gt;next;pos--;} while (p != NULL &amp;&amp; pos != 1);if (pos == 1){q-&gt;next = p-&gt;next;head-&gt;num--;free(p);return 1;}else {printf("链表出现问题!");return 0;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-销毁"><a href="#2-8-销毁" class="headerlink" title="2.8 销毁"></a>2.8 销毁</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">int destroy(TEST* head) {//全部销毁TEST* p = (head)-&gt;next;TEST* q = NULL;if (p == NULL) {free(head);head = NULL;return 1;}else {do {q = p;p = q-&gt;next;free(q);(head)-&gt;num--;} while (p != NULL);return 1;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-9-链表连接"><a href="#2-9-链表连接" class="headerlink" title="2.9 链表连接"></a>2.9 链表连接</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">void connect(TEST* a, TEST* b) {// 把b接在a后边。TEST*  q,*p;p = a;while(p-&gt;next){p = p-&gt;next;}p-&gt;next = b-&gt;next;a-&gt;num += b-&gt;num;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-双向链表…"><a href="#3-双向链表…" class="headerlink" title="3. 双向链表…"></a>3. 双向链表…</h3><p>….</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（补充中）名词缩写</title>
      <link href="/2021/10/26/%EF%BC%88%E8%A1%A5%E5%85%85%E4%B8%AD%EF%BC%89%E7%BD%91%E7%BB%9C&amp;%E8%BD%AF%E4%BB%B6%E7%BC%A9%E5%86%99/"/>
      <url>/2021/10/26/%EF%BC%88%E8%A1%A5%E5%85%85%E4%B8%AD%EF%BC%89%E7%BD%91%E7%BB%9C&amp;%E8%BD%AF%E4%BB%B6%E7%BC%A9%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="1-硬件"><a href="#1-硬件" class="headerlink" title="1. 硬件"></a>1. 硬件</h2><table><thead><tr><th align="left">缩写</th><th align="left">全称</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">CPU</td><td align="left">central processing unit</td><td align="left"><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/284033?fr=aladdin">中央处理器</a></td></tr><tr><td align="left">HDMI</td><td align="left">High Definition Multimedia Interface</td><td align="left"><a href="https://baike.baidu.com/item/HDMI">高清多媒体接口</a></td></tr><tr><td align="left">USB</td><td align="left">Universal Serial Bus</td><td align="left"><a href="https://baike.baidu.com/item/USB?fromtitle=%E9%80%9A%E7%94%A8%E4%B8%B2%E8%A1%8C%E6%80%BB%E7%BA%BF&amp;fromid=8635470">通用串行总线</a></td></tr><tr><td align="left">GPU</td><td align="left">Graphics Processing Unit</td><td align="left"><a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86%E5%99%A8">图形处理器</a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="2-软件"><a href="#2-软件" class="headerlink" title="2. 软件"></a>2. 软件</h2><table><thead><tr><th align="left">缩写</th><th align="left">全称</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">API</td><td align="left">Application Programming Interface</td><td align="left"><a href="https://baike.baidu.com/item/api/10154">应用程序编程接口</a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="3-计算机网络"><a href="#3-计算机网络" class="headerlink" title="3. 计算机网络"></a>3. 计算机网络</h2><table><thead><tr><th align="left">缩写</th><th align="left">全称</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">HTTP</td><td align="left">Hyper Text Transfer Protocol</td><td align="left"><a href="https://baike.baidu.com/item/HTTP">超文本传输协议</a></td></tr><tr><td align="left">HTTPS</td><td align="left">Hyper Text Transfer Protocol over SecureSocket Layer</td><td align="left"><a href="https://baike.baidu.com/item/HTTPS/285356?fr=aladdin">超文本传输安全协议</a></td></tr><tr><td align="left">IP</td><td align="left">Internet Protocol</td><td align="left"><a href="https://baike.baidu.com/item/IP/224599">网际互连协议</a></td></tr><tr><td align="left">TCP</td><td align="left">Transmission Control Protocol</td><td align="left"><a href="https://baike.baidu.com/item/TCP/33012">传输控制协议</a></td></tr><tr><td align="left">UDP</td><td align="left">User Datagram Protocol</td><td align="left"><a href="https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE">用户数据报协议</a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="5-操作系统"><a href="#5-操作系统" class="headerlink" title="5. 操作系统"></a>5. 操作系统</h2><table><thead><tr><th align="left">缩写</th><th align="left">全称</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left">OS</td><td align="left">Operating System</td><td align="left"><a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192?fr=aladdin">操作系统</a></td></tr><tr><td align="left">PCB</td><td align="left">Process Control Block</td><td align="left"><a href="https://baike.baidu.com/item/PCB/16067368">进程管理块</a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="4-Web"><a href="#4-Web" class="headerlink" title="4. Web"></a>4. Web</h2><table><thead><tr><th align="left">缩写</th><th align="left">全称</th><th align="left">中文释义</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">SEM</td><td align="left">Search Engine Marketing</td><td align="left"><a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%90%A5%E9%94%80/9387327?fromtitle=sem&amp;fromid=2554866">搜索引擎营销</a></td></tr><tr><td align="left">SEO</td><td align="left">Search Engine Optimization</td><td align="left"><a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132?fromtitle=SEO&amp;fromid=102990">搜索引擎优化</a></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络-缩写 </tag>
            
            <tag> 软件-缩写 </tag>
            
            <tag> 语言-缩写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言寻址方式</title>
      <link href="/2021/10/22/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/10/22/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>指令寻址方式可分为两种大类。一顺序寻址，二跳跃寻址。</p><p>可从字面意义读出，顺序寻址即依次寻址，当代码执行时，所执行代码的变换即为这种（没有函数调用与跳转的情况）。跳跃寻址很容易理解，即按所需要的情况，直接到指定地址队数据进行读取与修改。这种情况也最为常见。</p><blockquote><p>一般来说顺序寻址多为计算机本身的运行，而跳跃寻址为人为的为了达到某个目的而使用。</p></blockquote><p>以下对跳跃寻址进行分类，总结。</p><p>跳跃寻址又可分为数据寻址与转移地址寻址两大类。</p><div text-align:left;margin:0="" 0;=""><svg xmlns:ev="http://www.w3.org/2001/xml-events" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="917" height="539" viewBox="0 0 917 539"><defs></defs><g id="page1" transform="translate(5.5,5.5)"><rect width="907" fill="#ffffff" x="0" height="529" y="0"></rect><g id="group1"><path d="M.0,.0L907.1,.0L907.1,529.1L.0,529.1L.0,.0z" id="shape2" fill="#fbf9f7" fill-rule="nonzero"></path><path d="M.0,.0L.0,49.2L153.0,117.3L68.0,.0L.0,.0z" id="shape3" fill="#e0d9bd" fill-opacity="0.21" fill-rule="nonzero" transform="translate(1.77,0.00)"></path><path d="M.0,.0L284.9,46.4L57.1,80.2L.0,.0z" id="shape4" fill="#c7c7af" fill-opacity="0.21" fill-rule="nonzero" transform="translate(97.72,37.11)"></path><path d="M.0,.0L304.8,.0L170.0,60.2L27.9,37.1L.0,.0z" id="shape5" fill="#d6c5a0" fill-opacity="0.21" fill-rule="nonzero" transform="translate(69.78,-0.00)"></path><path d="M.0,60.2L281.8,106.3L312.1,.0L134.8,.0L.0,60.2z" id="shape6" fill="#e0d9bd" fill-opacity="0.21" fill-rule="nonzero" transform="translate(239.81,0.00)"></path><path d="M.0,106.3L64.4,117.3L30.4,.0L.0,106.3z" id="shape7" fill="#d6c5a0" fill-opacity="0.21" fill-rule="nonzero" transform="translate(521.58,0.00)"></path><path d="M19.4,64.5L354.6,1.3L.0,.0L19.4,64.5z" id="shape8" fill="#d3c29b" fill-opacity="0.21" fill-rule="nonzero" transform="translate(551.94,0.67)"></path><path d="M136.8,.0L235.6,54.5L14.6,77.6L.0,25.4L136.8,.0z" id="shape9" fill="#c7c7af" fill-opacity="0.21" fill-rule="nonzero" transform="translate(571.37,39.76)"></path><path d="M.0,36.1L202.8,.0L202.8,142.4L100.8,92.3L.0,36.1z" id="shape10" fill="#f0e9db" fill-opacity="0.52" fill-rule="nonzero" transform="translate(703.75,2.01)"></path><path d="M.0,.0L94.8,151.4L99.6,153.2L99.6,50.1L.0,.0z" id="shape11" fill="#d6c5a0" fill-opacity="0.21" fill-rule="nonzero" transform="translate(806.99,94.27)"></path><path d="M20.2,.0L25.0,1.8L25.0,144.3L.0,158.1L20.2,.0z" id="shape12" fill="#f0e9db" fill-opacity="0.18" fill-rule="nonzero" transform="translate(881.53,246.33)"></path><path d="M9.0,13.8L34.0,.0L34.0,138.5L.0,76.3L9.0,13.8z" id="shape13" fill="#d6c5a0" fill-opacity="0.14" fill-rule="nonzero" transform="translate(872.57,390.61)"></path><path d="M147.4,53.2L64.8,.0L.0,44.5L147.4,53.2z" id="shape14" fill="#c7c7af" fill-opacity="0.14" fill-rule="nonzero" transform="translate(725.16,413.81)"></path><path d="M115.8,.0L149.8,62.2L.0,62.0L115.8,.0z" id="shape15" fill="#c7c7af" fill-opacity="0.14" fill-rule="nonzero" transform="translate(756.74,466.96)"></path><path d="M115.8,5.5L20.5,.0L.0,67.7L115.8,5.5z" id="shape16" fill="#d6c5a0" fill-opacity="0.14" fill-rule="nonzero" transform="translate(756.28,461.44)"></path><path d="M120.7,.0L172.3,3.1L151.8,70.8L.0,70.8L78.6,26.3L120.7,.0z" id="shape17" fill="#f0e9db" fill-opacity="0.14" fill-rule="nonzero" transform="translate(604.47,458.31)"></path><path d="M165.9,47.5L.0,.0L91.8,90.6L165.9,47.5z" id="shape18" fill="#c7c7af" fill-opacity="0.14" fill-rule="nonzero" transform="translate(517.18,438.50)"></path><path d="M246.4,73.9L57.4,73.9L.0,.0L200.8,28.4L246.4,73.9z" id="shape19" fill="#d3c29b" fill-opacity="0.14" fill-rule="nonzero" transform="translate(362.63,455.26)"></path><path d="M215.7,96.9L170.5,50.9L.0,.0L15.9,68.9L215.7,96.9z" id="shape20" fill="#e0d9bd" fill-opacity="0.14" fill-rule="nonzero" transform="translate(346.69,386.73)"></path><path d="M1.8,162.3L.0,.0L150.5,238.8L1.8,162.3z" id="shape21" fill="#d3c29b" fill-opacity="0.14" fill-rule="nonzero" transform="translate(-0.00,271.57)"></path><path d="M.0,.0L.0,95.3L238.3,95.3L148.8,76.5L.0,.0z" id="shape22" fill="#ebe3d1" fill-opacity="0.14" fill-rule="nonzero" transform="translate(1.77,433.86)"></path><path d="M60.5,106.6L105.3,.0L.0,8.2L60.5,106.6z" id="shape23" fill="#c7c7af" fill-opacity="0.14" fill-rule="nonzero" transform="translate(88.56,403.78)"></path><path d="M.0,107.8L92.6,126.6L153.3,73.3L46.3,.0L.0,107.8z" id="shape24" fill="#f0e9db" fill-opacity="0.14" fill-rule="nonzero" transform="translate(149.03,402.52)"></path><path d="M105.5,89.1L149.8,.0L.0,15.8L105.5,89.1z" id="shape25" fill="#d3c29b" fill-opacity="0.14" fill-rule="nonzero" transform="translate(196.85,386.73)"></path><path d="M.0,89.1L60.0,67.8L44.3,.0L.0,89.1z" id="shape26" fill="#c7c7af" fill-opacity="0.14" fill-rule="nonzero" transform="translate(302.36,386.73)"></path><path d="M60.7,21.3L.0,74.6L178.4,74.6L120.7,.0L60.7,21.3z" id="shape27" fill="#e0d3b7" fill-opacity="0.14" fill-rule="nonzero" transform="translate(241.64,454.55)"></path><g id="group28" transform="matrix(-1.00,0.00,0.00,-1.00,35.8,283.4)"><path d="M20.2,.0L25.0,1.8L25.0,144.3L.0,158.1L20.2,.0z" id="shape29" fill="#f0e9db" fill-opacity="0.18" fill-rule="nonzero" transform="translate(8.96,0.00)"></path><path d="M9.0,13.8L34.0,.0L34.0,138.5L.0,76.3L9.0,13.8z" id="shape30" fill="#d6c5a0" fill-opacity="0.14" fill-rule="nonzero" transform="translate(0.00,144.29)"></path></g></g><path d="M-13.4,18.6C8.4,-11.7,24.5,-51.8,66.8,-51.8" stroke-width="2" stroke-linecap="round" id="shape31" fill="none" stroke="#303030" transform="translate(175.92,212.27)"></path><path d="M-12.5,-18.2L-0.3,-18.2C1.4,-18.2,2.7,-16.9,2.7,-15.2L2.7,9.2C2.7,10.9,2.5,13.4,3.4,15.1C4.5,17.0,6.4,18.2,8.7,18.2L12.5,18.2" stroke-linecap="round" id="shape32" fill="none" stroke="#303030" transform="translate(501.11,215.25)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape33" fill="none" stroke="#303030" transform="translate(675.96,233.50)"></path><path d="M-20.2,-36.7C3.3,4.6,13.9,70.0,66.8,70.0" stroke-width="2" stroke-linecap="round" id="shape34" fill="none" stroke="#303030" transform="translate(175.92,334.00)"></path><path d="M-12.5,54.8L-0.3,54.8C1.4,54.8,2.7,53.4,2.7,51.8L2.7,-45.8C2.7,-47.4,2.5,-49.9,3.4,-51.6C4.5,-53.5,6.4,-54.8,8.7,-54.8L12.5,-54.8" stroke-linecap="round" id="shape35" fill="none" stroke="#303030" transform="translate(380.65,105.75)"></path><path d="M-12.5,36.5L-0.3,36.5C1.4,36.5,2.7,35.2,2.7,33.5L2.7,-27.5C2.7,-29.2,2.5,-31.6,3.4,-33.4C4.5,-35.2,6.4,-36.5,8.7,-36.5L12.5,-36.5" stroke-linecap="round" id="shape36" fill="none" stroke="#303030" transform="translate(380.65,124.00)"></path><path d="M-12.5,-18.3L-0.3,-18.3C1.4,-18.3,2.7,-16.9,2.7,-15.3L2.7,9.3C2.7,10.9,2.5,13.4,3.4,15.1C4.5,17.0,6.4,18.3,8.7,18.3L12.5,18.3" stroke-linecap="round" id="shape37" fill="none" stroke="#303030" transform="translate(380.65,178.75)"></path><path d="M-12.5,36.5L-0.3,36.5C1.4,36.5,2.7,35.2,2.7,33.5L2.7,-27.5C2.7,-29.2,2.5,-31.6,3.4,-33.4C4.5,-35.2,6.4,-36.5,8.7,-36.5L12.5,-36.5" stroke-linecap="round" id="shape38" fill="none" stroke="#303030" transform="translate(501.11,160.50)"></path><path d="M-12.5,18.3L-0.3,18.3C1.4,18.3,2.7,16.9,2.7,15.3L2.7,-9.3C2.7,-10.9,2.5,-13.4,3.4,-15.1C4.5,-17.0,6.4,-18.3,8.7,-18.3L12.5,-18.3" stroke-linecap="round" id="shape39" fill="none" stroke="#303030" transform="translate(501.11,178.75)"></path><path d="M-12.5,.0L2.7,.0L2.7,.0C2.7,.0,5.4,-0.0,8.7,-0.0L12.5,-0.0" stroke-linecap="round" id="shape40" fill="none" stroke="#303030" transform="translate(501.11,197.00)"></path><path d="M-12.5,-36.5L-0.3,-36.5C1.4,-36.5,2.7,-35.2,2.7,-33.5L2.7,27.5C2.7,29.2,2.5,31.6,3.4,33.4C4.5,35.2,6.4,36.5,8.7,36.5L12.5,36.5" stroke-linecap="round" id="shape41" fill="none" stroke="#303030" transform="translate(501.11,233.50)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape42" fill="none" stroke="#303030" transform="translate(555.51,51.00)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape43" fill="none" stroke="#303030" transform="translate(528.31,87.50)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape44" fill="none" stroke="#303030" transform="translate(635.16,124.00)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape45" fill="none" stroke="#303030" transform="translate(675.96,160.50)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape46" fill="none" stroke="#303030" transform="translate(662.36,197.00)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape47" fill="none" stroke="#303030" transform="translate(689.56,270.00)"></path><path d="M-12.5,27.4L-0.3,27.4C1.4,27.4,2.7,26.0,2.7,24.4L2.7,-18.4C2.7,-20.0,2.5,-22.5,3.4,-24.3C4.5,-26.1,6.4,-27.4,8.7,-27.4L12.5,-27.4" stroke-linecap="round" id="shape48" fill="none" stroke="#303030" transform="translate(417.45,376.57)"></path><path d="M-12.5,-0.1L-0.3,-0.1C1.4,-0.1,3.7,.0,5.7,.1C6.6,.1,7.6,.1,8.7,.1L12.5,.1" stroke-linecap="round" id="shape49" fill="none" stroke="#303030" transform="translate(417.45,404.02)"></path><path d="M-12.5,-18.3L-0.3,-18.3C1.4,-18.3,2.7,-17.0,2.7,-15.3L2.7,9.3C2.7,11.0,2.5,13.4,3.4,15.2C4.5,17.1,6.4,18.3,8.7,18.3L12.5,18.3" stroke-linecap="round" id="shape50" fill="none" stroke="#303030" transform="translate(417.45,422.27)"></path><path d="M-12.5,-36.6L-0.3,-36.6C1.4,-36.6,2.7,-35.2,2.7,-33.6L2.7,27.6C2.7,29.2,2.5,31.7,3.4,33.5C4.5,35.3,6.4,36.6,8.7,36.6L12.5,36.6" stroke-linecap="round" id="shape51" fill="none" stroke="#303030" transform="translate(417.45,440.52)"></path><path d="M-12.5,.0L2.7,.0L2.7,.0C2.7,-0.0,5.4,-0.0,8.7,-0.0L12.5,-0.0" stroke-linecap="round" id="shape52" fill="none" stroke="#303030" transform="translate(578.71,349.20)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape53" fill="none" stroke="#303030" transform="translate(578.71,404.10)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape54" fill="none" stroke="#303030" transform="translate(578.71,440.60)"></path><path d="M-12.5,.0L-0.3,.0C1.4,.0,3.7,.0,5.7,.0C6.6,.0,7.6,.0,8.7,.0L12.5,.0" stroke-linecap="round" id="shape55" fill="none" stroke="#303030" transform="translate(578.71,477.10)"></path><g id="shape56" transform="translate(38.37,230.85)"><path d="M4.0,.0L137.4,.0C139.6,.0,141.4,1.8,141.4,4.0L141.4,62.4C141.4,64.6,139.6,66.4,137.4,66.4L4.0,66.4C1.8,66.4,.0,64.6,.0,62.4L.0,4.0C.0,1.8,1.8,.0,4.0,.0z" stroke-width="2" fill="#3f5cb8" fill-rule="nonzero" stroke="#3f5cb8"></path><text style="fill:#ffffff;font-family:Microsoft YaHei;font-size:18.00pt;font-weight:bold" xml:space="preserve"><tspan x="24.5" y="42.8">跳跃寻址</tspan></text></g><g id="shape57" transform="translate(242.77,137.90)"><path d="M22.6,.0L102.8,.0C115.3,.0,125.4,10.1,125.4,22.6C125.4,35.1,115.3,45.2,102.8,45.2L22.6,45.2C10.1,45.2,.0,35.1,.0,22.6C.0,10.1,10.1,.0,22.6,.0z" stroke-width="2" fill="#f5f6ff" fill-rule="nonzero" stroke="#d1d8fd"></path><text style="fill:#3f5cb8;font-family:Microsoft YaHei;font-size:14.00pt;font-weight:bold" xml:space="preserve"><tspan x="27.7" y="30.2">数据寻址</tspan></text></g><g id="shape58" transform="translate(242.77,381.35)"><path d="M22.6,.0L139.6,.0C152.1,.0,162.2,10.1,162.2,22.6C162.2,35.1,152.1,45.2,139.6,45.2L22.6,45.2C10.1,45.2,.0,35.1,.0,22.6C.0,10.1,10.1,.0,22.6,.0z" stroke-width="2" fill="#f5f6ff" fill-rule="nonzero" stroke="#d1d8fd"></path><text style="fill:#3f5cb8;font-family:Microsoft YaHei;font-size:14.00pt;font-weight:bold" xml:space="preserve"><tspan x="27.7" y="30.2">转移地址寻址</tspan></text></g><g id="shape59" transform="translate(393.15,37.10)"><path d="M13.9,.0L136.0,.0C143.6,.0,149.9,6.2,149.9,13.9C149.9,21.6,143.6,27.8,136.0,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">立即（数）寻址方式</tspan></text></g><g id="shape60" transform="translate(393.15,73.60)"><path d="M13.9,.0L108.8,.0C116.4,.0,122.7,6.2,122.7,13.9C122.7,21.6,116.4,27.8,108.8,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">寄存器寻址方式</tspan></text></g><g id="shape61" transform="translate(393.15,183.10)"><path d="M13.9,.0L81.6,.0C89.2,.0,95.5,6.2,95.5,13.9C95.5,21.6,89.2,27.8,81.6,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">存储器寻址</tspan></text></g><g id="shape62" transform="translate(513.61,110.10)"><path d="M13.9,.0L95.2,.0C102.8,.0,109.1,6.2,109.1,13.9C109.1,21.6,102.8,27.8,95.2,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">直接寻址方式</tspan></text></g><g id="shape63" transform="translate(513.61,146.60)"><path d="M13.9,.0L136.0,.0C143.6,.0,149.9,6.2,149.9,13.9C149.9,21.6,143.6,27.8,136.0,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">寄存器间接寻址方式</tspan></text></g><g id="shape64" transform="translate(513.61,183.10)"><path d="M13.9,.0L122.4,.0C130.0,.0,136.3,6.2,136.3,13.9C136.3,21.6,130.0,27.8,122.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">基址变址寻址方式</tspan></text></g><g id="shape65" transform="translate(513.61,256.10)"><path d="M13.9,.0L149.6,.0C157.2,.0,163.5,6.2,163.5,13.9C163.5,21.6,157.2,27.8,149.6,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">相对基质变址寻址方式</tspan></text></g><g id="shape66" transform="translate(568.01,37.10)"><path d="M13.9,.0L88.0,.0C95.6,.0,101.9,6.2,101.9,13.9C101.9,21.6,95.6,27.8,88.0,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AL,18</tspan></text></g><g id="shape67" transform="translate(540.81,73.60)"><path d="M13.9,.0L91.2,.0C98.8,.0,105.1,6.2,105.1,13.9C105.1,21.6,98.8,27.8,91.2,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AX,BX</tspan></text></g><g id="shape68" transform="translate(647.66,110.10)"><path d="M13.9,.0L117.6,.0C125.2,.0,131.5,6.2,131.5,13.9C131.5,21.6,125.2,27.8,117.6,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AX,[400H]</tspan></text></g><g id="shape69" transform="translate(688.46,146.60)"><path d="M13.9,.0L95.2,.0C102.8,.0,109.1,6.2,109.1,13.9C109.1,21.6,102.8,27.8,95.2,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AX,[SI]</tspan></text></g><g id="shape70" transform="translate(674.86,183.10)"><path d="M13.9,.0L122.4,.0C130.0,.0,136.3,6.2,136.3,13.9C136.3,21.6,130.0,27.8,122.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AX,[BX][SI]</tspan></text></g><g id="shape71" transform="translate(702.06,256.10)"><path d="M13.9,.0L152.8,.0C160.4,.0,166.7,6.2,166.7,13.9C166.7,21.6,160.4,27.8,152.8,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AX,DISP[BX][SI]</tspan></text></g><g id="shape72" transform="translate(429.95,335.30)"><path d="M13.9,.0L122.4,.0C130.0,.0,136.3,6.2,136.3,13.9C136.3,21.6,130.0,27.8,122.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">段内直接寻址方式</tspan></text></g><g id="shape73" transform="translate(429.95,390.20)"><path d="M13.9,.0L122.4,.0C130.0,.0,136.3,6.2,136.3,13.9C136.3,21.6,130.0,27.8,122.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">段内间接寻址方式</tspan></text></g><g id="shape74" transform="translate(429.95,426.70)"><path d="M13.9,.0L122.4,.0C130.0,.0,136.3,6.2,136.3,13.9C136.3,21.6,130.0,27.8,122.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">段间直接寻址方式</tspan></text></g><g id="shape75" transform="translate(429.95,463.20)"><path d="M13.9,.0L122.4,.0C130.0,.0,136.3,6.2,136.3,13.9C136.3,21.6,130.0,27.8,122.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">段间间接寻址方式</tspan></text></g><g id="shape76" transform="translate(591.21,316.90)"><path d="M32.3,.0L173.7,.0C191.5,.0,206.0,14.5,206.0,32.3C206.0,50.1,191.5,64.6,173.7,64.6L32.3,64.6C14.5,64.6,.0,50.1,.0,32.3C.0,14.5,14.5,.0,32.3,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="27.8" y="19.6">JMP NEAR  PTR ADDR1</tspan><tspan x="27.8" y="38.0">JMP SHORT ADDR2</tspan><tspan x="27.8" y="56.4">JMP 400H</tspan></text></g><g id="shape77" transform="translate(591.21,390.20)"><path d="M13.9,.0L62.4,.0C70.0,.0,76.3,6.2,76.3,13.9C76.3,21.6,70.0,27.8,62.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">JMP BX</tspan></text></g><g id="shape78" transform="translate(591.21,426.70)"><path d="M13.9,.0L150.4,.0C158.0,.0,164.3,6.2,164.3,13.9C164.3,21.6,158.0,27.8,150.4,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">JMP FAR PTR ADDR4</tspan></text></g><g id="shape79" transform="translate(591.21,463.20)"><path d="M13.9,.0L220.8,.0C228.4,.0,234.7,6.2,234.7,13.9C234.7,21.6,228.4,27.8,220.8,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">JMP DWORD PTR [ADDR5 +BX]</tspan></text></g><g id="shape80" transform="translate(513.61,219.60)"><path d="M13.9,.0L136.0,.0C143.6,.0,149.9,6.2,149.9,13.9C149.9,21.6,143.6,27.8,136.0,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">寄存器相对寻址方式</tspan></text></g><g id="shape81" transform="translate(688.46,219.60)"><path d="M13.9,.0L128.0,.0C135.6,.0,141.9,6.2,141.9,13.9C141.9,21.6,135.6,27.8,128.0,27.8L13.9,27.8C6.2,27.8,.0,21.6,.0,13.9C.0,6.2,6.2,.0,13.9,.0z" fill="none" stroke="#e3e3e3"></path><text style="fill:#303030;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve"><tspan x="15.5" y="19.1">MOV AX,DISP[DI]</tspan></text></g></g></svg></div><h2 id="1-0-隐含寻址方式"><a href="#1-0-隐含寻址方式" class="headerlink" title="1.0 隐含寻址方式"></a>1.0 隐含寻址方式</h2><p>常用指令：PUSH,POP,等。</p><p>多体现在一些特定指令。如     PUSH;POP指令等寄存器或地址在指令中不存在，操作的地址为默认的。</p><h2 id="2-0-立即寻址方式"><a href="#2-0-立即寻址方式" class="headerlink" title="2.0 立即寻址方式"></a>2.0 立即寻址方式</h2><p>立即寻址方式的目的就是将操作数紧跟在操作码后面，与操作码一起放在指令代码段中，在程序运行时，程序直接调用该操作数，而不需要到其他地址单元中去取相应的操作数。</p>  <pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AL,18MOV AH,80H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码为将18移入AX寄存器低位，80H移入AX寄存器高位。</p><h2 id="3-0-直接寻址方式"><a href="#3-0-直接寻址方式" class="headerlink" title="3.0 直接寻址方式"></a>3.0 直接寻址方式</h2><p>直接寻址方式时操作数地址的偏移量直接包含在指令中，和指令操作码一起放在代码段，而操作数则在数据段中。操作数的地址时数据段寄存器DS中的内容左移4位后，加上指令给定的地址偏移量。</p><p>格式</p>  <pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX,[400H]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当数据寄存器数据 （DS）=1000H，则代码意思为将 10400H 处的地址移至AX寄存器内。<br>10000H（段基地址）+400H（偏移地址）=10400（物理地址）</p><h2 id="4-0-寄存器寻址方式"><a href="#4-0-寄存器寻址方式" class="headerlink" title="4.0 寄存器寻址方式"></a>4.0 寄存器寻址方式</h2><p>寄存器寻址方式中，操作数在CPU的内部寄存器中。执行时，直接操作寄存器中数。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX,BX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述指令为将BX寄存器中数据移至AX中。</p><h2 id="5-0-寄存器间接寻址方式"><a href="#5-0-寄存器间接寻址方式" class="headerlink" title="5.0 寄存器间接寻址方式"></a>5.0 寄存器间接寻址方式</h2><p> 操作数的有效地址有变址寄存器SI、DIJ或基址寄存器BX、BP提供。</p><blockquote><p>  $物理地址 = 10H*(DS)+(BX、BI或DI)$</p></blockquote><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX,[SI]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如上代码，如果（DS）=2000H，（SI）=1500H，<br>$则物理地址:20000H(段基地址)+1500H(偏移地址)=21500H(物理地址)$<br>即运行完，(AX) 为 21500H 处的数据</p><h2 id="6-0-寄存器相对寻址方式"><a href="#6-0-寄存器相对寻址方式" class="headerlink" title="6.0 寄存器相对寻址方式"></a>6.0 寄存器相对寻址方式</h2><p>此寻址方式是以知道那个的寄存器内容，加上指令中给出的位移量（8或16位），并以一个段寄存器位基准，作为操作数的地址。</p><blockquote><p>  $物理地址=10H*(DS) +(BX、SI或DI)+8位(16位)位移量$<br>  ​       $物理地址=10H*(SS) +(BP)+8位(16位)位移量$</p></blockquote><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX,DISP[DI] ;或 MOV AX,[DISP + DI]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>DISP 为偏移量的符号地址。</p><p>如果(DS)=3000H,(DI)=2000H,DISP=600H,则</p><p>$物理地址：30000H(段基地址)+2000H(变址)+600H(位移量)=32600H(物理地址)$</p><h2 id="7-0-基址加变址寻址方式"><a href="#7-0-基址加变址寻址方式" class="headerlink" title="7.0 基址加变址寻址方式"></a>7.0 基址加变址寻址方式</h2><p>通常将BX和BP看作是基址寄存器，把SI和DI作为变址寄存器。两个寄存器均由指令指定。</p><blockquote><p>   $物理地址=10H*(DS)+(BX)+(SI或DI)$<br>          $物理地址=10H*(SS)+(BP)+(SI或DI)$</p></blockquote><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX,[BX][DI];或MOV AX,[BX+DI]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若（DS）=1000H,(BX)=2000H,(DI)=3000H,</p><p>$物理地址：10000H(段基地址)+2000H(基址)+3000H(变址)=15000(物理地址)$</p><h2 id="8-0-相对基址变址寻址方式"><a href="#8-0-相对基址变址寻址方式" class="headerlink" title="8.0 相对基址变址寻址方式"></a>8.0 相对基址变址寻址方式</h2><p>通常把BX和BP看作基址寄存器，把SI和DI看作变址寄存器。其原理就是把一个基址寄存器BX或BP的内容，加上变址寄存器SI或DI的内容，再加上指令中给出的8或16位跑位移量，并以一个段寄存器作为地址基准，作为操作数的地址。</p><blockquote><p>$物理地址=10H*(DS)+(BX)+(SI或DI)+8或16位偏移量$<br>      $物理地址=10H*(SS)+(BP)+(SI或DI)+8或16位偏移量$</p></blockquote>  <pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV AX,DISP[BX][SI]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若(DS)=4000H,(BX)=2000H,(SI)=1000H,DISP=800H,则</p><p>​    $物理地址：4000H(段基地址)+[2000H(基址)+1000H(变址)+800H(位移量)]=43800H$</p><h2 id="9-0-段寻址方式"><a href="#9-0-段寻址方式" class="headerlink" title="9.0 段寻址方式"></a>9.0 段寻址方式</h2><h3 id="9-1-段内直接寻址方式"><a href="#9-1-段内直接寻址方式" class="headerlink" title="9.1 段内直接寻址方式"></a>9.1 段内直接寻址方式</h3><p>将当前IP寄存器的内容和指令中指定的8位或16位位移量之和作为转向的有效地址。</p><p>这种寻址方式的汇编格式有如下3种：</p><ol><li>指令名 SHORT 转移目标地址标号。表示位移量被强制位8位，跳转距离位为-128~+127。</li><li>指令名 转移目标地址标号</li><li>指令名 NEAR PTR 转移目标地址标号。表示位移量被强制位16位，跳转距离为-32768 ~ +32767</li></ol><p>位移量可以是一个带符号的8位数，段内短程转移。也可以是一个带符号的16位数，段内近程转移。什么都不加，计算机默认为16位。</p><p>且无论是8/16位，地址标号在指令码中都是用补码表示的带符号数。适应于无条件转移或者条件转移，但条件转移只能有8位的位移量。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">JMP SHORT ADDR2JMP ADDR3JMP NEAR PTR ADDR1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>ADDR (123) 皆为地址标号。</p></blockquote><p>例：</p><blockquote><p>  给定 (IP) =2BC0H，试为此转移指令找出转移的偏移地址。<br>  JMP NEAR PTR 5119H ；</p><p>  解：<br>  ​    (IP) = 5119H + ((IP) + 03H) = 7CDCH，物理地址PA = 09CDCH</p></blockquote><p> IP 的当前值是指从存储器中取出转移指令后的 IP   值（下一条指令的地址）。因为位移量是相对于当前 IP 的内容来计算的，所以又称为相对寻址。</p><p><a href="https://baike.baidu.com/item/%E6%AE%B5%E5%86%85%E7%9B%B4%E6%8E%A5%E5%AF%BB%E5%9D%80"><mark>参考链接</mark></a></p><h3 id="9-2段内间接寻址方式"><a href="#9-2段内间接寻址方式" class="headerlink" title="9.2段内间接寻址方式"></a>9.2段内间接寻址方式</h3><p>这种方式用于段间转移，当前CS和IP由存储器中连续4个字节单元提供。</p><p>常用指令：JMP,</p><p>指令中给出访问内存单元的寻址方式。段内间接寻址的转向有效地址是一个寄存器或一个存储单元的内容，并且可以用数据寻址方式中除立即数以外的任何一种寻址方式取得转向的有效地址。</p><blockquote><p>$物理地址: 10H*(CS)+EA$     ，(EA)为有效偏移地址。</p></blockquote><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">JMP AX;有效地址为一个寄存器JMP [BX][SI];有效地址为一个存储单元<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如上指令，若(DS)=2000H,(BX)=2000H,(SI)=3000H,(25000H)=3200H,</p><p>则，$(IP)=(10H)*(DS)+(BX)+(SI))=(25000H)=3200H$</p><h3 id="9-3-段间直接寻址方式"><a href="#9-3-段间直接寻址方式" class="headerlink" title="9.3 段间直接寻址方式"></a>9.3 段间直接寻址方式</h3><p>直接提供转向的段地址（16位）和偏移地址（16位）。用指令中指定的偏移地址取代IP寄存器内容，用指定段地址取代CS寄存器内容。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">JMP FAR PTR ADD1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其中的段地址传送给CS,偏移地址传给IP，完成程序控制间的段间转移。ADD1为装箱的符号地址，FAR PTR 则是表示段间转义的操作符。</p><h3 id="9-4段间间接寻址方式"><a href="#9-4段间间接寻址方式" class="headerlink" title="9.4段间间接寻址方式"></a>9.4段间间接寻址方式</h3><p>用存储器中的两个相继字的内容来取代IP和CS。内存单元的地址使用指令指定的除立即寻址和寄存器寻址方式意外的任何一种数据寻址方式取得。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">JMP DWORD PTR [DISP+BX]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[DISP+BX]说明数据寻址方式位基础年起间接寻址方式，DWORD PRT 为双字操作符。</p>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪选择器</title>
      <link href="/2021/10/16/%E4%BC%AA%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2021/10/16/%E4%BC%AA%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-selection"><a href="#1-selection" class="headerlink" title="1. ::selection"></a>1. ::selection</h2><h2 id="2-before"><a href="#2-before" class="headerlink" title="2. ::before"></a>2. ::before</h2><h2 id="3-after"><a href="#3-after" class="headerlink" title="3. ::after"></a>3. ::after</h2><h2 id="4-first-line"><a href="#4-first-line" class="headerlink" title="4. ::first-line"></a>4. ::first-line</h2><h2 id="5-first-letter"><a href="#5-first-letter" class="headerlink" title="5. ::first-letter"></a>5. ::first-letter</h2><div><style>​    p.p,​    div.p{​      white-space: nopre;​      text-indent: 2rem;​      width: 400px;​    p::selection {​      color: springgreen;​      background-color: sienna;​    }​    div::before {​      content: "this is a div tag";​    }​    div::after {​      content: "div is over";​    }​    div::selection {​      background-color: cornflowerblue;​    }​    p.p,​    div.p {​      margin: 20px auto;​    }​    p::first-line {​      background-color: darkviolet;​    }​    div::first-letter {​      font-size: 40px;​      text-transform: uppercase;​      background-color: firebrick;​      border-radius: 3px;​      padding: 0 3px 0 0;​    }  </style>&nbsp; &nbsp; <div class="p"> 燕子去了，有再来的时候；杨柳枯了，有再青的时候；桃花谢了，有再开的时候。但是，聪明的，你告诉我，我们的日子为什么一去不复返呢？--是有人偷了他们罢：那是谁？又藏在何处呢？是他们自己逃走了罢：现在又到了哪里呢？  </div>&nbsp; &nbsp; <p class="p">我不知道他们给了我多少日子；但我的手确乎是渐渐空虚了。在默默里算着，八千多日子已经从我手中溜去；像针尖上一滴水滴在大海里，我的日子滴在时间的流里，没有声音，也没有影子。我不禁头涔涔而泪潸潸了。</p>&nbsp; &nbsp; <p class="p">去的尽管去了，来的尽管来着；去来的中间，又怎样地匆匆呢？早上我起来的时候，小屋里射进两三方斜斜的太阳。太阳他有脚啊，轻轻悄悄地挪移了；我也茫茫然跟着旋转。于是--洗手的时候，日子从水盆里过去；吃饭的时候，日子从饭碗里过去；默默时，便从凝然的双眼前过去。我觉察他去的匆匆了，伸出手遮挽时，他又从遮挽着的手边过去，天黑时，我躺在床上，他便伶伶俐俐地从我身上跨过，从我脚边飞去了。等我睁开眼和太阳再见，这算又溜走了一日。我掩着面叹息。但是新来的日子的影儿又开始在叹息里闪过了。</p>&nbsp; &nbsp; <p class="p">在逃去如飞的日子里，在千门万户的世界里的我能做些什么呢？只有徘徊罢了，只有匆匆罢了；在八千多日的匆匆里，除徘徊外，又剩些什么呢？过去的日子如轻烟，被微风吹散了，如薄雾，被初阳蒸融了；我留着些什么痕迹呢？我何曾留着像游丝样的痕迹呢？我赤裸裸来到这世界，转眼间也将赤裸裸的回去罢？但不能平的，为什么偏要白白走这一遭啊？  </p>&nbsp; &nbsp; <p class="p">你聪明的，告诉我，我们的日子为什么一去不复返呢？</p></div>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html设置背景图片透明度(不影响子标签与内容)</title>
      <link href="/2021/10/14/html%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E9%80%8F%E6%98%8E%E5%BA%A6-%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%AD%90%E6%A0%87%E7%AD%BE%E4%B8%8E%E5%86%85%E5%AE%B9/"/>
      <url>/2021/10/14/html%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E9%80%8F%E6%98%8E%E5%BA%A6-%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%AD%90%E6%A0%87%E7%AD%BE%E4%B8%8E%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-目前就这一种"><a href="#1-目前就这一种" class="headerlink" title="1.目前就这一种"></a>1.目前就这一种</h2><p>​    通过给子内容添加具有透明效果的背景色，以实现背景透明效果。</p><p>如</p><div>    <div id="apend" style=" background-image:     url(https://gitee.com/blogofxyz/blogofxyz/raw/master/medias/background.JPG);background-size: cover; width: 800px; height: auto;">        <div id="ap" style="width: 800px; height: auto;background: rgba(255, 255, 255, 0.3);">         <h1 style="    margin-left: 80px;  line-height: 100px;">             有的人            </h1>            <h7 style="float: right; margin-right: 20px;">————纪念鲁迅逝世十三周年有感</h7>            <p style="margin-left: 50px; white-space: break-spaces;line-height: 30px; font-family: cursive; font-size: 30px;">有的人活着他已经死了；有的人死了他还活着。有的人骑在人民头上：“啊，我多伟大！”有的人俯下身子给人民当牛马。有的人把名字刻入石头，想“不朽”；有的人情愿作野草，等着地下的火烧。有的人他活着别人就不能活；有的人他活着为了多数人更好地活。骑在人民头上的人民把他摔垮；给人民作牛马的人民永远记住他！把名字刻入石头的名字比尸首烂得更早；只要春风吹到的地方到处是青青的野草。他活着别人就不能活的人，他的下场可以看到；他活着为了多数人更好地活着的人，群众把他抬举得很高，很高。             </p>        </div>    </div></div><p>其代码可简略为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apend<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> background-image: url(<span class="token punctuation">"</span></span></span><span class="token attr-name">--图片链接--")"</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ap<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">--诗题对齐的代码--</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>有的人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h7</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">引言对齐的代码</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>————纪念鲁迅逝世十三周年有感<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h7</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css">--设置字体与对齐--</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>            ----诗句----        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最外层 div 设置背景图片，然后下一层 div 设置白色背景并指定透明度，此时的透明部分为内容以外的部分。</p><p>最后实现效果与料想中的一样。</p><blockquote><p>注：也可设置其他颜色的透明效果。rgba(x,y,z,p)。前四位分别为红、绿、蓝值，取值范围为0~255。第四位为透明度，取值范围0~1，值越大，透明效果越明显。当然，事实是用白色rgb(255, 255, 255)覆盖下边图像，所以，当这时底层div非最大层时会露馅。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）进程同步笔记</title>
      <link href="/2021/10/06/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/10/06/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-0进程同步机制"><a href="#1-0进程同步机制" class="headerlink" title="1.0进程同步机制"></a>1.0进程同步机制</h3><h4 id="1-1-0概念"><a href="#1-1-0概念" class="headerlink" title="1.1.0概念"></a>1.1.0概念</h4><p><mark style="border-radius:5px;padding:5px;background-color:#47a6e8">异步环境</mark>下一组开发进程因直接制约而互相发送消息，互相合作、互相等待，使得各进程按一定的速度执行的过程。</p><h4 id="1-1-2-目的"><a href="#1-1-2-目的" class="headerlink" title="1.1.2 目的"></a>1.1.2 目的</h4><p>在执行次序上对多个写作进程进行协调，使并发执行的诸多协作进程之间能按照一定的规则（或时序）共享系统资源，并能很好地互相合作，从而使程序的执行具有可再现性。</p><h4 id="1-1-3-进程的制约关系"><a href="#1-1-3-进程的制约关系" class="headerlink" title="1.1.3 进程的制约关系"></a>1.1.3 进程的制约关系</h4><ul><li><p>互斥关系</p><p>  间接相互制约，多程序并发执行，由于共享的系统资源（CPU、I/O设备等），这些并发执行的程序之间会形成相互制约的关系。</p><p>  为保证进程间有序运行，对于系统间的这些资源，必须由系统实施统一分配。</p></li><li><p>同步关系</p><p>  某些程序执行某些任务时会建立两个或更多的进程。这些进程为了完成同一任务而相互合作。</p></li></ul><blockquote><p>  协作进程间  的制约关系即进程同步。根据上述可分为互斥关系与同步关系，且互斥输入同步。同步强调保证进程之间操作的先后次序的约束，而互斥强调对共享资源的互斥访问。</p></blockquote><h2 id="2-0-软件同步机制"><a href="#2-0-软件同步机制" class="headerlink" title="2.0 软件同步机制"></a>2.0 软件同步机制</h2><h2 id="3-0-硬件同步机制"><a href="#3-0-硬件同步机制" class="headerlink" title="3.0 硬件同步机制"></a>3.0 硬件同步机制</h2><h2 id="4-0-信号量机制"><a href="#4-0-信号量机制" class="headerlink" title="4.0 信号量机制"></a>4.0 信号量机制</h2><h2 id="5-0-管程机制"><a href="#5-0-管程机制" class="headerlink" title="5.0 管程机制"></a>5.0 管程机制</h2><h4 id="5-1-1-定义"><a href="#5-1-1-定义" class="headerlink" title="5.1.1 定义"></a>5.1.1 定义</h4><p>对于系统中的各种硬件资源和软件资源，忽略他们的内部结构和实现细节，利用数据结构抽象地描述他们的资源特性。即用少量信息和对此资源所执行的操作来表征该资源。于是，利用共享数据结构抽象地表示系统中的共享资源，并且将对该共享数据结构实施的特定操作定义为一组过程。</p><h4 id="5-1-2-机理"><a href="#5-1-2-机理" class="headerlink" title="5.1.2 机理"></a>5.1.2 机理</h4><p>进程对共享资源的申请、释放和相关操作，必须通过由这组过程间接地对共享数据结构进行操作加以实现</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git上传后缀名改变</title>
      <link href="/2021/09/26/git%E4%B8%8A%E4%BC%A0%E5%90%8E%E7%BC%80%E5%90%8D%E6%94%B9%E5%8F%98/"/>
      <url>/2021/09/26/git%E4%B8%8A%E4%BC%A0%E5%90%8E%E7%BC%80%E5%90%8D%E6%94%B9%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<p>刚开始搞blog时遇到的奇葩问题。</p><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最开始是<code>jpg</code>结尾的图片，结果上传到仓库后发现是<code>JPG</code>。当时给我懵逼的。<br>后来就想着吧。jpg不给搞那就改成png，结果又<code>png</code>与<code>PNG</code>过不去.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>找到 git 所操作仓库的配置文件。就是说，你操作不同的仓库，git会生成许多配置文件集。一般是隐藏的（win），需要开启显示隐藏文件。然后在此启动git命令行，或者启动后路径切换至此。</p><p>切换或打得开成功会如下图</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/%E7%AC%94%E8%AE%B0&amp;%E5%BF%83%E5%BE%97/git_png_error.png" style="zoom: 67%;"><p>输入以下命令，回车</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config core.ignorecase false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>git默认是大小写不敏感的。所以在你上传文件之后，如果第一次上传的是<code>abc.jpg</code> 那么，在以后上传<code>abc.JPG</code>时就会认为，这是一个文件。当然，图片文件是会替换的，但文件名是不会改变的。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）进程与线程</title>
      <link href="/2021/09/22/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%BF%9B%E7%A8%8B/"/>
      <url>/2021/09/22/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-进程"><a href="#1-进程" class="headerlink" title="1. 进程"></a>1. 进程</h2><h3 id="1-1-进程定义"><a href="#1-1-进程定义" class="headerlink" title="1.1 进程定义"></a>1.1 进程定义</h3><p>​    进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><p>​    可固体为：</p><ul><li><p>进程是程序的一次执行。</p></li><li><p>进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</p></li><li><p>进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p></li></ul><h4 id="1-1-1进程控制块-PCB"><a href="#1-1-1进程控制块-PCB" class="headerlink" title="1.1.1进程控制块( PCB)"></a>1.1.1进程控制块( PCB)</h4><p>​    PCB ( process control block ) 是进程的一部分，是操作系统中最重要的记录型数据结构，是进程存在的唯一标志，常驻内存。</p><p>​    作用：</p><ul><li>作为独立运行基本单位的标志；</li><li>能实现间断性运行方式；</li><li>提供进程管理所需要的信息；</li><li>提供进程调度所需要的信息；</li><li>实现与其他进程的同步与通信。</li></ul><h3 id="1-2-进程的几个特征"><a href="#1-2-进程的几个特征" class="headerlink" title="1.2 进程的几个特征"></a>1.2 进程的几个特征</h3><ul><li>动态性（最基本的特征)–&gt;生命期</li><li>并发性–&gt;一段时间内同时运行</li><li>独立性–&gt;进程实体是一个能独立运行的基本单位,是系统中独立获得资     源和独立调度的基本单位</li><li>异步性–&gt;按各自独立的、不可预知的速度向前推进</li></ul><h3 id="1-3-进程的状态与转换"><a href="#1-3-进程的状态与转换" class="headerlink" title="1.3 进程的状态与转换"></a>1.3 进程的状态与转换</h3><ul><li><p>就绪状态</p><p>​    一个较大的程序通常都由若干个程序段组成，程序在执行时，必须按照某种先后次序逐个执行，仅当前一操作执行完后，才能执行后继操作。</p></li><li><p>执行状态</p><p>​    已获得CPU，正在执行的状态</p></li><li><p>阻塞状态</p><p>​    正在执行的进程由于发生某事件而暂时无法继续执行的状态。如：请求I/O、申请缓冲空间</p></li></ul><div style="text-align:center"> <svg width="620" viewBox="0 0 620 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="294">    <defs></defs>    <g transform="translate(-146.87,-126.87)">        <g id="shape1" transform="translate(252.54,127.87)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M.0,40.0C.0,17.9,26.9,.0,60.0,.0C93.1,.0,120.0,17.9,120.0,40.0C120.0,62.1,93.1,80.0,60.0,80.0C26.9,80.0,.0,62.1,.0,40.0z"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:16.00pt">                <tspan y="47.6" x="38.4">就绪</tspan>            </text>        </g>        <g id="shape2" transform="translate(535.28,127.87)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M.0,40.0C.0,17.9,26.9,.0,60.0,.0C93.1,.0,120.0,17.9,120.0,40.0C120.0,62.1,93.1,80.0,60.0,80.0C26.9,80.0,.0,62.1,.0,40.0z"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:16.00pt">                <tspan y="47.6" x="38.4">执行</tspan>            </text>        </g>        <g id="shape3" transform="translate(396.85,340.16)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M.0,40.0C.0,17.9,26.9,.0,60.0,.0C93.1,.0,120.0,17.9,120.0,40.0C120.0,62.1,93.1,80.0,60.0,80.0C26.9,80.0,.0,62.1,.0,40.0z"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:16.00pt">                <tspan y="47.6" x="38.4">阻塞</tspan>            </text>        </g>        <g id="shape4" transform="translate(369.17,181.12)">            <path fill="none" stroke="#191919" d="M.0,.0L163.5,-0.0"></path>            <path fill="#191919" stroke="#191919" stroke-width="1" d="M163.5,-3.0L169.5,-0.0L163.5,3.0L163.5,-3.0" stroke-linecap="round"></path>            <rect y="-13.3" width="73.6" fill="#ffffff" x="55.5" height="24.0"></rect>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:14.00pt">                <tspan y="5.9" x="55.5">进程调度</tspan>            </text>        </g>        <g id="shape5" transform="translate(396.85,380.16)">            <path fill="none" stroke="#191919" d="M.0,.0L-81.7,-166.9"></path>            <path fill="#191919" stroke="#191919" stroke-width="1" d="M-84.4,-165.6L-84.3,-172.3L-79.0,-168.2L-84.4,-165.6" stroke-linecap="round"></path>            <rect y="-97.2" width="70.4" fill="#ffffff" x="-74.8" height="25.6"></rect>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="-76.4" x="-74.8">I/O完成</tspan>            </text>        </g>        <g id="shape6" transform="translate(552.43,195.87)">            <path fill="none" stroke="#191919" d="M.0,.0L-34.4,178.4"></path>            <path fill="#191919" stroke="#191919" stroke-width="1" d="M-31.5,179.0L-35.6,184.3L-37.4,177.8L-31.5,179.0" stroke-linecap="round"></path>            <rect y="66.4" width="70.4" fill="#ffffff" x="-49.8" height="25.6"></rect>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="87.2" x="-49.8">I/O请求</tspan>            </text>        </g>        <g id="shape7" transform="translate(542.40,148.95)">            <path fill="none" stroke="#191919" d="M.0,.0L-171.0,-0.0"></path>            <path fill="#191919" stroke="#191919" stroke-width="1" d="M-171.0,3.0L-177.0,-0.0L-171.0,-3.0L-171.0,3.0" stroke-linecap="round"></path>            <rect y="-14.3" width="80.0" fill="#ffffff" x="-119.3" height="25.6"></rect>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="6.5" x="-119.3">时间片完成</tspan>            </text>        </g>        <g id="shape8" transform="translate(640.69,194.01)">            <path fill="none" stroke="#191919" d="M.0,.0L62.7,140.7"></path>            <path fill="#191919" stroke="#191919" stroke-width="1" d="M65.4,139.4L65.1,146.1L59.9,141.9L65.4,139.4" stroke-linecap="round"></path>            <rect y="40.6" width="40.0" fill="#ffffff" x="5.5" height="25.6"></rect>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="61.4" x="5.5">释放</tspan>            </text>        </g>        <g id="shape9" transform="translate(268.07,194.73)">            <path fill="none" stroke="#191919" d=""></path>        </g>        <g id="shape10" transform="translate(207.87,340.16)">            <path fill="none" stroke="#191919" d="M.0,.0L57.2,-140.4"></path>            <path fill="#191919" stroke="#191919" stroke-width="1" d="M54.5,-141.5L59.5,-146.0L60.0,-139.3L54.5,-141.5" stroke-linecap="round"></path>            <rect y="-85.6" width="40.0" fill="#ffffff" x="10.1" height="25.6"></rect>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="-64.8" x="10.1">许可</tspan>            </text>        </g>        <g id="shape11" transform="translate(147.87,340.16)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M.0,40.0C.0,17.9,26.9,.0,60.0,.0C93.1,.0,120.0,17.9,120.0,40.0C120.0,62.1,93.1,80.0,60.0,80.0C26.9,80.0,.0,62.1,.0,40.0z"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="46.5" x="40.0">创建</tspan>            </text>        </g>        <g id="shape12" transform="translate(645.83,340.16)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M.0,40.0C.0,17.9,26.9,.0,60.0,.0C93.1,.0,120.0,17.9,120.0,40.0C120.0,62.1,93.1,80.0,60.0,80.0C26.9,80.0,.0,62.1,.0,40.0z"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:15.00pt">                <tspan y="46.5" x="40.0">终止</tspan>            </text>        </g>    </g></svg></div><h3 id="1-4-进程控制"><a href="#1-4-进程控制" class="headerlink" title="1.4 进程控制"></a>1.4 进程控制</h3><p>​    一般由OS内核中的原语实现，是进程管理的基本功能。</p><ul><li><p>进程创建</p></li><li><p>进程终止</p></li><li><p>进程阻塞与唤醒 </p></li><li><p>进程挂起与激活</p></li></ul><h4 id="1-4-1-进程创建"><a href="#1-4-1-进程创建" class="headerlink" title="1.4.1 进程创建"></a>1.4.1 进程创建</h4><p>  ​    引起进程创建的事件：用户登录、作业调度、提供服务、应用请求等。</p>  <pre class="mermaid">  graph LR  a[申请空白PCB]--&gt;b[分配所需资源]  b--&gt;c[初始化PCB]  c--&gt;d[插入就绪队列]</pre><h4 id="1-4-2-进程终止"><a href="#1-4-2-进程终止" class="headerlink" title="1.4.2 进程终止"></a>1.4.2 进程终止</h4><p>  ​    引起进程终止的事件：正常结束、异常结束、外界干预等。</p><p>  ​    </p><h4 id="1-4-3-进程阻塞与唤醒"><a href="#1-4-3-进程阻塞与唤醒" class="headerlink" title="1.4.3 进程阻塞与唤醒"></a>1.4.3 进程阻塞与唤醒</h4><p>  ​    向系统请求共享资源失败、等待某种操作的完成、新数据尚未到达、等待新任务的到达等。</p><p>  ​    阻塞唤醒需要成对使用。</p><ul><li><p>阻塞：</p><p>​    进程的阻塞是进程自身的一种主动行为。</p><pre class="mermaid">    graph LRa[停止执行]--&gt;b[状态由执行改为阻塞]b--&gt;c[将PCB插入阻塞队列]</pre></li><li><p>唤醒：</p><pre class="mermaid">    graph LRa[从阻塞队列中移出]--&gt;b[状态由阻塞改为就绪]b--&gt;c[将PCB插入就绪队列]</pre></li></ul><h4 id="1-4-4-进程挂起与激活"><a href="#1-4-4-进程挂起与激活" class="headerlink" title="1.4.4 进程挂起与激活"></a>1.4.4 进程挂起与激活</h4>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完)计算机怎么进行四则运算（浮点）</title>
      <link href="/2021/09/15/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%8E%E4%B9%88%E8%BF%9B%E8%A1%8C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%EF%BC%88%E6%B5%AE%E7%82%B9%EF%BC%89/"/>
      <url>/2021/09/15/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%8E%E4%B9%88%E8%BF%9B%E8%A1%8C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%EF%BC%88%E6%B5%AE%E7%82%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="加减"><a href="#加减" class="headerlink" title="加减"></a>加减</h2><ol><li><p>0操作数检查<br>浮点加减运算过程比定点运算过程复杂。如两操作数中有一个数为0,即没有必要再进行后续的一系列操作。</p></li><li><p>比较阶码大小并对阶<br>两浮点数加减,首先看两数的小数点位置是否对齐（阶码是否相同）。若阶码相同,表示小数点对齐,可进行尾数的加减运算。反之,若两数阶码不同,表示小数点位置没有对齐,此时必须使两数阶码相同,即对阶。</p><ul><li><p>对阶</p><p>​    先求两阶码差的绝对值，然后使小的阶码增加，其对应尾数右移相应的长度。之所以右移，是因为向左移的话如果最左位发生溢出，对数值影响较大。而向右移溢出时最末位丢失影响较小。<mark style="background-color:#57a2ed;padding:5px;border-radius:5px">想想你在乎你钱包余额的最左位还是最右位。</mark></p></li></ul></li></ol><ol start="3"><li></li><li><p>规格化</p><blockquote><p>  参考：<a href="https://zhuanlan.zhihu.com/p/372880386">浮点数的表示和规格化 - 知乎 </a></p></blockquote><p>  ​    <strong>左规：</strong>当浮点数运算的结果为非规格化时要进行规格化处理，将尾数算术左移一位、阶码减1(基数为2时）的方法称为左规，左归可能要进行多次。</p><p>  ​    <strong>右规：</strong>当浮点数运算的结果尾数出现溢出（双符号位为01或10)时，将尾数算术右移一位、阶码加1（基数为2时）的方法称为右规。需要右归时，只需进行一次。</p><p>  规格化浮点数的尾数M的绝对值应满足条件1/r≤|M|≤1。若r=2，则有1/2≤ |M|≤1。规格化表示的尾数形式如下。</p><p>  ​    <strong>1）原码规格化后。</strong></p><p>  ​        ● 正数为0.1××…×的形式，其最大值表示为0.11…1，最小值表示为0.100…0。尾数的表示范围为1/2≤M≤(1-2)。</p><p>  ​        ● 负数为1.1××…×的形式，其最大值表示为1.10…0，最小值表示为1.11…1。尾数的表示范围为-(1-2)≤M≤-1/2。</p><p>  ​    <strong>2）补码规格化后。</strong></p><p>  ​        ● 正数为0.1××…×的形式，其最大值表示为0.11…1，最小值表示为0.100…0。尾数的表示范围为1/2≤M≤(1-2)。</p><p>  ​        ● 负数为1.0××…×的形式，其最大值表示为1.01…1，最小值表示为1.00…0。尾数的表示范围为-1≤M≤-(1/2＋2)。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 二进制运算 </tag>
            
            <tag> 定点运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完)计算机怎么计算四则运算(定点)</title>
      <link href="/2021/09/15/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%8E%E4%B9%88%E8%BF%9B%E8%A1%8C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%EF%BC%88%E5%AE%9A%E7%82%B9%EF%BC%89/"/>
      <url>/2021/09/15/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%8E%E4%B9%88%E8%BF%9B%E8%A1%8C%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%EF%BC%88%E5%AE%9A%E7%82%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="加-●’◡’●-加"><a href="#加-●’◡’●-加" class="headerlink" title="加 (●’◡’●) 加"></a>加 (●’◡’●) 加</h2><h3 id="1-整数相加。"><a href="#1-整数相加。" class="headerlink" title="1.整数相加。"></a>1.整数相加。</h3><ul><li><p>两个数全为正数，二进制形式数直接相加。</p><p>如：x=10<sub>D</sub>=01010<sub>O</sub>,y=15<sub>D</sub>=01111<sub>O</sub>,计算x+y.</p><p>则直接同位相加,以八位（根据实际数据类型而定）数据位计算，x=0000 1010 ,y=0000 1111</p><pre><code>  0000 1010 +0000 1111 ----------  0001 1001</code></pre><p>​    0001 1001<sub>O</sub>=25<sub>D</sub> </p></li><li><p>两数有负数，用补码运算。</p><p>如：x= -10<sub>D</sub>,y=15<sub>D</sub>,计算x+y.</p><p>同样用八位举例。</p><p>[x]<sub>原</sub>=1000 1010, [y]<sub>补</sub>=[y]<sub>原</sub>=0000 1111,</p><p>[x]<sub>补</sub>=1111 0110,</p><pre><code>  1111 0110 +0000 1111 ----------  0000 0101</code></pre><p><mark>此时算出结果是补码</mark>&gt;，故需要首先进行求反码的逆运算。即先看首位，如果是 <code>0</code> ,则无需变动。否则末尾减一，除符号位外，其它位求反。</p><p>​    0000 0101<sub>O</sub>=5<sub>D</sub> </p></li></ul><hr><h3 id="2-小数相加。"><a href="#2-小数相加。" class="headerlink" title="2. 小数相加。"></a>2. 小数相加。</h3><hr><h2 id="●’◡’●-减-●’◡’●"><a href="#●’◡’●-减-●’◡’●" class="headerlink" title="(●’◡’●) 减 (●’◡’●)"></a>(●’◡’●) 减 (●’◡’●)</h2><h3 id="1-整数减"><a href="#1-整数减" class="headerlink" title="1. 整数减"></a>1. 整数减</h3><p>无论正负，两数相减皆为两数的补码相加。就是这么神奇，不信下边举个例子。</p><h2 id="●’◡’●-乘-●’◡’●-乘-●’◡’●"><a href="#●’◡’●-乘-●’◡’●-乘-●’◡’●" class="headerlink" title="(●’◡’●) 乘 (●’◡’●) 乘 (●’◡’●)"></a>(●’◡’●) 乘 (●’◡’●) 乘 (●’◡’●)</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>用原码进行乘法运算。在定点计算机中，用两个原码表示的数相乘，乘积的符号由两数的符号位异或（         ）得到，乘积的数值部分是两数的绝对值相乘之积。即，原码的乘法的实质是两个正数相乘。<br>         其运算规则是： 根据乘数Y绝对值每个数位上的值Yi是“1”还是“0”(从最低位Y0开始)，决定本次部分积是加上被乘数X的绝对值，还是加上全“0”，得到的新部分积右移一位，再重复上面的动作，直到乘法做完为止。</p><h2 id="●’◡’●-除-●’◡’●-除-●’◡’●-除-●’◡’●"><a href="#●’◡’●-除-●’◡’●-除-●’◡’●-除-●’◡’●" class="headerlink" title="(●’◡’●) 除 (●’◡’●) 除 (●’◡’●) 除 (●’◡’●)"></a>(●’◡’●) 除 (●’◡’●) 除 (●’◡’●) 除 (●’◡’●)</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 二进制运算 </tag>
            
            <tag> 定点运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）溢出判断</title>
      <link href="/2021/09/09/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E6%BA%A2%E5%87%BA%E5%88%A4%E6%96%AD/"/>
      <url>/2021/09/09/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E6%BA%A2%E5%87%BA%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中的数据</title>
      <link href="/2021/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%95%B0/"/>
      <url>/2021/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>为了区别一般书写表示的数和机器中这些编码表示的数,通常将前者称为真值,后者称为机器<br>数或机器码。类似于<code>-01110</code>、<code>+1001000</code>等就是真值。即前有<code>±</code>号，后有<code>0</code> <code>1</code>。。而机器码就是全部的 <code>0</code> <code>1</code>。</p><hr><h2 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h2><p>首先，原码没有<code>±</code>号。即<code>-01101</code> 与<code>+10010</code> 等属于真值。</p><p>原码是最左侧第一位作为符号位 ，0表示正数，1表示负数；其余各位等与真值相同。</p><p>(-3)<sub>D</sub> =(1110)<sub>原</sub> =(-110)<sub>真值</sub> </p><p>特别的：（0）<sub>D</sub> = (0000)<sub>原</sub>=1000<sub>原</sub> </p><h2 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h2><p>符号位的用法及正数的表示与“原码”相同；负数的表示是在“原码”表示的基础上，将符号位以外的各位取反。</p><p>特别的 “0” 。</p><p>（+5）<sub>D</sub>=  (0101)<sub>原</sub>=(0010)<sub>反</sub></p><p>（-5）<sub>D</sub>=  (1101)<sub>原</sub>=(1010)<sub>反</sub></p><p>  ( 0 )  <sub>D</sub>=  (0000)<sub>原</sub>=(0111)<sub>反</sub></p><p>​            =  (1000)<sub>原</sub>=(1111)<sub>反</sub></p><h2 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h2><p>​        符号位的用法及正数的表示与“原码”相同；负数的表示是在“反码”表示的基础上，通过加1来获得的。</p><p><u>巧的是，当原码为负时，补码即此负数对字节长所表示最大数（无符号位）取余。另，如果真值为负，则可对每一位求反得出补码。即，当真值小于零，原码与补码的各位相加，所有位皆为<code>0</code></u></p><p>(-3)=(1011) <sub>原</sub> (1100)<sub>反</sub>   (1101) <sub>补</sub> 。</p><p>( 0 )  <sub>D</sub> =  (0000)<sub>原</sub> = (0111)<sub>反</sub>  =  (1000)<sub>原</sub>=(1111)<sub>反</sub>=(0000)<sub>补</sub></p><p>​    等价于： -3 %16  = 13 -&gt; <code>1101</code> <sub>原码</sub></p><h2 id="4-移码"><a href="#4-移码" class="headerlink" title="4.移码"></a>4.移码</h2><p>移码通常用于表示浮点数的阶码，32位浮点数中阶码范围为。先抛个公式，<br>$$<br>[e]_移=2^k+e，2^k&gt;e≥-2^k,([e]_移为机器码，e为真值，k为数据长度，如此移码为八位)<br>$$<br>在同一前提、环境下，k不变，比如在32位浮点数中，k为7（因为有一位需要表示正负，同时，）。举个计算例子。</p><p>​            在一八位的移码标准下。(+100110)<sub>真值</sub>=2<sup>8</sup> + 100110=1 010 0110。</p><p>​                                                    (- 110110)<sub>真值</sub>=2<sup>8</sup> -  110110=0 100 1010。       </p><p>其中，最左侧为符号位。正好与其他几种码相反。</p><h2 id="5-ASCII-码"><a href="#5-ASCII-码" class="headerlink" title="5.  ASCII 码"></a>5.  ASCII 码</h2><h3 id="5-1-常用-ASCII-码"><a href="#5-1-常用-ASCII-码" class="headerlink" title="5.1 常用 ASCII 码"></a>5.1 常用 ASCII 码</h3><table><thead><tr><th align="right">DEC</th><th align="right">OCT</th><th align="right">HEX</th><th align="right">BIN</th><th align="center">缩写/符号</th><th align="center">HTML实体</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">000</td><td align="right">00</td><td align="right">00000000</td><td align="center">NUL</td><td align="center">&amp;#000;</td><td align="left">Null char (空字符)</td></tr><tr><td align="right">1</td><td align="right">001</td><td align="right">01</td><td align="right">00000001</td><td align="center">SOH</td><td align="center">&amp;#001;</td><td align="left">Start of Heading (标题开始)</td></tr><tr><td align="right">2</td><td align="right">002</td><td align="right">02</td><td align="right">00000010</td><td align="center">STX</td><td align="center">&amp;#002;</td><td align="left">Start of Text (正文开始)</td></tr><tr><td align="right">3</td><td align="right">003</td><td align="right">03</td><td align="right">00000011</td><td align="center">ETX</td><td align="center">&amp;#003;</td><td align="left">End of Text (正文结束)</td></tr><tr><td align="right">4</td><td align="right">004</td><td align="right">04</td><td align="right">00000100</td><td align="center">EOT</td><td align="center">&amp;#004;</td><td align="left">End of Transmission (传输结束)</td></tr><tr><td align="right">5</td><td align="right">005</td><td align="right">05</td><td align="right">00000101</td><td align="center">ENQ</td><td align="center">&amp;#005;</td><td align="left">Enquiry (请求)</td></tr><tr><td align="right">6</td><td align="right">006</td><td align="right">06</td><td align="right">00000110</td><td align="center">ACK</td><td align="center">&amp;#006;</td><td align="left">Acknowledgment (收到通知)</td></tr><tr><td align="right">7</td><td align="right">007</td><td align="right">07</td><td align="right">00000111</td><td align="center">BEL</td><td align="center">&amp;#007;</td><td align="left">Bell (响铃)</td></tr><tr><td align="right">8</td><td align="right">010</td><td align="right">08</td><td align="right">00001000</td><td align="center">BS</td><td align="center">&amp;#008;</td><td align="left">Back Space (退格)</td></tr><tr><td align="right">9</td><td align="right">011</td><td align="right">09</td><td align="right">00001001</td><td align="center">HT</td><td align="center">&amp;#009;</td><td align="left">Horizontal Tab (水平制表符)</td></tr><tr><td align="right">10</td><td align="right">012</td><td align="right">0A</td><td align="right">00001010</td><td align="center">LF</td><td align="center">&amp;#010;</td><td align="left">Line Feed (换行键)</td></tr><tr><td align="right">11</td><td align="right">013</td><td align="right">0B</td><td align="right">00001011</td><td align="center">VT</td><td align="center">&amp;#011;</td><td align="left">Vertical Tab (垂直制表符)</td></tr><tr><td align="right">12</td><td align="right">014</td><td align="right">0C</td><td align="right">00001100</td><td align="center">FF</td><td align="center">&amp;#012;</td><td align="left">Form Feed (换页键)</td></tr><tr><td align="right">13</td><td align="right">015</td><td align="right">0D</td><td align="right">00001101</td><td align="center">CR</td><td align="center">&amp;#013;</td><td align="left">Carriage Return (回车键)</td></tr><tr><td align="right">14</td><td align="right">016</td><td align="right">0E</td><td align="right">00001110</td><td align="center">SO</td><td align="center">&amp;#014;</td><td align="left">Shift Out / X-On (不用切换)</td></tr><tr><td align="right">15</td><td align="right">017</td><td align="right">0F</td><td align="right">00001111</td><td align="center">SI</td><td align="center">&amp;#015;</td><td align="left">Shift In / X-Off (启用切换)</td></tr><tr><td align="right">16</td><td align="right">020</td><td align="right">10</td><td align="right">00010000</td><td align="center">DLE</td><td align="center">&amp;#016;</td><td align="left">Data Line Escape (数据链路转义)</td></tr><tr><td align="right">17</td><td align="right">021</td><td align="right">11</td><td align="right">00010001</td><td align="center">DC1</td><td align="center">&amp;#017;</td><td align="left">Device Control 1 (设备控制1)</td></tr><tr><td align="right">18</td><td align="right">022</td><td align="right">12</td><td align="right">00010010</td><td align="center">DC2</td><td align="center">&amp;#018;</td><td align="left">Device Control 2 (设备控制2)</td></tr><tr><td align="right">19</td><td align="right">023</td><td align="right">13</td><td align="right">00010011</td><td align="center">DC3</td><td align="center">&amp;#019;</td><td align="left">Device Control 3 (设备控制3)</td></tr><tr><td align="right">20</td><td align="right">024</td><td align="right">14</td><td align="right">00010100</td><td align="center">DC4</td><td align="center">&amp;#020;</td><td align="left">Device Control 4 (设备控制4)</td></tr><tr><td align="right">21</td><td align="right">025</td><td align="right">15</td><td align="right">00010101</td><td align="center">NAK</td><td align="center">&amp;#021;</td><td align="left">Negative Acknowledgement (拒绝接收)</td></tr><tr><td align="right">22</td><td align="right">026</td><td align="right">16</td><td align="right">00010110</td><td align="center">SYN</td><td align="center">&amp;#022;</td><td align="left">Synchronous Idle (同步空闲)</td></tr><tr><td align="right">23</td><td align="right">027</td><td align="right">17</td><td align="right">00010111</td><td align="center">ETB</td><td align="center">&amp;#023;</td><td align="left">End of Transmit Block (传输块结束)</td></tr><tr><td align="right">24</td><td align="right">030</td><td align="right">18</td><td align="right">00011000</td><td align="center">CAN</td><td align="center">&amp;#024;</td><td align="left">Cancel (取消)</td></tr><tr><td align="right">25</td><td align="right">031</td><td align="right">19</td><td align="right">00011001</td><td align="center">EM</td><td align="center">&amp;#025;</td><td align="left">End of Medium (介质中断)</td></tr><tr><td align="right">26</td><td align="right">032</td><td align="right">1A</td><td align="right">00011010</td><td align="center">SUB</td><td align="center">&amp;#026;</td><td align="left">Substitute (替补)</td></tr><tr><td align="right">27</td><td align="right">033</td><td align="right">1B</td><td align="right">00011011</td><td align="center">ESC</td><td align="center">&amp;#027;</td><td align="left">Escape (溢出)</td></tr><tr><td align="right">28</td><td align="right">034</td><td align="right">1C</td><td align="right">00011100</td><td align="center">FS</td><td align="center">&amp;#028;</td><td align="left">File Separator (文件分割符)</td></tr><tr><td align="right">29</td><td align="right">035</td><td align="right">1D</td><td align="right">00011101</td><td align="center">GS</td><td align="center">&amp;#029;</td><td align="left">Group Separator (分组符)</td></tr><tr><td align="right">30</td><td align="right">036</td><td align="right">1E</td><td align="right">00011110</td><td align="center">RS</td><td align="center">&amp;#030;</td><td align="left">Record Separator (记录分离符)</td></tr><tr><td align="right">31</td><td align="right">037</td><td align="right">1F</td><td align="right">00011111</td><td align="center">US</td><td align="center">&amp;#031;</td><td align="left">Unit Separator (单元分隔符)</td></tr><tr><td align="right">32</td><td align="right">040</td><td align="right">20</td><td align="right">00100000</td><td align="center"></td><td align="center">&amp;#32;</td><td align="left">Space (空格)</td></tr><tr><td align="right">33</td><td align="right">041</td><td align="right">21</td><td align="right">00100001</td><td align="center">!</td><td align="center">&amp;#33;</td><td align="left">Exclamation mark</td></tr><tr><td align="right">34</td><td align="right">042</td><td align="right">22</td><td align="right">00100010</td><td align="center">“</td><td align="center">&amp;#34;</td><td align="left">Double quotes</td></tr><tr><td align="right">35</td><td align="right">043</td><td align="right">23</td><td align="right">00100011</td><td align="center">#</td><td align="center">&amp;#35;</td><td align="left">Number</td></tr><tr><td align="right">36</td><td align="right">044</td><td align="right">24</td><td align="right">00100100</td><td align="center">$</td><td align="center">&amp;#36;</td><td align="left">Dollar</td></tr><tr><td align="right">37</td><td align="right">045</td><td align="right">25</td><td align="right">00100101</td><td align="center">%</td><td align="center">&amp;#37;</td><td align="left">Procenttecken</td></tr><tr><td align="right">38</td><td align="right">046</td><td align="right">26</td><td align="right">00100110</td><td align="center">&amp;</td><td align="center">&amp;#38;</td><td align="left">Ampersand</td></tr><tr><td align="right">39</td><td align="right">047</td><td align="right">27</td><td align="right">00100111</td><td align="center">‘</td><td align="center">&amp;#39;</td><td align="left">Single quote</td></tr><tr><td align="right">40</td><td align="right">050</td><td align="right">28</td><td align="right">00101000</td><td align="center">(</td><td align="center">&amp;#40;</td><td align="left">Open parenthesis</td></tr><tr><td align="right">41</td><td align="right">051</td><td align="right">29</td><td align="right">00101001</td><td align="center">)</td><td align="center">&amp;#41;</td><td align="left">Close parenthesis</td></tr><tr><td align="right">42</td><td align="right">052</td><td align="right">2A</td><td align="right">00101010</td><td align="center">*</td><td align="center">&amp;#42;</td><td align="left">Asterisk</td></tr><tr><td align="right">43</td><td align="right">053</td><td align="right">2B</td><td align="right">00101011</td><td align="center">+</td><td align="center">&amp;#43;</td><td align="left">Plus</td></tr><tr><td align="right">44</td><td align="right">054</td><td align="right">2C</td><td align="right">00101100</td><td align="center">,</td><td align="center">&amp;#44;</td><td align="left">Comma</td></tr><tr><td align="right">45</td><td align="right">055</td><td align="right">2D</td><td align="right">00101101</td><td align="center">-</td><td align="center">&amp;#45;</td><td align="left">Hyphen</td></tr><tr><td align="right">46</td><td align="right">056</td><td align="right">2E</td><td align="right">00101110</td><td align="center">.</td><td align="center">&amp;#46;</td><td align="left">Period, dot or full stop</td></tr><tr><td align="right">47</td><td align="right">057</td><td align="right">2F</td><td align="right">00101111</td><td align="center">/</td><td align="center">&amp;#47;</td><td align="left">Slash or divide</td></tr><tr><td align="right">48</td><td align="right">060</td><td align="right">30</td><td align="right">00110000</td><td align="center">0</td><td align="center">&amp;#48;</td><td align="left">Zero</td></tr><tr><td align="right">49</td><td align="right">061</td><td align="right">31</td><td align="right">00110001</td><td align="center">1</td><td align="center">&amp;#49;</td><td align="left">One</td></tr><tr><td align="right">50</td><td align="right">062</td><td align="right">32</td><td align="right">00110010</td><td align="center">2</td><td align="center">&amp;#50;</td><td align="left">Two</td></tr><tr><td align="right">51</td><td align="right">063</td><td align="right">33</td><td align="right">00110011</td><td align="center">3</td><td align="center">&amp;#51;</td><td align="left">Three</td></tr><tr><td align="right">52</td><td align="right">064</td><td align="right">34</td><td align="right">00110100</td><td align="center">4</td><td align="center">&amp;#52;</td><td align="left">Four</td></tr><tr><td align="right">53</td><td align="right">065</td><td align="right">35</td><td align="right">00110101</td><td align="center">5</td><td align="center">&amp;#53;</td><td align="left">Five</td></tr><tr><td align="right">54</td><td align="right">066</td><td align="right">36</td><td align="right">00110110</td><td align="center">6</td><td align="center">&amp;#54;</td><td align="left">Six</td></tr><tr><td align="right">55</td><td align="right">067</td><td align="right">37</td><td align="right">00110111</td><td align="center">7</td><td align="center">&amp;#55;</td><td align="left">Seven</td></tr><tr><td align="right">56</td><td align="right">070</td><td align="right">38</td><td align="right">00111000</td><td align="center">8</td><td align="center">&amp;#56;</td><td align="left">Eight</td></tr><tr><td align="right">57</td><td align="right">071</td><td align="right">39</td><td align="right">00111001</td><td align="center">9</td><td align="center">&amp;#57;</td><td align="left">Nine</td></tr><tr><td align="right">58</td><td align="right">072</td><td align="right">3A</td><td align="right">00111010</td><td align="center">:</td><td align="center">&amp;#58;</td><td align="left">Colon</td></tr><tr><td align="right">59</td><td align="right">073</td><td align="right">3B</td><td align="right">00111011</td><td align="center">;</td><td align="center">&amp;#59;</td><td align="left">Semicolon</td></tr><tr><td align="right">60</td><td align="right">074</td><td align="right">3C</td><td align="right">00111100</td><td align="center">&lt;</td><td align="center">&amp;#60;</td><td align="left">Less than</td></tr><tr><td align="right">61</td><td align="right">075</td><td align="right">3D</td><td align="right">00111101</td><td align="center">=</td><td align="center">&amp;#61;</td><td align="left">Equals</td></tr><tr><td align="right">62</td><td align="right">076</td><td align="right">3E</td><td align="right">00111110</td><td align="center">&gt;</td><td align="center">&amp;#62;</td><td align="left">Greater than</td></tr><tr><td align="right">63</td><td align="right">077</td><td align="right">3F</td><td align="right">00111111</td><td align="center">?</td><td align="center">&amp;#63;</td><td align="left">Question mark</td></tr><tr><td align="right">64</td><td align="right">100</td><td align="right">40</td><td align="right">01000000</td><td align="center">@</td><td align="center">&amp;#64;</td><td align="left">At symbol</td></tr><tr><td align="right">65</td><td align="right">101</td><td align="right">41</td><td align="right">01000001</td><td align="center">A</td><td align="center">&amp;#65;</td><td align="left">Uppercase A</td></tr><tr><td align="right">66</td><td align="right">102</td><td align="right">42</td><td align="right">01000010</td><td align="center">B</td><td align="center">&amp;#66;</td><td align="left">Uppercase B</td></tr><tr><td align="right">67</td><td align="right">103</td><td align="right">43</td><td align="right">01000011</td><td align="center">C</td><td align="center">&amp;#67;</td><td align="left">Uppercase C</td></tr><tr><td align="right">68</td><td align="right">104</td><td align="right">44</td><td align="right">01000100</td><td align="center">D</td><td align="center">&amp;#68;</td><td align="left">Uppercase D</td></tr><tr><td align="right">69</td><td align="right">105</td><td align="right">45</td><td align="right">01000101</td><td align="center">E</td><td align="center">&amp;#69;</td><td align="left">Uppercase E</td></tr><tr><td align="right">70</td><td align="right">106</td><td align="right">46</td><td align="right">01000110</td><td align="center">F</td><td align="center">&amp;#70;</td><td align="left">Uppercase F</td></tr><tr><td align="right">71</td><td align="right">107</td><td align="right">47</td><td align="right">01000111</td><td align="center">G</td><td align="center">&amp;#71;</td><td align="left">Uppercase G</td></tr><tr><td align="right">72</td><td align="right">110</td><td align="right">48</td><td align="right">01001000</td><td align="center">H</td><td align="center">&amp;#72;</td><td align="left">Uppercase H</td></tr><tr><td align="right">73</td><td align="right">111</td><td align="right">49</td><td align="right">01001001</td><td align="center">I</td><td align="center">&amp;#73;</td><td align="left">Uppercase I</td></tr><tr><td align="right">74</td><td align="right">112</td><td align="right">4A</td><td align="right">01001010</td><td align="center">J</td><td align="center">&amp;#74;</td><td align="left">Uppercase J</td></tr><tr><td align="right">75</td><td align="right">113</td><td align="right">4B</td><td align="right">01001011</td><td align="center">K</td><td align="center">&amp;#75;</td><td align="left">Uppercase K</td></tr><tr><td align="right">76</td><td align="right">114</td><td align="right">4C</td><td align="right">01001100</td><td align="center">L</td><td align="center">&amp;#76;</td><td align="left">Uppercase L</td></tr><tr><td align="right">77</td><td align="right">115</td><td align="right">4D</td><td align="right">01001101</td><td align="center">M</td><td align="center">&amp;#77;</td><td align="left">Uppercase M</td></tr><tr><td align="right">78</td><td align="right">116</td><td align="right">4E</td><td align="right">01001110</td><td align="center">N</td><td align="center">&amp;#78;</td><td align="left">Uppercase N</td></tr><tr><td align="right">79</td><td align="right">117</td><td align="right">4F</td><td align="right">01001111</td><td align="center">O</td><td align="center">&amp;#79;</td><td align="left">Uppercase O</td></tr><tr><td align="right">80</td><td align="right">120</td><td align="right">50</td><td align="right">01010000</td><td align="center">P</td><td align="center">&amp;#80;</td><td align="left">Uppercase P</td></tr><tr><td align="right">81</td><td align="right">121</td><td align="right">51</td><td align="right">01010001</td><td align="center">Q</td><td align="center">&amp;#81;</td><td align="left">Uppercase Q</td></tr><tr><td align="right">82</td><td align="right">122</td><td align="right">52</td><td align="right">01010010</td><td align="center">R</td><td align="center">&amp;#82;</td><td align="left">Uppercase R</td></tr><tr><td align="right">83</td><td align="right">123</td><td align="right">53</td><td align="right">01010011</td><td align="center">S</td><td align="center">&amp;#83;</td><td align="left">Uppercase S</td></tr><tr><td align="right">84</td><td align="right">124</td><td align="right">54</td><td align="right">01010100</td><td align="center">T</td><td align="center">&amp;#84;</td><td align="left">Uppercase T</td></tr><tr><td align="right">85</td><td align="right">125</td><td align="right">55</td><td align="right">01010101</td><td align="center">U</td><td align="center">&amp;#85;</td><td align="left">Uppercase U</td></tr><tr><td align="right">86</td><td align="right">126</td><td align="right">56</td><td align="right">01010110</td><td align="center">V</td><td align="center">&amp;#86;</td><td align="left">Uppercase V</td></tr><tr><td align="right">87</td><td align="right">127</td><td align="right">57</td><td align="right">01010111</td><td align="center">W</td><td align="center">&amp;#87;</td><td align="left">Uppercase W</td></tr><tr><td align="right">88</td><td align="right">130</td><td align="right">58</td><td align="right">01011000</td><td align="center">X</td><td align="center">&amp;#88;</td><td align="left">Uppercase X</td></tr><tr><td align="right">89</td><td align="right">131</td><td align="right">59</td><td align="right">01011001</td><td align="center">Y</td><td align="center">&amp;#89;</td><td align="left">Uppercase Y</td></tr><tr><td align="right">90</td><td align="right">132</td><td align="right">5A</td><td align="right">01011010</td><td align="center">Z</td><td align="center">&amp;#90;</td><td align="left">Uppercase Z</td></tr><tr><td align="right">91</td><td align="right">133</td><td align="right">5B</td><td align="right">01011011</td><td align="center">[</td><td align="center">&amp;#91;</td><td align="left">Opening bracket</td></tr><tr><td align="right">92</td><td align="right">134</td><td align="right">5C</td><td align="right">01011100</td><td align="center">\</td><td align="center">&amp;#92;</td><td align="left">Backslash</td></tr><tr><td align="right">93</td><td align="right">135</td><td align="right">5D</td><td align="right">01011101</td><td align="center">]</td><td align="center">&amp;#93;</td><td align="left">Closing bracket</td></tr><tr><td align="right">94</td><td align="right">136</td><td align="right">5E</td><td align="right">01011110</td><td align="center">^</td><td align="center">&amp;#94;</td><td align="left">Caret - circumflex</td></tr><tr><td align="right">95</td><td align="right">137</td><td align="right">5F</td><td align="right">01011111</td><td align="center">_</td><td align="center">&amp;#95;</td><td align="left">Underscore</td></tr><tr><td align="right">96</td><td align="right">140</td><td align="right">60</td><td align="right">01100000</td><td align="center">`</td><td align="center">&amp;#96;</td><td align="left">Grave accent</td></tr><tr><td align="right">97</td><td align="right">141</td><td align="right">61</td><td align="right">01100001</td><td align="center">a</td><td align="center">&amp;#97;</td><td align="left">Lowercase a</td></tr><tr><td align="right">98</td><td align="right">142</td><td align="right">62</td><td align="right">01100010</td><td align="center">b</td><td align="center">&amp;#98;</td><td align="left">Lowercase b</td></tr><tr><td align="right">99</td><td align="right">143</td><td align="right">63</td><td align="right">01100011</td><td align="center">c</td><td align="center">&amp;#99;</td><td align="left">Lowercase c</td></tr><tr><td align="right">100</td><td align="right">144</td><td align="right">64</td><td align="right">01100100</td><td align="center">d</td><td align="center">&amp;#100;</td><td align="left">Lowercase d</td></tr><tr><td align="right">101</td><td align="right">145</td><td align="right">65</td><td align="right">01100101</td><td align="center">e</td><td align="center">&amp;#101;</td><td align="left">Lowercase e</td></tr><tr><td align="right">102</td><td align="right">146</td><td align="right">66</td><td align="right">01100110</td><td align="center">f</td><td align="center">&amp;#102;</td><td align="left">Lowercase f</td></tr><tr><td align="right">103</td><td align="right">147</td><td align="right">67</td><td align="right">01100111</td><td align="center">g</td><td align="center">&amp;#103;</td><td align="left">Lowercase g</td></tr><tr><td align="right">104</td><td align="right">150</td><td align="right">68</td><td align="right">01101000</td><td align="center">h</td><td align="center">&amp;#104;</td><td align="left">Lowercase h</td></tr><tr><td align="right">105</td><td align="right">151</td><td align="right">69</td><td align="right">01101001</td><td align="center">i</td><td align="center">&amp;#105;</td><td align="left">Lowercase i</td></tr><tr><td align="right">106</td><td align="right">152</td><td align="right">6A</td><td align="right">01101010</td><td align="center">j</td><td align="center">&amp;#106;</td><td align="left">Lowercase j</td></tr><tr><td align="right">107</td><td align="right">153</td><td align="right">6B</td><td align="right">01101011</td><td align="center">k</td><td align="center">&amp;#107;</td><td align="left">Lowercase k</td></tr><tr><td align="right">108</td><td align="right">154</td><td align="right">6C</td><td align="right">01101100</td><td align="center">l</td><td align="center">&amp;#108;</td><td align="left">Lowercase l</td></tr><tr><td align="right">109</td><td align="right">155</td><td align="right">6D</td><td align="right">01101101</td><td align="center">m</td><td align="center">&amp;#109;</td><td align="left">Lowercase m</td></tr><tr><td align="right">110</td><td align="right">156</td><td align="right">6E</td><td align="right">01101110</td><td align="center">n</td><td align="center">&amp;#110;</td><td align="left">Lowercase n</td></tr><tr><td align="right">111</td><td align="right">157</td><td align="right">6F</td><td align="right">01101111</td><td align="center">o</td><td align="center">&amp;#111;</td><td align="left">Lowercase o</td></tr><tr><td align="right">112</td><td align="right">160</td><td align="right">70</td><td align="right">01110000</td><td align="center">p</td><td align="center">&amp;#112;</td><td align="left">Lowercase p</td></tr><tr><td align="right">113</td><td align="right">161</td><td align="right">71</td><td align="right">01110001</td><td align="center">q</td><td align="center">&amp;#113;</td><td align="left">Lowercase q</td></tr><tr><td align="right">114</td><td align="right">162</td><td align="right">72</td><td align="right">01110010</td><td align="center">r</td><td align="center">&amp;#114;</td><td align="left">Lowercase r</td></tr><tr><td align="right">115</td><td align="right">163</td><td align="right">73</td><td align="right">01110011</td><td align="center">s</td><td align="center">&amp;#115;</td><td align="left">Lowercase s</td></tr><tr><td align="right">116</td><td align="right">164</td><td align="right">74</td><td align="right">01110100</td><td align="center">t</td><td align="center">&amp;#116;</td><td align="left">Lowercase t</td></tr><tr><td align="right">117</td><td align="right">165</td><td align="right">75</td><td align="right">01110101</td><td align="center">u</td><td align="center">&amp;#117;</td><td align="left">Lowercase u</td></tr><tr><td align="right">118</td><td align="right">166</td><td align="right">76</td><td align="right">01110110</td><td align="center">v</td><td align="center">&amp;#118;</td><td align="left">Lowercase v</td></tr><tr><td align="right">119</td><td align="right">167</td><td align="right">77</td><td align="right">01110111</td><td align="center">w</td><td align="center">&amp;#119;</td><td align="left">Lowercase w</td></tr><tr><td align="right">120</td><td align="right">170</td><td align="right">78</td><td align="right">01111000</td><td align="center">x</td><td align="center">&amp;#120;</td><td align="left">Lowercase x</td></tr><tr><td align="right">121</td><td align="right">171</td><td align="right">79</td><td align="right">01111001</td><td align="center">y</td><td align="center">&amp;#121;</td><td align="left">Lowercase y</td></tr><tr><td align="right">122</td><td align="right">172</td><td align="right">7A</td><td align="right">01111010</td><td align="center">z</td><td align="center">&amp;#122;</td><td align="left">Lowercase z</td></tr><tr><td align="right">123</td><td align="right">173</td><td align="right">7B</td><td align="right">01111011</td><td align="center">{</td><td align="center">&amp;#123;</td><td align="left">Opening brace</td></tr><tr><td align="right">124</td><td align="right">174</td><td align="right">7C</td><td align="right">01111100</td><td align="center">|</td><td align="center">&amp;#124;</td><td align="left">Vertical bar</td></tr><tr><td align="right">125</td><td align="right">175</td><td align="right">7D</td><td align="right">01111101</td><td align="center">}</td><td align="center">&amp;#125;</td><td align="left">Closing brace</td></tr><tr><td align="right">126</td><td align="right">176</td><td align="right">7E</td><td align="right">01111110</td><td align="center">~</td><td align="center">&amp;#126;</td><td align="left">Equivalency sign (tilde)</td></tr><tr><td align="right">127</td><td align="right">177</td><td align="right">7F</td><td align="right">01111111</td><td align="center"></td><td align="center">&amp;#127;</td><td align="left">Delete</td></tr></tbody></table><h3 id="5-2-拓展ASCII码："><a href="#5-2-拓展ASCII码：" class="headerlink" title="5.2 拓展ASCII码："></a>5.2 拓展ASCII码：</h3><table><thead><tr><th align="right">DEC</th><th align="right">OCT</th><th align="right">HEX</th><th align="right">BIN</th><th align="center">缩写/符号</th><th align="center">HTML实体</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right">128</td><td align="right">200</td><td align="right">80</td><td align="right">10000000</td><td align="center">€</td><td align="center">&amp;#128;</td><td align="left">Euro sign</td></tr><tr><td align="right">129</td><td align="right">201</td><td align="right">81</td><td align="right">10000001</td><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="right">130</td><td align="right">202</td><td align="right">82</td><td align="right">10000010</td><td align="center">‚</td><td align="center">&amp;#130;</td><td align="left">Single low-9 quotation mark</td></tr><tr><td align="right">131</td><td align="right">203</td><td align="right">83</td><td align="right">10000011</td><td align="center">ƒ</td><td align="center">&amp;#131;</td><td align="left">Latin small letter f with hook</td></tr><tr><td align="right">132</td><td align="right">204</td><td align="right">84</td><td align="right">10000100</td><td align="center">„</td><td align="center">&amp;#132;</td><td align="left">Double low-9 quotation mark</td></tr><tr><td align="right">133</td><td align="right">205</td><td align="right">85</td><td align="right">10000101</td><td align="center">…</td><td align="center">&amp;#133;</td><td align="left">Horizontal ellipsis</td></tr><tr><td align="right">134</td><td align="right">206</td><td align="right">86</td><td align="right">10000110</td><td align="center">†</td><td align="center">&amp;#134;</td><td align="left">Dagger</td></tr><tr><td align="right">135</td><td align="right">207</td><td align="right">87</td><td align="right">10000111</td><td align="center">‡</td><td align="center">&amp;#135;</td><td align="left">Double dagger</td></tr><tr><td align="right">136</td><td align="right">210</td><td align="right">88</td><td align="right">10001000</td><td align="center">ˆ</td><td align="center">&amp;#136;</td><td align="left">Modifier letter circumflex accent</td></tr><tr><td align="right">137</td><td align="right">211</td><td align="right">89</td><td align="right">10001001</td><td align="center">‰</td><td align="center">&amp;#137;</td><td align="left">Per mille sign</td></tr><tr><td align="right">138</td><td align="right">212</td><td align="right">8A</td><td align="right">10001010</td><td align="center">Š</td><td align="center">&amp;#138;</td><td align="left">Latin capital letter S with caron</td></tr><tr><td align="right">139</td><td align="right">213</td><td align="right">8B</td><td align="right">10001011</td><td align="center">‹</td><td align="center">&amp;#139;</td><td align="left">Single left-pointing angle quotation</td></tr><tr><td align="right">140</td><td align="right">214</td><td align="right">8C</td><td align="right">10001100</td><td align="center">Œ</td><td align="center">&amp;#140;</td><td align="left">Latin capital ligature OE</td></tr><tr><td align="right">141</td><td align="right">215</td><td align="right">8D</td><td align="right">10001101</td><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="right">142</td><td align="right">216</td><td align="right">8E</td><td align="right">10001110</td><td align="center">Ž</td><td align="center">&amp;#142;</td><td align="left">Latin capital letter Z with caron</td></tr><tr><td align="right">143</td><td align="right">217</td><td align="right">8F</td><td align="right">10001111</td><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="right">144</td><td align="right">220</td><td align="right">90</td><td align="right">10010000</td><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="right">145</td><td align="right">221</td><td align="right">91</td><td align="right">10010001</td><td align="center">‘</td><td align="center">&amp;#145;</td><td align="left">Left single quotation mark</td></tr><tr><td align="right">146</td><td align="right">222</td><td align="right">92</td><td align="right">10010010</td><td align="center">’</td><td align="center">&amp;#146;</td><td align="left">Right single quotation mark</td></tr><tr><td align="right">147</td><td align="right">223</td><td align="right">93</td><td align="right">10010011</td><td align="center">“</td><td align="center">&amp;#147;</td><td align="left">Left double quotation mark</td></tr><tr><td align="right">148</td><td align="right">224</td><td align="right">94</td><td align="right">10010100</td><td align="center">”</td><td align="center">&amp;#148;</td><td align="left">Right double quotation mark</td></tr><tr><td align="right">149</td><td align="right">225</td><td align="right">95</td><td align="right">10010101</td><td align="center">•</td><td align="center">&amp;#149;</td><td align="left">Bullet</td></tr><tr><td align="right">150</td><td align="right">226</td><td align="right">96</td><td align="right">10010110</td><td align="center">–</td><td align="center">&amp;#150;</td><td align="left">En dash</td></tr><tr><td align="right">151</td><td align="right">227</td><td align="right">97</td><td align="right">10010111</td><td align="center">—</td><td align="center">&amp;#151;</td><td align="left">Em dash</td></tr><tr><td align="right">152</td><td align="right">230</td><td align="right">98</td><td align="right">10011000</td><td align="center">˜</td><td align="center">&amp;#152;</td><td align="left">Small tilde</td></tr><tr><td align="right">153</td><td align="right">231</td><td align="right">99</td><td align="right">10011001</td><td align="center">™</td><td align="center">&amp;#153;</td><td align="left">Trade mark sign</td></tr><tr><td align="right">154</td><td align="right">232</td><td align="right">9A</td><td align="right">10011010</td><td align="center">š</td><td align="center">&amp;#154;</td><td align="left">Latin small letter S with caron</td></tr><tr><td align="right">155</td><td align="right">233</td><td align="right">9B</td><td align="right">10011011</td><td align="center">›</td><td align="center">&amp;#155;</td><td align="left">Single right-pointing angle quotation mark</td></tr><tr><td align="right">156</td><td align="right">234</td><td align="right">9C</td><td align="right">10011100</td><td align="center">œ</td><td align="center">&amp;#156;</td><td align="left">Latin small ligature oe</td></tr><tr><td align="right">157</td><td align="right">235</td><td align="right">9D</td><td align="right">10011101</td><td align="center"></td><td align="center"></td><td align="left"></td></tr><tr><td align="right">158</td><td align="right">236</td><td align="right">9E</td><td align="right">10011110</td><td align="center">ž</td><td align="center">&amp;#158;</td><td align="left">Latin small letter z with caron</td></tr><tr><td align="right">159</td><td align="right">237</td><td align="right">9F</td><td align="right">10011111</td><td align="center">Ÿ</td><td align="center">&amp;#159;</td><td align="left">Latin capital letter Y with diaeresis</td></tr><tr><td align="right">160</td><td align="right">240</td><td align="right">A0</td><td align="right">10100000</td><td align="center"></td><td align="center">&amp;#160;</td><td align="left">Non-breaking space</td></tr><tr><td align="right">161</td><td align="right">241</td><td align="right">A1</td><td align="right">10100001</td><td align="center">¡</td><td align="center">&amp;#161;</td><td align="left">Inverted exclamation mark</td></tr><tr><td align="right">162</td><td align="right">242</td><td align="right">A2</td><td align="right">10100010</td><td align="center">¢</td><td align="center">&amp;#162;</td><td align="left">Cent sign</td></tr><tr><td align="right">163</td><td align="right">243</td><td align="right">A3</td><td align="right">10100011</td><td align="center">£</td><td align="center">&amp;#163;</td><td align="left">Pound sign</td></tr><tr><td align="right">164</td><td align="right">244</td><td align="right">A4</td><td align="right">10100100</td><td align="center">¤</td><td align="center">&amp;#164;</td><td align="left">Currency sign</td></tr><tr><td align="right">165</td><td align="right">245</td><td align="right">A5</td><td align="right">10100101</td><td align="center">¥</td><td align="center">&amp;#165;</td><td align="left">Yen sign</td></tr><tr><td align="right">166</td><td align="right">246</td><td align="right">A6</td><td align="right">10100110</td><td align="center">¦</td><td align="center">&amp;#166;</td><td align="left">Pipe, Broken vertical bar</td></tr><tr><td align="right">167</td><td align="right">247</td><td align="right">A7</td><td align="right">10100111</td><td align="center">§</td><td align="center">&amp;#167;</td><td align="left">Section sign</td></tr><tr><td align="right">168</td><td align="right">250</td><td align="right">A8</td><td align="right">10101000</td><td align="center">¨</td><td align="center">&amp;#168;</td><td align="left">Spacing diaeresis - umlaut</td></tr><tr><td align="right">169</td><td align="right">251</td><td align="right">A9</td><td align="right">10101001</td><td align="center">©</td><td align="center">&amp;#169;</td><td align="left">Copyright sign</td></tr><tr><td align="right">170</td><td align="right">252</td><td align="right">AA</td><td align="right">10101010</td><td align="center">ª</td><td align="center">&amp;#170;</td><td align="left">Feminine ordinal indicator</td></tr><tr><td align="right">171</td><td align="right">253</td><td align="right">AB</td><td align="right">10101011</td><td align="center">«</td><td align="center">&amp;#171;</td><td align="left">Left double angle quotes</td></tr><tr><td align="right">172</td><td align="right">254</td><td align="right">AC</td><td align="right">10101100</td><td align="center">¬</td><td align="center">&amp;#172;</td><td align="left">Not sign</td></tr><tr><td align="right">173</td><td align="right">255</td><td align="right">AD</td><td align="right">10101101</td><td align="center">­</td><td align="center">&amp;#173;</td><td align="left">Soft hyphen</td></tr><tr><td align="right">174</td><td align="right">256</td><td align="right">AE</td><td align="right">10101110</td><td align="center">®</td><td align="center">&amp;#174;</td><td align="left">Registered trade mark sign</td></tr><tr><td align="right">175</td><td align="right">257</td><td align="right">AF</td><td align="right">10101111</td><td align="center">¯</td><td align="center">&amp;#175;</td><td align="left">Spacing macron - overline</td></tr><tr><td align="right">176</td><td align="right">260</td><td align="right">B0</td><td align="right">10110000</td><td align="center">°</td><td align="center">&amp;#176;</td><td align="left">Degree sign</td></tr><tr><td align="right">177</td><td align="right">261</td><td align="right">B1</td><td align="right">10110001</td><td align="center">±</td><td align="center">&amp;#177;</td><td align="left">Plus-or-minus sign</td></tr><tr><td align="right">178</td><td align="right">262</td><td align="right">B2</td><td align="right">10110010</td><td align="center">²</td><td align="center">&amp;#178;</td><td align="left">Superscript two - squared</td></tr><tr><td align="right">179</td><td align="right">263</td><td align="right">B3</td><td align="right">10110011</td><td align="center">³</td><td align="center">&amp;#179;</td><td align="left">Superscript three - cubed</td></tr><tr><td align="right">180</td><td align="right">264</td><td align="right">B4</td><td align="right">10110100</td><td align="center">´</td><td align="center">&amp;#180;</td><td align="left">Acute accent - spacing acute</td></tr><tr><td align="right">181</td><td align="right">265</td><td align="right">B5</td><td align="right">10110101</td><td align="center">µ</td><td align="center">&amp;#181;</td><td align="left">Micro sign</td></tr><tr><td align="right">182</td><td align="right">266</td><td align="right">B6</td><td align="right">10110110</td><td align="center">¶</td><td align="center">&amp;#182;</td><td align="left">Pilcrow sign - paragraph sign</td></tr><tr><td align="right">183</td><td align="right">267</td><td align="right">B7</td><td align="right">10110111</td><td align="center">·</td><td align="center">&amp;#183;</td><td align="left">Middle dot - Georgian comma</td></tr><tr><td align="right">184</td><td align="right">270</td><td align="right">B8</td><td align="right">10111000</td><td align="center">¸</td><td align="center">&amp;#184;</td><td align="left">Spacing cedilla</td></tr><tr><td align="right">185</td><td align="right">271</td><td align="right">B9</td><td align="right">10111001</td><td align="center">¹</td><td align="center">&amp;#185;</td><td align="left">Superscript one</td></tr><tr><td align="right">186</td><td align="right">272</td><td align="right">BA</td><td align="right">10111010</td><td align="center">º</td><td align="center">&amp;#186;</td><td align="left">Masculine ordinal indicator</td></tr><tr><td align="right">187</td><td align="right">273</td><td align="right">BB</td><td align="right">10111011</td><td align="center">»</td><td align="center">&amp;#187;</td><td align="left">Right double angle quotes</td></tr><tr><td align="right">188</td><td align="right">274</td><td align="right">BC</td><td align="right">10111100</td><td align="center">¼</td><td align="center">&amp;#188;</td><td align="left">Fraction one quarter</td></tr><tr><td align="right">189</td><td align="right">275</td><td align="right">BD</td><td align="right">10111101</td><td align="center">½</td><td align="center">&amp;#189;</td><td align="left">Fraction one half</td></tr><tr><td align="right">190</td><td align="right">276</td><td align="right">BE</td><td align="right">10111110</td><td align="center">¾</td><td align="center">&amp;#190;</td><td align="left">Fraction three quarters</td></tr><tr><td align="right">191</td><td align="right">277</td><td align="right">BF</td><td align="right">10111111</td><td align="center">¿</td><td align="center">&amp;#191;</td><td align="left">Inverted question mark</td></tr><tr><td align="right">192</td><td align="right">300</td><td align="right">C0</td><td align="right">11000000</td><td align="center">À</td><td align="center">&amp;#192;</td><td align="left">Latin capital letter A with grave</td></tr><tr><td align="right">193</td><td align="right">301</td><td align="right">C1</td><td align="right">11000001</td><td align="center">Á</td><td align="center">&amp;#193;</td><td align="left">Latin capital letter A with acute</td></tr><tr><td align="right">194</td><td align="right">302</td><td align="right">C2</td><td align="right">11000010</td><td align="center">Â</td><td align="center">&amp;#194;</td><td align="left">Latin capital letter A with circumflex</td></tr><tr><td align="right">195</td><td align="right">303</td><td align="right">C3</td><td align="right">11000011</td><td align="center">Ã</td><td align="center">&amp;#195;</td><td align="left">Latin capital letter A with tilde</td></tr><tr><td align="right">196</td><td align="right">304</td><td align="right">C4</td><td align="right">11000100</td><td align="center">Ä</td><td align="center">&amp;#196;</td><td align="left">Latin capital letter A with diaeresis</td></tr><tr><td align="right">197</td><td align="right">305</td><td align="right">C5</td><td align="right">11000101</td><td align="center">Å</td><td align="center">&amp;#197;</td><td align="left">Latin capital letter A with ring above</td></tr><tr><td align="right">198</td><td align="right">306</td><td align="right">C6</td><td align="right">11000110</td><td align="center">Æ</td><td align="center">&amp;#198;</td><td align="left">Latin capital letter AE</td></tr><tr><td align="right">199</td><td align="right">307</td><td align="right">C7</td><td align="right">11000111</td><td align="center">Ç</td><td align="center">&amp;#199;</td><td align="left">Latin capital letter C with cedilla</td></tr><tr><td align="right">200</td><td align="right">310</td><td align="right">C8</td><td align="right">11001000</td><td align="center">È</td><td align="center">&amp;#200;</td><td align="left">Latin capital letter E with grave</td></tr><tr><td align="right">201</td><td align="right">311</td><td align="right">C9</td><td align="right">11001001</td><td align="center">É</td><td align="center">&amp;#201;</td><td align="left">Latin capital letter E with acute</td></tr><tr><td align="right">202</td><td align="right">312</td><td align="right">CA</td><td align="right">11001010</td><td align="center">Ê</td><td align="center">&amp;#202;</td><td align="left">Latin capital letter E with circumflex</td></tr><tr><td align="right">203</td><td align="right">313</td><td align="right">CB</td><td align="right">11001011</td><td align="center">Ë</td><td align="center">&amp;#203;</td><td align="left">Latin capital letter E with diaeresis</td></tr><tr><td align="right">204</td><td align="right">314</td><td align="right">CC</td><td align="right">11001100</td><td align="center">Ì</td><td align="center">&amp;#204;</td><td align="left">Latin capital letter I with grave</td></tr><tr><td align="right">205</td><td align="right">315</td><td align="right">CD</td><td align="right">11001101</td><td align="center">Í</td><td align="center">&amp;#205;</td><td align="left">Latin capital letter I with acute</td></tr><tr><td align="right">206</td><td align="right">316</td><td align="right">CE</td><td align="right">11001110</td><td align="center">Î</td><td align="center">&amp;#206;</td><td align="left">Latin capital letter I with circumflex</td></tr><tr><td align="right">207</td><td align="right">317</td><td align="right">CF</td><td align="right">11001111</td><td align="center">Ï</td><td align="center">&amp;#207;</td><td align="left">Latin capital letter I with diaeresis</td></tr><tr><td align="right">208</td><td align="right">320</td><td align="right">D0</td><td align="right">11010000</td><td align="center">Ð</td><td align="center">&amp;#208;</td><td align="left">Latin capital letter ETH</td></tr><tr><td align="right">209</td><td align="right">321</td><td align="right">D1</td><td align="right">11010001</td><td align="center">Ñ</td><td align="center">&amp;#209;</td><td align="left">Latin capital letter N with tilde</td></tr><tr><td align="right">210</td><td align="right">322</td><td align="right">D2</td><td align="right">11010010</td><td align="center">Ò</td><td align="center">&amp;#210;</td><td align="left">Latin capital letter O with grave</td></tr><tr><td align="right">211</td><td align="right">323</td><td align="right">D3</td><td align="right">11010011</td><td align="center">Ó</td><td align="center">&amp;#211;</td><td align="left">Latin capital letter O with acute</td></tr><tr><td align="right">212</td><td align="right">324</td><td align="right">D4</td><td align="right">11010100</td><td align="center">Ô</td><td align="center">&amp;#212;</td><td align="left">Latin capital letter O with circumflex</td></tr><tr><td align="right">213</td><td align="right">325</td><td align="right">D5</td><td align="right">11010101</td><td align="center">Õ</td><td align="center">&amp;#213;</td><td align="left">Latin capital letter O with tilde</td></tr><tr><td align="right">214</td><td align="right">326</td><td align="right">D6</td><td align="right">11010110</td><td align="center">Ö</td><td align="center">&amp;#214;</td><td align="left">Latin capital letter O with diaeresis</td></tr><tr><td align="right">215</td><td align="right">327</td><td align="right">D7</td><td align="right">11010111</td><td align="center">×</td><td align="center">&amp;#215;</td><td align="left">Multiplication sign</td></tr><tr><td align="right">216</td><td align="right">330</td><td align="right">D8</td><td align="right">11011000</td><td align="center">Ø</td><td align="center">&amp;#216;</td><td align="left">Latin capital letter O with slash</td></tr><tr><td align="right">217</td><td align="right">331</td><td align="right">D9</td><td align="right">11011001</td><td align="center">Ù</td><td align="center">&amp;#217;</td><td align="left">Latin capital letter U with grave</td></tr><tr><td align="right">218</td><td align="right">332</td><td align="right">DA</td><td align="right">11011010</td><td align="center">Ú</td><td align="center">&amp;#218;</td><td align="left">Latin capital letter U with acute</td></tr><tr><td align="right">219</td><td align="right">333</td><td align="right">DB</td><td align="right">11011011</td><td align="center">Û</td><td align="center">&amp;#219;</td><td align="left">Latin capital letter U with circumflex</td></tr><tr><td align="right">220</td><td align="right">334</td><td align="right">DC</td><td align="right">11011100</td><td align="center">Ü</td><td align="center">&amp;#220;</td><td align="left">Latin capital letter U with diaeresis</td></tr><tr><td align="right">221</td><td align="right">335</td><td align="right">DD</td><td align="right">11011101</td><td align="center">Ý</td><td align="center">&amp;#221;</td><td align="left">Latin capital letter Y with acute</td></tr><tr><td align="right">222</td><td align="right">336</td><td align="right">DE</td><td align="right">11011110</td><td align="center">Þ</td><td align="center">&amp;#222;</td><td align="left">Latin capital letter THORN</td></tr><tr><td align="right">223</td><td align="right">337</td><td align="right">DF</td><td align="right">11011111</td><td align="center">ß</td><td align="center">&amp;#223;</td><td align="left">Latin small letter sharp s - ess-zed</td></tr><tr><td align="right">224</td><td align="right">340</td><td align="right">E0</td><td align="right">11100000</td><td align="center">à</td><td align="center">&amp;#224;</td><td align="left">Latin small letter a with grave</td></tr><tr><td align="right">225</td><td align="right">341</td><td align="right">E1</td><td align="right">11100001</td><td align="center">á</td><td align="center">&amp;#225;</td><td align="left">Latin small letter a with acute</td></tr><tr><td align="right">226</td><td align="right">342</td><td align="right">E2</td><td align="right">11100010</td><td align="center">â</td><td align="center">&amp;#226;</td><td align="left">Latin small letter a with circumflex</td></tr><tr><td align="right">227</td><td align="right">343</td><td align="right">E3</td><td align="right">11100011</td><td align="center">ã</td><td align="center">&amp;#227;</td><td align="left">Latin small letter a with tilde</td></tr><tr><td align="right">228</td><td align="right">344</td><td align="right">E4</td><td align="right">11100100</td><td align="center">ä</td><td align="center">&amp;#228;</td><td align="left">Latin small letter a with diaeresis</td></tr><tr><td align="right">229</td><td align="right">345</td><td align="right">E5</td><td align="right">11100101</td><td align="center">å</td><td align="center">&amp;#229;</td><td align="left">Latin small letter a with ring above</td></tr><tr><td align="right">230</td><td align="right">346</td><td align="right">E6</td><td align="right">11100110</td><td align="center">æ</td><td align="center">&amp;#230;</td><td align="left">Latin small letter ae</td></tr><tr><td align="right">231</td><td align="right">347</td><td align="right">E7</td><td align="right">11100111</td><td align="center">ç</td><td align="center">&amp;#231;</td><td align="left">Latin small letter c with cedilla</td></tr><tr><td align="right">232</td><td align="right">350</td><td align="right">E8</td><td align="right">11101000</td><td align="center">è</td><td align="center">&amp;#232;</td><td align="left">Latin small letter e with grave</td></tr><tr><td align="right">233</td><td align="right">351</td><td align="right">E9</td><td align="right">11101001</td><td align="center">é</td><td align="center">&amp;#233;</td><td align="left">Latin small letter e with acute</td></tr><tr><td align="right">234</td><td align="right">352</td><td align="right">EA</td><td align="right">11101010</td><td align="center">ê</td><td align="center">&amp;#234;</td><td align="left">Latin small letter e with circumflex</td></tr><tr><td align="right">235</td><td align="right">353</td><td align="right">EB</td><td align="right">11101011</td><td align="center">ë</td><td align="center">&amp;#235;</td><td align="left">Latin small letter e with diaeresis</td></tr><tr><td align="right">236</td><td align="right">354</td><td align="right">EC</td><td align="right">11101100</td><td align="center">ì</td><td align="center">&amp;#236;</td><td align="left">Latin small letter i with grave</td></tr><tr><td align="right">237</td><td align="right">355</td><td align="right">ED</td><td align="right">11101101</td><td align="center">í</td><td align="center">&amp;#237;</td><td align="left">Latin small letter i with acute</td></tr><tr><td align="right">238</td><td align="right">356</td><td align="right">EE</td><td align="right">11101110</td><td align="center">î</td><td align="center">&amp;#238;</td><td align="left">Latin small letter i with circumflex</td></tr><tr><td align="right">239</td><td align="right">357</td><td align="right">EF</td><td align="right">11101111</td><td align="center">ï</td><td align="center">&amp;#239;</td><td align="left">Latin small letter i with diaeresis</td></tr><tr><td align="right">240</td><td align="right">360</td><td align="right">F0</td><td align="right">11110000</td><td align="center">ð</td><td align="center">&amp;#240;</td><td align="left">Latin small letter eth</td></tr><tr><td align="right">241</td><td align="right">361</td><td align="right">F1</td><td align="right">11110001</td><td align="center">ñ</td><td align="center">&amp;#241;</td><td align="left">Latin small letter n with tilde</td></tr><tr><td align="right">242</td><td align="right">362</td><td align="right">F2</td><td align="right">11110010</td><td align="center">ò</td><td align="center">&amp;#242;</td><td align="left">Latin small letter o with grave</td></tr><tr><td align="right">243</td><td align="right">363</td><td align="right">F3</td><td align="right">11110011</td><td align="center">ó</td><td align="center">&amp;#243;</td><td align="left">Latin small letter o with acute</td></tr><tr><td align="right">244</td><td align="right">364</td><td align="right">F4</td><td align="right">11110100</td><td align="center">ô</td><td align="center">&amp;#244;</td><td align="left">Latin small letter o with circumflex</td></tr><tr><td align="right">245</td><td align="right">365</td><td align="right">F5</td><td align="right">11110101</td><td align="center">õ</td><td align="center">&amp;#245;</td><td align="left">Latin small letter o with tilde</td></tr><tr><td align="right">246</td><td align="right">366</td><td align="right">F6</td><td align="right">11110110</td><td align="center">ö</td><td align="center">&amp;#246;</td><td align="left">Latin small letter o with diaeresis</td></tr><tr><td align="right">247</td><td align="right">367</td><td align="right">F7</td><td align="right">11110111</td><td align="center">÷</td><td align="center">&amp;#247;</td><td align="left">Division sign</td></tr><tr><td align="right">248</td><td align="right">370</td><td align="right">F8</td><td align="right">11111000</td><td align="center">ø</td><td align="center">&amp;#248;</td><td align="left">Latin small letter o with slash</td></tr><tr><td align="right">249</td><td align="right">371</td><td align="right">F9</td><td align="right">11111001</td><td align="center">ù</td><td align="center">&amp;#249;</td><td align="left">Latin small letter u with grave</td></tr><tr><td align="right">250</td><td align="right">372</td><td align="right">FA</td><td align="right">11111010</td><td align="center">ú</td><td align="center">&amp;#250;</td><td align="left">Latin small letter u with acute</td></tr><tr><td align="right">251</td><td align="right">373</td><td align="right">FB</td><td align="right">11111011</td><td align="center">û</td><td align="center">&amp;#251;</td><td align="left">Latin small letter u with circumflex</td></tr><tr><td align="right">252</td><td align="right">374</td><td align="right">FC</td><td align="right">11111100</td><td align="center">ü</td><td align="center">&amp;#252;</td><td align="left">Latin small letter u with diaeresis</td></tr><tr><td align="right">253</td><td align="right">375</td><td align="right">FD</td><td align="right">11111101</td><td align="center">ý</td><td align="center">&amp;#253;</td><td align="left">Latin small letter y with acute</td></tr><tr><td align="right">254</td><td align="right">376</td><td align="right">FE</td><td align="right">11111110</td><td align="center">þ</td><td align="center">&amp;#254;</td><td align="left">Latin small letter thorn</td></tr><tr><td align="right">255</td><td align="right">377</td><td align="right">FF</td><td align="right">11111111</td><td align="center">ÿ</td><td align="center">&amp;#255;</td><td align="left">Latin small letter y with diaeresis</td></tr></tbody></table><p>转载于网站：<a href="https://tool.ip138.com/ascii_code/">传送门)</a></p><h2 id="6-BCD-码"><a href="#6-BCD-码" class="headerlink" title="6. BCD 码"></a>6. BCD 码</h2><ul><li>BCD码与二进制无关</li></ul><p>BCD码也称为二进制编码的十进制数，是将十进制数码0—9分别用四位二进制数来表示，这四位二进制数的权从左到右分别展开后为8、4、2、1，故称为8421 BCD码。 只需将十进制数的各位数字用与其对应的一组（4位）二进制数代替即可得到BCD码形式。</p><p>325<sub>D</sub> = 0011 0010 0101 <sub>BCD</sub> </p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/%E7%AC%94%E8%AE%B0&amp;%E5%BF%83%E5%BE%97/BCD%E7%A0%81.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASCII码 </tag>
            
            <tag> 反码 </tag>
            
            <tag> 补码 </tag>
            
            <tag> 原码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端网站收藏</title>
      <link href="/2021/09/07/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
      <url>/2021/09/07/%E6%8A%80%E6%9C%AF%E8%83%96%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="自学前端程序-私藏工具和网站分享"><a href="#自学前端程序-私藏工具和网站分享" class="headerlink" title="自学前端程序 私藏工具和网站分享"></a>自学前端程序 私藏工具和网站分享</h1><p>转载于 B站 宝藏up主 —— <a href="https://space.bilibili.com/165659472/?spm_id_from=333.999.0.0">技术胖</a> 分享收藏夹。</p><h2 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h2><ul><li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a></li><li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li><li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li><li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li><li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li><li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li></ul><h2 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h2><ul><li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li><li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li><li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li><li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li><li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li><li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li><li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li><li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li></ul><h2 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h2><ul><li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li><li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li><li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li><li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li><li><a href="https://visualgo.net/en">算法可视化来源 </a></li><li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li></ul><h2 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h2><ul><li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li><li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li><li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li><li><a href="https://yuchengkai.cn/">前端面试图谱</a></li><li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li></ul><h2 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h2><ul><li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li><li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li><li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li><li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li><li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li><li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li><li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li><li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li><li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li><li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li><li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li><li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li><li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li></ul><h2 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h2><ul><li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li><li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li><li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li><li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li><li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li><li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li><li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li><li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li><li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li></ul><h2 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h2><ul><li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li><li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li><li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li><li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li><li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li><li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li><li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li></ul><h2 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h2><ul><li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li><li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li><li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li><li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li><li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li></ul><h2 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li><li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li><li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li></ul><h2 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h2><ul><li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li><li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li><li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li><li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li><li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li><li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li><li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li></ul><h2 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h2><ul><li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li><li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li></ul><h2 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h2><ul><li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li><li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li><li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li><li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li><li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li><li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li><li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li><li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li><li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li><li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li><li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li></ul><h2 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h2><ul><li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li><li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li><li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li><li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li><li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li></ul><h2 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h2><ul><li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li><li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li><li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li><li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li></ul><h2 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h2><ul><li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li><li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li><li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li><li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li><li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网站资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）SEO</title>
      <link href="/2021/09/02/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89SEO/"/>
      <url>/2021/09/02/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89SEO/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SEO了解"><a href="#1-SEO了解" class="headerlink" title="1. SEO了解"></a>1. <code>SEO</code>了解</h2><h3 id="1-1-SE"><a href="#1-1-SE" class="headerlink" title="1.1 SE"></a>1.1 SE</h3><p>搜索引擎（Search Engine）的缩写。是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，并将相关信息展示给用户的系统。</p><h4 id="1-1-1-SEO-分类"><a href="#1-1-1-SEO-分类" class="headerlink" title="1.1.1 SEO 分类"></a>1.1.1 SEO 分类</h4><h5 id="1-1-1-1-全文搜索引擎"><a href="#1-1-1-1-全文搜索引擎" class="headerlink" title="1.1.1.1 全文搜索引擎"></a>1.1.1.1 全文搜索引擎</h5><ul><li>通过计算机索引程序扫描网页中每个词建立一个索引，当用户查询时，检索程序会根据事前建立的索引进行查询，并将结果反馈给用户。</li><li>全文搜索引擎搜索方法分为按字检索和按词检索。</li><li>举例：谷歌，百度。</li></ul><h5 id="1-1-1-2目录搜索引擎"><a href="#1-1-1-2目录搜索引擎" class="headerlink" title="1.1.1.2目录搜索引擎"></a>1.1.1.2目录搜索引擎</h5><ul><li>以人工或半自动的方式搜集信息，由编辑人员看后，人工进行信息摘要，将信息置于事前确定的分类框架中，这些信息主要面向网站，提供目录浏览服务和章节检索服务。</li><li>类似于浏览器的导航页。</li><li>举例：Yahoo、新浪。</li></ul><h5 id="1-1-1-3-元搜索引擎"><a href="#1-1-1-3-元搜索引擎" class="headerlink" title="1.1.1.3 元搜索引擎"></a>1.1.1.3 元搜索引擎</h5><ul><li>通过一个统一的用户界面帮助用户在多个搜索引擎中选中和利用合适的搜索引擎来实现检索操作，是对分布于网络中的多种检索工具的全局控制机制。</li><li>一种输入，同时用多种搜索引擎进行搜索。然后一起呈现结果。</li><li>360搜索。</li></ul><h3 id="1-2-SEO"><a href="#1-2-SEO" class="headerlink" title="1.2 SEO"></a>1.2 SEO</h3><p><code>Search Engine Optimization</code>的缩写，译为“搜索引擎优化”。SEO是指根据搜索引擎的算法机制，对网站内部和外部进行调整优化，提高网站在搜索引擎中关键词的自然排名，获得更多的展现量，吸引更多目标客户访问网站，达到企业网络营销的目标。</p><h2 id="2-SEO工作原理"><a href="#2-SEO工作原理" class="headerlink" title="2. SEO工作原理"></a>2. SEO工作原理</h2><pre class="mermaid">graph LRa(页面抓取)--&gt;b(页面分析)b--&gt;c(页面排序)c--&gt;d(用户查询)</pre><h3 id="2-1-页面抓取"><a href="#2-1-页面抓取" class="headerlink" title="2.1 页面抓取"></a>2.1 页面抓取</h3><ul><li>也称页面收录，是指搜索引擎通过特定程序（蜘蛛程序英文Spider）在互联网上采集网页数据。</li><li>搜索引擎最基础的工作。搜索引擎抓取页面的能力直接决定了其可提供的信息量，以及覆盖互联网的范围，进而影响用户的查询结果。</li></ul><h4 id="2-1-1抓取流程："><a href="#2-1-1抓取流程：" class="headerlink" title="2.1.1抓取流程："></a>2.1.1抓取流程：</h4><div style="text-align:center"><svg viewBox="0 0 624 473" height="473" width="624" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg">    <defs></defs>    <g transform="translate(-284.00,-238.48)">        <g id="shape1" transform="translate(516.93,239.48)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="34.1" x="36.4">域名</tspan>            </text>        </g>        <g id="shape2" transform="translate(566.93,299.48)">            <path fill="none" stroke="#191919" d="M.0,.0L.0,34.7"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M3.0,34.7L.0,40.7L-3.0,34.7L3.0,34.7"></path>        </g>        <g id="shape3" transform="translate(516.93,340.16)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="34.1" x="36.4">首页</tspan>            </text>        </g>        <g id="shape4" transform="translate(566.93,400.16)">            <path fill="none" stroke="#191919" d="M.0,.0L.0,34.7"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M3.0,34.7L.0,40.7L-3.0,34.7L3.0,34.7"></path>        </g>        <g id="shape5" transform="translate(490.72,440.83)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M76.2,91.7L152.4,45.9L76.2,.0L.0,45.9L76.2,91.7z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="50.0" x="49.4">URL链接</tspan>            </text>        </g>        <g id="shape6" transform="translate(643.14,486.70)">            <path fill="none" stroke="#191919" d="M.0,.0L140.4,.0"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M140.4,-3.0L146.4,.0L140.4,3.0L140.4,-3.0"></path>            <rect y="-10.3" fill="#ffffff" height="18.4" width="40.0" x="51.7"></rect>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="4.1" x="51.7">无URL</tspan>            </text>        </g>        <g id="shape7" transform="translate(789.58,460.85)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M25.9,51.7L91.7,51.7L91.7,51.7C105.9,51.7,117.5,40.1,117.5,25.9C117.5,11.6,105.9,.0,91.7,.0L25.9,.0L25.9,.0C11.6,.0,.0,11.6,.0,25.9C.0,40.1,11.6,51.7,25.9,51.7z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="30.1" x="31.6">停止抓取</tspan>            </text>        </g>        <g id="shape8" transform="translate(566.93,532.57)">            <path fill="none" stroke="#191919" d="M.0,.0L.0,72.2L-46.9,72.2"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M-46.9,75.2L-52.9,72.2L-46.9,69.2L-46.9,75.2"></path>        </g>        <g id="shape9" transform="translate(394.25,574.50)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M119.8,60.4L119.8,.0L.0,.0L.0,60.4L119.8,60.4z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="34.3" x="28.7">链接页面1</tspan>            </text>        </g>        <g id="shape10" transform="translate(394.25,650.09)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M119.8,60.4L119.8,.0L.0,.0L.0,60.4L119.8,60.4z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="34.3" x="28.7">链接页面2</tspan>            </text>        </g>        <g id="shape11" transform="translate(566.93,532.57)">            <path fill="none" stroke="#191919" d="M.0,.0L.0,117.5L50.7,117.5"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M50.7,114.5L56.7,117.5L50.7,120.5L50.7,114.5"></path>        </g>        <g id="shape12" transform="translate(623.62,619.87)">            <path fill="#ffffff" fill-rule="nonzero" stroke="#323232" d="M152.4,60.4L152.4,.0L.0,.0L.0,60.4L152.4,60.4z"></path>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="34.3" x="45.0">链接页面3</tspan>            </text>        </g>        <g id="shape13" transform="translate(394.25,604.72)">            <path fill="none" stroke="#191919" d="M.0,.0L-73.0,.0L-73.0,-118.0L90.5,-118.0"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M90.5,-121.0L96.5,-118.0L90.5,-115.0L90.5,-121.0"></path>        </g>        <g id="shape14" transform="translate(776.03,650.09)">            <path fill="none" stroke="#191919" d="M.0,.0L72.3,.0L72.3,-131.5"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M69.3,-131.5L72.3,-137.5L75.3,-131.5L69.3,-131.5"></path>            <rect y="-66.3" fill="#ffffff" height="18.4" width="40.0" x="53.3"></rect>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="-51.9" x="53.3">无URL</tspan>            </text>        </g>        <g id="shape15" transform="translate(566.93,532.57)">            <path fill="none" stroke="#191919" d="M.0,.0L.0,147.7L-46.9,147.7"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M-46.9,150.7L-52.9,147.7L-46.9,144.7L-46.9,150.7"></path>            <rect y="18.8" fill="#ffffff" height="18.4" width="53.6" x="-25.8"></rect>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="33.2" x="-25.8">提取URL</tspan>            </text>        </g>        <g id="shape16" transform="translate(394.25,680.31)">            <path fill="none" stroke="#191919" d="M.0,.0L-73.0,.0L-73.0,-193.6L90.5,-193.6"></path>            <path stroke-width="1" fill="#191919" stroke="#191919" stroke-linecap="round" d="M90.5,-196.6L96.5,-193.6L90.5,-190.6L90.5,-196.6"></path>            <rect y="-165.0" fill="#ffffff" height="18.4" width="67.2" x="-105.6"></rect>            <text style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt" xml:space="preserve">                <tspan y="-150.6" x="-105.6">发现新URL</tspan>            </text>        </g>    </g></svg></div><h4 id="2-1-2-抓取方式"><a href="#2-1-2-抓取方式" class="headerlink" title="2.1.2 抓取方式"></a>2.1.2 抓取方式</h4><ul><li><p>广度抓取：</p><div style="text-align:center"><svg height="467" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="758" viewBox="0 0 758 467">    <defs>        <linearGradient x1="0%" x2="0%" y1="0%" y2="100%" id="lg1">            <stop offset="0.00" stop-color="#8a8a8a"></stop>            <stop offset="0.65" stop-color="#999999"></stop>            <stop offset="1.00" stop-color="#797979"></stop>        </linearGradient>    </defs>    <g transform="translate(-187.98,-195.77)">        <path stroke-dasharray="11,5,2.5,5,2.5,5" fill="#ffffff" d="M.0,.0L321.3,.0L321.3,113.4L.0,113.4L.0,.0z" transform="translate(188.98,548.03)" stroke="#323232" id="shape1" fill-rule="nonzero"></path>        <path stroke-dasharray="11,5,2.5,5" fill="#ffffff" d="M.0,.0L467.7,.0L467.7,113.4L.0,113.4L.0,.0z" transform="translate(188.98,425.20)" stroke="#323232" id="shape2" fill-rule="nonzero"></path>        <path stroke-dasharray="11,5,2.5,5" fill="#ffffff" d="M.0,.0L755.9,.0L755.9,141.7L.0,141.7L.0,.0z" transform="translate(188.98,275.91)" stroke="url(#lg1)" id="shape3" fill-rule="nonzero"></path>        <g transform="translate(472.44,196.77)" id="shape4">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="36.4" y="34.1">首页</tspan>            </text>        </g>        <g transform="translate(522.44,256.77)" id="shape5">            <path fill="none" d="M.0,.0L.0,28.0L-240.0,28.0L-240.0,54.0" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M-237.0,54.0L-240.0,60.0L-243.0,54.0L-237.0,54.0" stroke="#191919"></path>        </g>        <g transform="translate(232.44,316.77)" id="shape6">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="32.4" y="34.1">页面1</tspan>            </text>        </g>        <g transform="translate(536.85,316.77)" id="shape7">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="32.4" y="34.1">页面3</tspan>            </text>        </g>        <g transform="translate(689.06,316.77)" id="shape8">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="32.4" y="34.1">页面4</tspan>            </text>        </g>        <g transform="translate(384.65,316.77)" id="shape9">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="32.4" y="34.1">页面2</tspan>            </text>        </g>        <g transform="translate(232.44,436.77)" id="shape10">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="26.8" y="34.1">页面1.1</tspan>            </text>        </g>        <g transform="translate(232.44,556.77)" id="shape11">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="21.2" y="34.1">页面1.1.1</tspan>            </text>        </g>        <g transform="translate(384.65,436.77)" id="shape12">            <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>            <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                <tspan x="26.8" y="34.1">页面2.1</tspan>            </text>        </g>        <g transform="translate(332.44,346.77)" id="shape13">            <path fill="none" d="M.0,.0L46.2,.0" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M46.2,-3.0L52.2,.0L46.2,3.0L46.2,-3.0" stroke="#191919"></path>        </g>        <g transform="translate(484.65,346.77)" id="shape14">            <path fill="none" d="M.0,.0L46.2,.0" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M46.2,-3.0L52.2,.0L46.2,3.0L46.2,-3.0" stroke="#191919"></path>        </g>        <g transform="translate(636.85,346.77)" id="shape15">            <path fill="none" d="M.0,.0L46.2,.0" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M46.2,-3.0L52.2,.0L46.2,3.0L46.2,-3.0" stroke="#191919"></path>        </g>        <g transform="translate(789.06,346.45)" id="shape16">            <path fill="none" d="M.0,.0L32.0,.0L32.0,58.3L-588.6,58.3L-588.6,120.3L-562.6,120.3" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M-562.6,117.3L-556.6,120.3L-562.6,123.3L-562.6,117.3" stroke="#191919"></path>        </g>        <g transform="translate(332.44,466.77)" id="shape17">            <path fill="none" d="M.0,.0L46.2,.0" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M46.2,-3.0L52.2,.0L46.2,3.0L46.2,-3.0" stroke="#191919"></path>        </g>        <g transform="translate(484.65,466.77)" id="shape18">            <path fill="none" d="M.0,.0L32.0,.0L32.0,58.0L-284.2,58.0L-284.2,120.0L-258.2,120.0" stroke="#191919"></path>            <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M-258.2,117.0L-252.2,120.0L-258.2,123.0L-258.2,117.0" stroke="#191919"></path>        </g>    </g></svg></div></li><li><p>深度抓取:</p></li></ul><div style="text-align:center">    <svg height="467" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="758" viewBox="0 0 758 467">        <defs>            <linearGradient x1="0%" x2="0%" y1="0%" y2="100%" id="lg1">                <stop offset="0.00" stop-color="#8a8a8a"></stop>                <stop offset="0.65" stop-color="#999999"></stop>                <stop offset="1.00" stop-color="#797979"></stop>            </linearGradient>        </defs>        <g transform="translate(-187.98,-195.77)">            <path stroke-dasharray="11,5,2.5,5,2.5,5" fill="#ffffff" d="M.0,.0L321.3,.0L321.3,113.4L.0,113.4L.0,.0z" transform="translate(188.98,548.03)" stroke="#323232" id="shape1" fill-rule="nonzero"></path>            <path stroke-dasharray="11,5,2.5,5" fill="#ffffff" d="M.0,.0L467.7,.0L467.7,113.4L.0,113.4L.0,.0z" transform="translate(188.98,425.20)" stroke="#323232" id="shape2" fill-rule="nonzero"></path>            <path stroke-dasharray="11,5,2.5,5" fill="#ffffff" d="M.0,.0L755.9,.0L755.9,141.7L.0,141.7L.0,.0z" transform="translate(188.98,275.91)" stroke="url(#lg1)" id="shape3" fill-rule="nonzero"></path>            <g transform="translate(472.44,196.77)" id="shape4">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="36.4" y="34.1">首页</tspan>                </text>            </g>            <g transform="translate(522.44,256.77)" id="shape5">                <path fill="none" d="M.0,.0L.0,28.0L-240.0,28.0L-240.0,54.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M-237.0,54.0L-240.0,60.0L-243.0,54.0L-237.0,54.0" stroke="#191919"></path>            </g>            <g transform="translate(232.44,316.77)" id="shape6">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="32.4" y="34.1">页面1</tspan>                </text>            </g>            <g transform="translate(536.85,316.77)" id="shape7">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="32.4" y="34.1">页面3</tspan>                </text>            </g>            <g transform="translate(689.06,316.77)" id="shape8">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="32.4" y="34.1">页面4</tspan>                </text>            </g>            <g transform="translate(384.65,316.77)" id="shape9">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="32.4" y="34.1">页面2</tspan>                </text>            </g>            <g transform="translate(282.44,376.77)" id="shape10">                <path fill="none" d="M.0,.0L.0,54.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M3.0,54.0L.0,60.0L-3.0,54.0L3.0,54.0" stroke="#191919"></path>            </g>            <g transform="translate(232.44,436.77)" id="shape11">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="26.8" y="34.1">页面1.1</tspan>                </text>            </g>            <g transform="translate(282.44,496.77)" id="shape12">                <path fill="none" d="M.0,.0L.0,54.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M3.0,54.0L.0,60.0L-3.0,54.0L3.0,54.0" stroke="#191919"></path>            </g>            <g transform="translate(232.44,556.77)" id="shape13">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="21.2" y="34.1">页面1.1.1</tspan>                </text>            </g>            <g transform="translate(282.44,616.77)" id="shape14">                <path fill="none" d="M.0,.0L.0,32.0L70.2,32.0L70.2,-270.0L96.2,-270.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M96.2,-273.0L102.2,-270.0L96.2,-267.0L96.2,-273.0" stroke="#191919"></path>            </g>            <g transform="translate(434.65,376.77)" id="shape15">                <path fill="none" d="M.0,.0L.0,54.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M3.0,54.0L.0,60.0L-3.0,54.0L3.0,54.0" stroke="#191919"></path>            </g>            <g transform="translate(384.65,436.77)" id="shape16">                <path fill="#ffffff" d="M100.0,60.0L100.0,.0L.0,.0L.0,60.0L100.0,60.0z" stroke="#323232" fill-rule="nonzero"></path>                <text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei;font-size:10.00pt">                    <tspan x="26.8" y="34.1">页面2.1</tspan>                </text>            </g>            <g transform="translate(434.65,496.77)" id="shape17">                <path fill="none" d="M.0,.0L.0,32.0L70.2,32.0L70.2,-150.0L96.2,-150.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M96.2,-153.0L102.2,-150.0L96.2,-147.0L96.2,-153.0" stroke="#191919"></path>            </g>            <g transform="translate(586.85,376.77)" id="shape18">                <path fill="none" d="M.0,.0L.0,32.0L70.2,32.0L70.2,-30.0L96.2,-30.0" stroke="#191919"></path>                <path stroke-width="1" fill="#191919" stroke-linecap="round" d="M96.2,-33.0L102.2,-30.0L96.2,-27.0L96.2,-33.0" stroke="#191919"></path>            </g>        </g>    </svg></div><h4 id="2-2-3-页面更新"><a href="#2-2-3-页面更新" class="headerlink" title="2.2.3 页面更新"></a>2.2.3 页面更新</h4><p>即口头理解，对收录的内容进行更新。还有收录新内容。</p><p>分为四种，定期更新、增量更新、分类更新、智能更新。</p><ul><li><p>定期更新。</p><p>​    也称为周期性抓取，指搜索引擎周期性对已经抓取的页面进行更新。替换原有页面，储存新页面，删除不存在的页面。</p><p>​    更新慢，30-60天，适合普通企业网站。</p></li><li><p>增量更新。</p><p>​    通过对已抓取的页面进行定时监控，实现对页面的更新及维护。针对网站的重要页面，如网站首页。     缩减抓取时间，展示最新内容。</p></li><li><p>分类更新。</p><p>​    指根据页面的类别或性质而制定相应更新周期。</p><p>​    如新闻资讯类页面的更新周期可以精确到分钟。</p></li><li><p>智能更新。</p><p>​    搜索引擎可以监控并分析出网站内容的更新频率，据此调整搜索引擎抓取频率和时间点，从而获得网页最新内容。</p></li></ul><p>不难看出，定期更新是工作的开始与基础，定期更新开始的同时，对收录的网站进行分类，以决定之后进行增量更新还是分类更新。在更新数次之后，转换为智能更新。</p><h4 id="1-2-4-网页存储"><a href="#1-2-4-网页存储" class="headerlink" title="1.2.4 网页存储"></a>1.2.4 网页存储</h4><p>原始页面、文件类型、文件大小、最后修改时间、IP地址、抓取时间。</p><h3 id="2-2-页面分析"><a href="#2-2-页面分析" class="headerlink" title="2.2 页面分析"></a>2.2 页面分析</h3><p>页面分析步骤</p><pre class="mermaid">graph LRa(内容提取)--&gt;b(分词)b--&gt;c(去重)c--&gt;d(关键词索引)d--&gt;e(关键词重组)</pre><ul><li><p>内容提取</p><p>​        搜索引攀从页面源代码中提取信息的过程。搜索引擎抓取的信息,除了用户可在浏览器上有效阅读的外,还有大量HTML标签等无法有效使用的内容。搜索引整将会去除各类无价值的信息,提取可以用于排名处理的页面信息。经过内容提取后,搜索引擎才会获得一个连续的文字序列。</p><p>​        对搜索引擎来说,并不是页面所有的信息都要进行抓取,比如,页面上对排名计算不产生影响的导航条、版权文字说明、广告等区块。搜索引擎需要处理大量的网页,所以对于无价值信息直接忽略,以有效节省计算资源,提升响应速度,删除无价值信息。学名 降噪 。</p><p>​    主流的降噪技术有:<br>​            a. 网页结构法。</p><p>​            网页结构法是根据HTML标签对页面进行分区,分出页头、导航、正文、广告等区块,只抓取正文中重要的部分。</p><p>​            b. 模板法。<br>​            模板法是从一组网页中提取出相同的模板,而后利用这些模板从网页中抽取有用的信息。</p><p>​            c. 可视化信息法。<br>​            可视化信息是利用页面中元素的布局信息划分页面,保留页面中间区域,其他区域则认为是“噪音”。</p></li><li><p>分词</p><p>​        也称切词，搜索引擎将内容提取后，按照一定的原则重新组合成文字列表的过程。经过分词得到的文字列表，一般都能满足用户的查询需求。</p><p>​        几种分词方法:</p><p>​            a. 字符串匹配分词法。</p><p>​            字符串匹配分词法是搜索引擎基于一个大而权威的“词典”进行切词,只要页面上的词与“词典”中的词匹配,则分词成功。</p><p>​            b. 统计分词法。<br>​            统计分词法是根据相邻的两个(或多个)字出现的概率来判断是否组合成词。比如“学”和“习”两个字经常同时出现,那么搜索引擎就会认为“学习”是一个词。</p><p>​            c. 理解分词法。</p><p>​            ….</p><p><del>最开始百度的相对于谷歌的优势就在这里。奈何百度整天吃老本，若不是国家给他谷歌自己硬气，百度市场估计就是谷歌的零头。</del></p></li><li><p>去重</p><p>​        页面内容经过降噪、去停止词等过程之后剩下的内容，采用算法对重复的内容进行屏蔽处理。</p></li><li><p>关键字索引</p><p>​        搜索引擎从页面的有效信息中提取关键字,同时记录每组关键字出现的频率、次数、格式、位置等。并为关键字建立索引，从而能够快速定位到某个关键字。最终，页面与关键字之间呈现一对多的关系,一个页面可能会包含多个关键字。</p></li><li><p>关键字重组</p><p>​        根据用户搜索信息的习惯，建立一个关键字对应多个页面的关系表。借此实现，通过某一个特定关键字，返回一个或多个网页的搜索结果。</p></li></ul><h3 id="2-3页面排序"><a href="#2-3页面排序" class="headerlink" title="2.3页面排序"></a>2.3页面排序</h3><p>相关因素：页面相关性、链接权重、用户习惯。</p><ul><li><p>页面相关性与关键字、匹配度、权重标签有（<code>&lt;h&gt;&lt;font&gt;&lt;b&gt;&lt;i&gt;&lt;u&gt;</code>）、关键字密度、关键字分布相关。</p></li><li><p>链接权重：链接主要分内部链接及外部链接两种，某一页面得到的链接越多，从一定程度上反映了该页面越重要，链接权重值就越高。</p></li><li><p>用户习惯：根据用户点击次数和浏览时间来改进搜索结果质量。通过用户的点击次数和浏览时间来推测用户对搜索结果的偏好</p></li></ul><h3 id="2-4-用户查询"><a href="#2-4-用户查询" class="headerlink" title="2.4 用户查询"></a>2.4 用户查询</h3><p>流程：</p><pre class="mermaid">graph TDa[输入]--&gt;b[切词];b--匹配--&gt;c{关键词索引};c--否--&gt;d[空白列表];c--是--&gt;e[返回根据排序生成列表];</pre><hr><blockquote><p>  搜索指令:site a; a -b ; a * b; inurl : a ; filetype : a </p></blockquote><h2 id="3-网站搭建所需条件与优化"><a href="#3-网站搭建所需条件与优化" class="headerlink" title="3.网站搭建所需条件与优化"></a>3.网站搭建所需条件与优化</h2><h3 id="3-1-域名"><a href="#3-1-域名" class="headerlink" title="3.1 域名"></a>3.1 域名</h3><p>公司、个人在网络上建站，须先申请取得一个域名。域名相当于每个人的姓名＋身份证。为了便于别人记忆你的网站的同时，也区别于其他网站。即，域名具有唯一性。</p><p>必须向特定机构申请注册才能获得域名。腾讯云、阿里云、华为云等国内厂商以及国外的都可以购买。</p><h3 id="3-1-1种类"><a href="#3-1-1种类" class="headerlink" title="3.1.1种类"></a>3.1.1种类</h3><p>（1）按语种划分。可以分为：英文域名、中文域名和其他语种域名。</p><blockquote><p>  中文域名目前较少，但未来会变多。</p></blockquote><p>（2）按用途划分。根据域名的后缀来区分网站的不同属性。国际上制定了统一的域名后缀规则，不同的域名后缀代表不同的用途。</p><p>（3）按级别划分。从域名的层级角度考虑，一般把域名分为顶级域名、二级域名和三级域名。</p><blockquote><p>  顶级域名与部分二级域名（.com.cn之类的）需要购买，其他二级域名与三级域名可自行设置使用。</p></blockquote><ul><li>  com：Commercial organizations,商业组织,公司</li><li>  xyz：创意、创新；三维空间与无限可能</li><li>  net：网络服务商</li><li>  top：顶级、高端、适用于任何商业 公司 个人</li><li>  tech：科技、技术</li><li>  org：Other organizations,非盈利组织</li><li>  gov：Governmental entities,政府部门</li><li>  edu：Educational institutions,教研机构</li><li>  int：International organizations,国际组织</li><li>  pub： public大众、公共、知名。</li></ul><blockquote><p>  个人可购买的后缀有: .com .top .pub .xyz .vip 等。越常见域名价格越贵，其他域名只可特殊部门和单位申请或购买，即需要认证和更高级别审核。</p></blockquote><h3 id="3-2购买步骤"><a href="#3-2购买步骤" class="headerlink" title="3.2购买步骤"></a>3.2购买步骤</h3><p>准备资料、寻找注册机构、查询域名、正式申请、申请成功。</p><h4 id="3-2-1域名购买准备材料"><a href="#3-2-1域名购买准备材料" class="headerlink" title="3.2.1域名购买准备材料"></a>3.2.1域名购买准备材料</h4><p>需要实名制认证（国内厂商）—身份证正反面拍照、小钱钱（）。</p><h3 id="3-3域名优化"><a href="#3-3域名优化" class="headerlink" title="3.3域名优化"></a>3.3域名优化</h3><p>网站优化工作开始之前，应规划设计好网站的域名。域名的长度、名称、时间等方面的因素会对网站产生重要的影响，设计好这些因素是网站优化的基础工作。</p><p>（1）域名长度。域名较长，会增加记忆的难度；短域名更有利于网站推广，方便用户记忆。搜索引擎也更喜欢抓取长度较短的域名。域名注册时尽可能的简短。</p><p>（2）域名名称。网站的域名与其主题相关。首先要定位好网站的主题，根据主题选择与之相关的域名。当用户看到域名后，就能基本了解网站是做什么的，可以直观地了解其所处的行业。</p><p>（3）域名注册时间。在一定程度上，域名的注册时间越长，越能提升域名的可信度。域名的注册时间越早，也就越能增加网站在搜索引擎中的权重。</p><p>（4）域名使用时间。域名使用时间是指某个域名与某个网站绑定后，该网站的运营时长。域名使用时间越短，搜索引擎会认为该域名的可信度较低，指向不稳定，权重要相应降低。</p><p>（5）域名过期时间。域名过期时间是指到某个时间点后，域名将无法继续使用。搜索引擎认为到期时间晚的域名比到期时间早的域名更重要。</p><p>（6）域名后缀。域名后缀是指代表一个域名类型的符号，不同后缀的域名表示不同的含义。一般情况下，以“.edu”、“.gov”、“.org”（非营利机构）等为后缀的域名在搜索引擎中权重较高。</p><p>（7）子域名。从用户的角度看，子域名更容易被记忆；从搜索引擎优化的角度看，其更重视绑定了子域名的频道。因此，网站管理人员对一个网站中的重要频道设置子域名，可以有效提升用户使用体验，提高搜索引擎的友好性。</p><blockquote><p>  总结：购买域名前先想好网站类型，然后想一个简短精悍的一个字符串，如果还是太长，建议分级，级别大的放后边，如，zhidao.baidu.com。只需要购买baidu.com即可。其他前缀可后期设置为二级、三级域名。购买时根据网站类型与自己的钱包选择合适后缀，然后尽量买更长时间。</p></blockquote><h3 id="3-2网络空间"><a href="#3-2网络空间" class="headerlink" title="3.2网络空间"></a>3.2网络空间</h3><p>网站能否更好地吸引用户的访问和利于搜索引擎的抓取，选择合适的网站空间是非常重要的工作。</p><h4 id="3-2-1-网络空间分类"><a href="#3-2-1-网络空间分类" class="headerlink" title="3.2.1 网络空间分类"></a>3.2.1 网络空间分类</h4><p>（1）按网络空间的类型划分，可以将网站空间大体分为虚拟主机、VPS、云主机、服务器。</p><p>（2）根据网站空间支持的Web语言，可以将网站空间类型分为ASP虚拟主机、PHP虚拟主机、JSP虚拟主机、静态空间和全能空间。</p><p>（3）按空间接入光纤的线路划分网站空间，可以分为电信主机、网通主机、铁通主机、双线主机和多线主机。</p><h4 id="3-2-2-网络空间重要性"><a href="#3-2-2-网络空间重要性" class="headerlink" title="3.2.2 网络空间重要性"></a>3.2.2 网络空间重要性</h4><ul><li>  从用户体验角度来讲，用户在访问网站时，希望可以快速打开想要浏览的页面，而不愿浪费时间等待网页的打开。</li><li>  从搜索引擎友好性角度来讲，网站空间的服务器能快速响应有利于搜索引擎收录。如果搜索引擎抓取时，网站空间的服务器响应速度慢或者没响应，搜索引擎可能放弃抓取，该网站会被被搜索引擎屏蔽。</li></ul><h4 id="3-2-3-网络空间考虑因素"><a href="#3-2-3-网络空间考虑因素" class="headerlink" title="3.2.3 网络空间考虑因素"></a>3.2.3 网络空间考虑因素</h4><ul><li><p>网站空间的大小和类型。网站空间大小适中。近期够用即可，并为远期的扩展升级留条路。一般，虚拟主机的性价比较高，适合小型企业和个人网站使用。</p></li><li><p>访问速度。影响因素：服务器带宽、不同运营商的网络互通问题。</p></li><li><p>同IP网站的数量。共用同一个IP地址的网站数量越少越好，太多易存在安全隐患。主机IP被针对，所有网站一窝端。</p></li><li><p>  同IP网站的质量。如果同一个网站空间内，存在大量的垃圾网站，不利于搜索引擎的抓取。因为搜索引擎拉黑的是主机IP。也是一窝端。</p></li><li><p>  网站空间所在国家。同国家、地区IP访问当然速度快。跨国家、地区访问，可能因防火墙问题被屏蔽。</p></li><li><p>  是否支持SEO常用技术。网络空间不支持的情况下，搜索排名会大大下降甚至不被收录。非常影响网站运营。</p></li><li><p>  是否提供数据备份。若网站空间不提供自动数据备份服务，则需网站管理者手动操作备份，避免发生意外造成数据丢失。</p></li><li><p>  网站空间的硬件配置。访问者越多，服务器负担越大。针对自己网站的访客情况按需选择配置。</p></li><li><p>  网站空间服务商的服务水平。有实力的网站空间服务商会聘用技术过硬的人员、选择质量好的服务器。当出现问题时，他们能够在短时间内排除故障。所以，网站空间服务商的反应速度以及技术实力是选择网站空间的重要指标。</p></li></ul><blockquote><p>  个人购买时，只考虑服务器所在地区即可，主流提供商其他服务都问题不大。</p></blockquote><h3 id="3-3-备案"><a href="#3-3-备案" class="headerlink" title="3.3 备案"></a>3.3 备案</h3><p>网站要在中国大陆的网络空间服务器上运行，必须备案（到工信部提交个人以及网站信息）。网站备案分为企业用户备案和个人用户备案，两者需要准备的资料不同。个人备案，准备</p><h4 id="3-3-1备案方式与流程"><a href="#3-3-1备案方式与流程" class="headerlink" title="3.3.1备案方式与流程"></a>3.3.1备案方式与流程</h4><p>网站备案的方式：公安局备案、ICP备案。</p><ul><li>  公安局备案一般按照各地公安机关指定的地点和方式进行。</li><li>  ICP备案可以自主通过官方备案网站在线备案或者通过当地电信部门两种方式来进行备案。</li></ul><h4 id="3-2-网站备案的好处"><a href="#3-2-网站备案的好处" class="headerlink" title="3.2 网站备案的好处"></a>3.2 网站备案的好处</h4><ul><li>访问速度快</li><li>网站信任度高</li><li>更容易收录</li><li>交换友情链接</li><li>解除危险网站提示</li></ul><h2 id="4-网站优化"><a href="#4-网站优化" class="headerlink" title="4. 网站优化"></a>4. 网站优化</h2><h3 id="4-1-关键词优化"><a href="#4-1-关键词优化" class="headerlink" title="4.1 关键词优化"></a>4.1 关键词优化</h3><h4 id="4-1-1-关键词"><a href="#4-1-1-关键词" class="headerlink" title="4.1.1 关键词"></a>4.1.1 关键词</h4><p>keyword。用户在使用搜索引擎时输入的、能够最大程度概括所查内容的字或词。</p><blockquote><p>关键词是用户查找信息的基础，也是搜索引擎优化的基础。<br>用户在使用搜索引擎搜索内容时可将搜索内容用几个关键词概括或提炼出来，这样进行搜索时能更有效地找到自己想查找的内容。<br>       网站建设者可优化网站中的关键词，使搜索引擎将某些关键词建立与网站的联系。</p></blockquote><h4 id="4-1-2-关键词搜索指数"><a href="#4-1-2-关键词搜索指数" class="headerlink" title="4.1.2 关键词搜索指数"></a>4.1.2 关键词搜索指数</h4><h3 id="4-2-网站建设优化"><a href="#4-2-网站建设优化" class="headerlink" title="4.2 网站建设优化"></a>4.2 网站建设优化</h3><h4 id="4-2-1-网站结构优化"><a href="#4-2-1-网站结构优化" class="headerlink" title="4.2.1 网站结构优化"></a>4.2.1 网站结构优化</h4><h5 id="1-网站结构"><a href="#1-网站结构" class="headerlink" title="1. 网站结构"></a>1. 网站结构</h5><ol><li><p>物理结构</p><ul><li><p>扁平物理结构。网站中所有页面文件都储存在根目录下，且形成所有页面的目录深度都相同的存储结构。</p><p>  优点：便于搜索引擎抓取。</p><p>  缺点：不利于后期维护。</p></li><li><p>树形物理结构。网站中的页面分门别类地存储在多个层次关系地目录中。</p><p>  优点：后期维护方便。</p><p>  缺点：不利于搜索引擎抓取。</p></li></ul></li></ol><blockquote><p>综合来说可结合两者特点使用，即树形结构深度不可太深，最多建议三层。</p></blockquote><ol><li><p>逻辑结构</p><p>  由页面与页面之间的链接关系所决定地结构，其反应的是页面之间的链接层次结构。逻辑结构中，常用连接深度描述页面之间地链接层次。</p><blockquote><p>  <mark style="pading:10px;border-radius:3px;background-color:#6BB9F0;">链接深度</mark>: 原页面到达目标页面所经历地路径。</p><p>  ​    链接深度越浅，被搜索引擎抓取的机会越大。</p></blockquote><ul><li><p>  扁平逻辑结构。</p></li><li><p>树形逻辑结构。</p><blockquote><p>  优缺点同上。</p></blockquote></li></ul></li></ol><h5 id="2-网站结构优化方法"><a href="#2-网站结构优化方法" class="headerlink" title="2. 网站结构优化方法"></a>2. 网站结构优化方法</h5><ol><li><p>物理结构优化方法</p><ul><li><p>建立含有关键字的子目录</p></li><li><p>有条件的缩短目录深度和长度</p></li></ul></li><li><p>逻辑结构优化方法</p><ul><li><p>增加重要页面中的链接数量</p></li><li><p>增加重要页面的链接入口。</p></li><li><p>合理分配权重。</p><p>通过调整网站的整体结构，控制网站内部权重的传递与流动，使整个网站权重得到分配有一定层次。</p></li></ul></li></ol><h4 id="4-2-2-URL优化"><a href="#4-2-2-URL优化" class="headerlink" title="4.2.2 URL优化"></a>4.2.2 URL优化</h4><p>页面的链接地址，用户和搜索与年轻需要通过URL才能发给你问相应的页面。URL优化可对其进行适当的调整，提高URL对搜索引擎的友好性。</p><h5 id="1-URL简介"><a href="#1-URL简介" class="headerlink" title="1. URL简介"></a>1. URL简介</h5><p><mark style="pading:10px;border-radius:3px;background-color:#6BB9F0;">URL</mark> :统一资源定位器(符)Uniform Resource Locator.互联网上标准资源的地址,包含访问资源的全部信息。互联网上每一个文件都有唯一的URL，可通过它链接文件的位置以及浏览器应使用何种协议打开文件。</p><p>组成从左到右依次是 服务协议类型、服务器地址、端口号、路径和文件名。其中端口号非必须存在。</p><p>如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">https</span><span class="token punctuation">:</span>//blogofxyz.top/medias/avatar.jpg<span class="token comment">/*协 议 为https://文件名为 avatar.jpg服务器地址 blogofxyz.top路径 /medias/*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-URl初级优化"><a href="#2-URl初级优化" class="headerlink" title="2. URl初级优化"></a>2. URl初级优化</h5><ol><li><p>URl 命名</p><ul><li>  使用拼音或英语。简单来说就是搜索引擎更擅长操作拼音与英语。汉字操作不熟练。</li><li>  使用小写格式。相对于大写字符那么多特殊意义，搜索引擎处理起来蹑手蹑脚，更敢于操作小写字符。域名部分全为小写字母，所以只需要留意文件名与路径即可。</li></ul></li><li><p>URL长度</p><p> URL越长权重越低。除此之外，太长的URL，搜索引擎会放弃抓取。</p></li><li><p>URL关键字</p><p> 一般URL会包含域名、路径和文件名。通过这些可大致判断网页内容。两者的关联度越大，越能越能增加搜索引擎友好性。当然也方便用户根据URL判断网页内容。</p></li><li><p>URL符号使用</p><p> 为了使搜索引擎能正确识别以英文姓氏命名的关键字，需要使用相应符号对词组之间的单词进行分割。优先使用“-”，然后“_”次之，其他符号尽量不用。</p></li></ol><h6 id="优化注意事项"><a href="#优化注意事项" class="headerlink" title="优化注意事项"></a>优化注意事项</h6><ul><li>  相关性。URl各组成部分中包含与网页内容相关的关键字，因此可以增加王爷与搜索关键字的相关性，以提高搜索关键字的排名顺序。</li><li>  友好性。搜索迎请对URL的长度有限制，对于太长的URL，搜索引擎会放弃抓取其指向的网页。URL越短对搜索引擎越友好，越容易被抓取。</li><li>  突出性。URl优化要突出关键字，以便用户可通过URL直接了解指向网页的内容。</li></ul><h5 id="3-URL重定向"><a href="#3-URL重定向" class="headerlink" title="3. URL重定向"></a>3. URL重定向</h5><p>把一个URL重定向到另一个URL上，即把一个目录或者文件的访问请求转发至另一个目录或文件上。当用户发出相应的访问请求时，网页自动跳转到指定位置。</p><p>重定向分为301永久重定向与302暂时重定向。</p><ul><li><p>301永久重定向</p><p>常用于实现URL静态化。其设置是通过网络空间的服务器进行设计。</p></li><li><p>302暂时重定向</p><p>适用于临时更换域名或目录名称的情况。可通过meta标签重定向和JS标签重定向设置。</p></li></ul><h6 id="重定向优化的好处"><a href="#重定向优化的好处" class="headerlink" title="重定向优化的好处"></a>重定向优化的好处</h6><ul><li><p>集中权重</p><p>如果几个网页的内容完全一样，可通过设置重定向，将几个URL重定向到一个上面。</p></li><li><p>传递权重</p><p>主要用于域名更换时，为了防止旧域名的流量流失，可将旧域名重定向至新域名。</p></li><li><p>转移权重</p><p>当注册多个域名或者一些网页已删除时，可将域名重定向至一个主域名。</p></li></ul><h5 id="4-URL-静态化"><a href="#4-URL-静态化" class="headerlink" title="4. URL 静态化"></a>4. URL 静态化</h5><h4 id="4-2-3-代码优化"><a href="#4-2-3-代码优化" class="headerlink" title="4.2.3 代码优化"></a>4.2.3 代码优化</h4><p>代码越多，搜索引擎越不想抓。代码越乱，搜索引擎越不想看。</p><h5 id="1-代码优化重要性"><a href="#1-代码优化重要性" class="headerlink" title="1. 代码优化重要性"></a>1. 代码优化重要性</h5><ol><li><p>减少网页体积，加快加载速度。</p><p>  通过服务器解释输出的HTML页面，不涉及资源文件，如调用的js文件，视频，音频等都不考虑。</p></li><li><p>精简代码，突出主题</p><p>  减少网页中与网页主题不相关的内容，减少搜索引擎抓取时的干扰。</p></li><li><p>  便于维护，提高工作效率</p></li></ol><h5 id="2-精简代码"><a href="#2-精简代码" class="headerlink" title="2. 精简代码"></a>2. 精简代码</h5><ol><li>  清理垃圾代码</li><li>  HTML标签转换</li><li>  CSS优化</li><li>  JS优化</li><li>  减少或删除注释</li><li>  减少表格</li></ol><h5 id="3-Robots协议优化"><a href="#3-Robots协议优化" class="headerlink" title="3. Robots协议优化"></a>3. Robots协议优化</h5><p><mark style="pading:10px;border-radius:3px;background-color:#6BB9F0;">Robots</mark> 搜索引擎抓取协议。通过此协议告诉搜索引擎，网站哪些内容可抓取，那些不可抓取。如果违反并用于商业，可通过法律维护个人权益。</p><p>文件名为 <code>robots.txt</code> ，放在网站根目录下，当搜索引擎抓取网站时，会首先检查是否存在此文件，如果存在会按照文件内容确定抓取范围。不存在则默认抓取不受限。</p><p>我们常用的搜索引擎类型有：</p><ul><li>  google蜘蛛：googlebot</li><li>  百度蜘蛛：baiduspider</li><li>  yahoo蜘蛛：slurp</li><li>  alexa蜘蛛：ia_archiver</li><li>  MSN蜘蛛：msnbot</li><li>  altavista蜘蛛：scooter</li><li>  lycos蜘蛛：lycos_spider_(t-rex)</li><li>  alltheweb蜘蛛：fast-webcrawler</li><li>  inktomi蜘蛛： slurprobots.txt文件的写法</li></ul><p>Robots协议写法：</p><pre class="line-numbers language-none"><code class="language-none">User-agent: 定义搜索引擎的类型User-agent: * 这里的*代表的所有的搜索引擎种类，*是一个通配符Allow: 定义允许搜索引擎收录的地址Allow: /cgi-bin/　这里定义是允许爬寻cgi-bin目录下面的目录Allow: /tmp 这里定义是允许爬寻tmp的整个目录Allow: .htm$ 仅允许访问以".htm"为后缀的URL。Allow: .gif$ 允许抓取网页和gif格式图片robots.txt文件用法举例Disallow: 定义禁止搜索引擎收录的地址Disallow: /admin/ 这里定义是禁止爬寻admin目录下面的目录Disallow: /require/ 这里定义是禁止爬寻require目录下面的目录Disallow: /ABC 这里定义是禁止爬寻ABC整个目录Disallow: /cgi-bin/*.htm 禁止访问/cgi-bin/目录下的所有以".htm"为后缀的URL(包含子目录)。Disallow: /*?* 禁止访问网站中所有的动态页面Disallow: .jpg$ 禁止抓取网页所有的.jpg格式的图片Disallow:/ab/adc.html 禁止爬去ab文件夹下面的adc.html所有文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例1. 禁止所有搜索引擎访问网站的任何部分</p><pre class="line-numbers language-none"><code class="language-none">User-agent: *Disallow: /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h6><h5 id="4-Nofollow-标签优化"><a href="#4-Nofollow-标签优化" class="headerlink" title="4. Nofollow 标签优化"></a>4. Nofollow 标签优化</h5><p>由谷歌创建的一个“反垃圾标签”，后来被其他搜索引擎广泛使用。</p><p>Nofollow 目的是指示搜索引擎不要抓取网页上带有Nofollow属性的人格出站链接，从而减少导出链接继承网站的权重。</p><p>格式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--告诉搜索引擎不要抓取网页上所有的链接，包括内部链接和外部链接--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">hrf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.how123.com<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofolllow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--告诉搜索引擎不让跟踪“https://www.how123.com” ，从而不将网页权重传递给该链接--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><ul><li>  规避垃圾链接。如果网站有文章评论、论坛帖子、留言板等模块。则需要在此模板设置nofollow属性，避免评论中垃圾链接被抓取。</li><li>  突出重要页面。设置nofollow标签可有效控制网站内部权重流向，让主要莲姐姐得到更多权重传递，突出网站的重要页面。如网站 footer 标签块的链接。</li><li>  交换友链。交换友链不仅是为了从对方网站获取流量，也是为了继承对方网站的权重，提高网站在搜索结果中的排名。此时加 nofollow 良心不会痛吗？</li></ul><h4 id="4-2-4-图片优化"><a href="#4-2-4-图片优化" class="headerlink" title="4.2.4 图片优化"></a>4.2.4 图片优化</h4><p>相对于文字，图片更吸引用户，所以如果使用图片，就要让图片以最好的状态呈现出来。其次，图片更不利于搜索引擎读取，优化更利于搜索引擎进行工作。</p><ol><li><p>图片标题</p><p>  指img标签的title属性。建议title与图片内容相关，即图片与title都与网站主题相关。不过这一属性对权重影响不大。</p></li><li><p>alt属性</p><p>  图片加载失败或者未加载完时显示的内容。这一属性影响的是图片的排名，图片网站需要多注意这点。通常title为中文命名。alt为英文命名。</p></li><li><p>图片注释</p><p>  指在图片底部添加图片说明，尽可能包含目标关键词。</p><p>  当然，alt，title，图片注释最好有一定区别，这样可有效承载更多长尾关键词。</p></li><li><p>图片大小</p><p>  ​        图片大小是指图片占用存储空间的大小。图片越大，越不利于浏览器加载，影响浏览体验；图片太小，有损画质，也会影响浏览体验。影图片大小取决于两个元素：</p><ol><li><p>图片格式</p><p>  三种格式<a href="https://baike.baidu.com/item/JPEG%E6%A0%BC%E5%BC%8F/3462770">jpg</a>、<a href="https://baike.baidu.com/item/PNG">png</a>、<a href="https://baike.baidu.com/item/GIF/217778">gif</a>。各有各的提点，点击可跳转查看。</p></li><li><p>  像素</p></li></ol><p>  ​        网站中引用图片，不可只在乎高画质。首先，搜索引擎抓取网站，每个都有时间限制，资源太大，不利于收录。其次，图片大的话如果网络空间带宽不高，当用户浏览时很容易出现图片加载过慢的情况。所以对图片进行一定程度的压缩很有必要。</p></li><li><p>图片链接</p><p>  如果图片链接被收录，会与网页实现双向互补的好处。互相给权重。</p></li></ol><h3 id="4-3-网页内容优化"><a href="#4-3-网页内容优化" class="headerlink" title="4.3 网页内容优化"></a>4.3 网页内容优化</h3><h3 id="4-4-链接优化"><a href="#4-4-链接优化" class="headerlink" title="4.4 链接优化"></a>4.4 链接优化</h3><h3 id="4-5-SEO作弊"><a href="#4-5-SEO作弊" class="headerlink" title="4.5 SEO作弊"></a>4.5 SEO作弊</h3>]]></content>
      
      
      <categories>
          
          <category> SEO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小数转换二进制</title>
      <link href="/2021/09/02/%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
      <url>/2021/09/02/%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="小数转换为二进制"><a href="#小数转换为二进制" class="headerlink" title="小数转换为二进制"></a>小数转换为二进制</h2><p>直接开干。</p><p>  以<code>0.35</code>为例.</p><p>每次用小数部分乘2，所得积的整数部分作为二进制的一位。</p><ol><li>​      0.35 x 2=0.7–&gt;0</li><li>​      0.70 x 2=1.4–&gt;1</li><li>​      0.40 x 2=0.8–&gt;0</li><li>​      0.80 x 2=1.6–&gt;1</li><li>​      0.60 x 2=1.2–&gt;1</li><li>​      0.20 x 2=0.4–&gt;0<br>   ​    ​    ……</li></ol><p>然后就是<code>3~8</code>不停循环。</p><p>这就是<code>float</code>与<code>double</code>类型的数据不是很准确的原因。</p><p>这里就看是32位浮点数，还是64位浮点数。32位时，加上整数位取23位为止。64位同理。</p><p>所以0.35转换后为 <code>0101 1001 1001 1001 1001 ... </code></p><h3 id="符号位"><a href="#符号位" class="headerlink" title="符号位"></a>符号位</h3><p>然后，此数为正，S 位为0；</p><h3 id="指数位"><a href="#指数位" class="headerlink" title="指数位"></a>指数位</h3><p>此数二进制为1.011011011… x 2<sup>-2</sup>  ，故指数位为  -2 + 127=125<sub>D</sub> –&gt;<code>01111101</code><sub>b</sub></p><p><mark>此处也可先把幂与127转换为真值，然后进行运算。因为一般幂较小，二进制容易求。所以这样算方便计算的概率较大</mark></p><p>具体可参照本博客内“计算机中的数”文章。</p><p>传送门待开启。</p><h3 id="基数位"><a href="#基数位" class="headerlink" title="基数位"></a>基数位</h3><p>循环着取23位即可。即 <code>0110 0110 0110 0110 0110 011</code></p><p>故<code>0.35</code> 转换为二进制为 <code>0 0111 1101  0110 0110 0110 0110 0110 011</code></p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 数据转换 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十进制转浮点数</title>
      <link href="/2021/09/02/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>/2021/09/02/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-浮点数"><a href="#1-浮点数" class="headerlink" title="1. 浮点数"></a>1. 浮点数</h2><h3 id="1-1-优缺点"><a href="#1-1-优缺点" class="headerlink" title="1.1 优缺点"></a>1.1 优缺点</h3><p>优：相对于定点数来说可表达范围更大的数据类型。</p><p>缺：失去了准确性。</p><h3 id="1-2-组成"><a href="#1-2-组成" class="headerlink" title="1.2 组成"></a>1.2 组成</h3><p>浮点数由三部分组成。符号位，偏移位，数据位。</p><p>专业的叫法为：</p><ul><li><p>Sign：符号位，表示浮点数是正数或负数。0正，1负。</p></li><li><p>Exponent：指数位–阶码。类似于科学技术法 1x10<sup>12</sup> 中的12的部分，但略有不同。这里是以2为底数而不是10。</p><p> ​        当浮点数为32位时，指数位有8位。如0.00001531 之类的数，指数部分将会是负数。为了表示这些数。便将2<sup>8</sup> 平分，但还有<code>0</code>需要表示，所以就是  -(2<sup>7</sup>-1) <del>0 与1</del>2<sup>7</sup> 。但是还有个前提，需要表示正负，所以为了除去符号位就使所有数都偏移一个量，保证所有数为正，这样就可省略符号位。即偏移2<sup>7</sup> -1=127。</p></li><li><p>Mantissa：基数位–尾数。浮点数具体数值的实际表示。</p></li></ul><div>    <div>        <style>          th {              padding: 10px 20px;          }td {          border-style: inset;          border-width: 5px;          margin: 10px 15px;          padding: 10px 20px;      }      tr {          margin: 10px 15px;      }        </style>    </div>      <div>        <h3 id="1-3-种类"><a href="#1-3-种类" class="headerlink" title="1.3 种类"></a>1.3 种类</h3><p>目前标准的浮点数有两种 <code>32 bit</code> 与 <code>64 bit</code> 以后定会出现更高的。</p><ul><li><code>32 bit</code></li></ul><div style="text-align:center"><svg width="400" height="80" xmlns="http://www.w3.org/2000/svg"> <!-- Created with Method Draw - http://github.com/duopixel/Method-Draw/ --> <g>  <title>background</title>  <rect fill="none" id="canvas_background" height="82" width="402" y="-1" x="-1"></rect>  <g display="none" id="canvasGrid">   <rect fill="url(#gridpattern)" stroke-width="0" y="0" x="0" height="100%" width="100%" id="svg_7"></rect>  </g> </g> <g>  <title>Layer 1</title>  <g id="svg_14">   <rect id="svg_1" height="40" width="50" y="20.00001" x="36.3" stroke-width="1.5" stroke="#000" fill="#FABA6F"></rect>   <rect id="svg_2" height="40" width="100" y="20.00001" x="86.3" stroke-width="1.5" stroke="#000" fill="#FABA6F"></rect>   <rect id="svg_3" height="40" width="200" y="20.00001" x="186.3" stroke-width="1.5" stroke="#000" fill="#FABA6F"></rect>   <text xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="16" id="svg_4" y="45.60158" x="40.3" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="#000" fill="#000000">s:1位</text>   <text xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="16" id="svg_5" y="45.60158" x="111.3" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="#000" fill="#000000">E:8位</text>   <text xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="16" id="svg_6" y="45.60158" x="267.3" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="#000" fill="#000000">M:23位</text>  </g> </g></svg></div><ul><li><code>64bit</code></li></ul><div style="text-align:center">  <svg width="400" height="80" xmlns="http://www.w3.org/2000/svg">   <!-- Created with Method Draw - http://github.com/duopixel/Method-Draw/ -->   <g>    <title>background</title>    <rect x="-1" y="-1" width="402" height="82" id="canvas_background" fill="none"></rect>    <g id="canvasGrid" display="none">     <rect id="svg_7" width="100%" height="100%" x="0" y="0" stroke-width="0" fill="url(#gridpattern)"></rect>    </g>   </g>   <g>    <title>Layer 1</title>    <rect fill="#FABA6F" stroke="#000" stroke-width="1.5" x="36.3" y="20.00001" width="50" height="40" id="svg_1"></rect>    <rect fill="#FABA6F" stroke="#000" stroke-width="1.5" x="86.3" y="20.00001" width="100" height="40" id="svg_2"></rect>    <rect fill="#FABA6F" stroke="#000" stroke-width="1.5" x="186.3" y="20.00001" width="200" height="40" id="svg_3"></rect>    <text fill="#000000" stroke="#000" stroke-width="0" stroke-opacity="null" fill-opacity="null" x="40.3" y="45.60158" id="svg_4" font-size="16" font-family="Helvetica, Arial, sans-serif" text-anchor="start" xml:space="preserve">s:1位</text>    <text style="cursor: move;" fill="#000000" stroke="#000" stroke-width="0" stroke-opacity="null" fill-opacity="null" x="111.3" y="45.60158" id="svg_5" font-size="16" font-family="Helvetica, Arial, sans-serif" text-anchor="start" xml:space="preserve">E:11位</text>    <text style="cursor: move;" fill="#000000" stroke="#000" stroke-width="0" stroke-opacity="null" fill-opacity="null" x="267.3" y="45.60158" id="svg_6" font-size="16" font-family="Helvetica, Arial, sans-serif" text-anchor="start" xml:space="preserve">M:52位</text>   </g>  </svg>    </div><p>此文以32位举例说明运算步骤。</p><h2 id="2-十进制转浮点数"><a href="#2-十进制转浮点数" class="headerlink" title="2. 十进制转浮点数"></a>2. 十进制转浮点数</h2><p>具体算法可参考<mark><a href="https://blogofxyz.gitee.io/2021/09/02/%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/">点这里</a></mark> </p><table style="text-align: center;margin:auto;">            <tbody><tr>            <th colspan="5">浮点数表示范围</th>            </tr>      <tr>          <th colspan="2">单精度32位</th>          <th colspan="2">双精度64位</th>          <th rowspan="2">表示的对象</th>       </tr>          <tr>      <td>指数</td>      <td>位数</td>      <td>指数</td>      <td>位数</td>  </tr>  <tr>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>s=0，表示0;s=1,表示-0</td>  </tr>  <tr>      <td>0</td>      <td>非0</td>      <td>0</td>      <td>非0</td>      <td>正负规格化数</td>  </tr>  <tr>      <td>1~254</td>      <td>任意数</td>      <td>1~2046</td>      <td>任意数</td>      <td>正负浮点数</td>  </tr>  <tr>      <td>255</td>      <td>0</td>      <td>2047</td>      <td>0</td>      <td>正负无穷</td>  </tr>  <tr>      <td>非零</td>      <td>0</td>      <td>非零</td>      <td>0</td>      <td>NaN(不是数)</td>  </tr></tbody></table></div></div>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 浮点数 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(待补充)markdown进阶</title>
      <link href="/2021/08/31/%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89markdown%E8%BF%9B%E9%98%B6/"/>
      <url>/2021/08/31/%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89markdown%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-文字"><a href="#1-文字" class="headerlink" title="1. 文字"></a>1. 文字</h2><ul><li><p>  上下标。上标–<code>&lt;sup&gt;&lt;/sup&gt;</code>，例2<sup>999</sup> 下标<code>&lt;sub&gt;&lt;/sub&gt;</code> ，例 t<sub>a</sub>。</p></li><li><p>说明框。<code>&lt;</code> +信息。效果如下</p><blockquote><p>  这是那个长条条</p></blockquote></li><li><p>  删除线。<code>~~内容~~</code>    <del>这是效果</del></p></li><li><p>  <del>123</del> </p></li></ul><h2 id="2-图进阶"><a href="#2-图进阶" class="headerlink" title="2. 图进阶"></a>2. 图进阶</h2><h3 id="2-0-经验"><a href="#2-0-经验" class="headerlink" title="2.0 经验"></a>2.0 经验</h3><p>对于文章中图的引用的劝告。</p><ul><li><p>可操作性排序：引用网络资源URL &gt; 自己图床URL &gt; mermaid绘图 &gt; HTML的svg导入</p></li><li><p>后期维护代价排序：引用网络资源URL &gt; 自己图床URL &gt; mermaid绘图 = HTML的svg导入</p><p>​    如果引用的网络资源URL</p><ul><li>存在风险为，资源的失效风险，即，网站停运，侵权等问题删除。</li><li>好处，引用图的类型不受限制，任何图都能插入。</li></ul><p>​    如果引用自己图床URL</p><ul><li>存在风险，一般白嫖图床的可用空间较小，所以需要谨慎用图，并整理自己的图床，删除不用，或上传压缩过的图。同时，自己对图床内部文件的整理（重命名，移动等）等会影响引用URL的失效。所以整理后记得修改URL。当自己图床被引用次数较多时，工作量会变得很大。</li><li>好处，同样是引用图的种类不受限制。</li></ul><p>​    如果是mermaid绘图，或HTML的svg元素引用。</p><ul><li>缺点是只适用于简单的逻辑图，由线条与基本图形构成的图。使用方法在下文。</li><li>可以一劳永逸，后期不需要考虑失效问题。</li><li>mermaid绘图也可能存在兼容性问题，因为有些情况下虽然支持markdown，但并不支持mermaid渲染。</li></ul><p>​    选择哪种，自行斟酌。</p></li></ul><h3 id="2-1-绘制一般图"><a href="#2-1-绘制一般图" class="headerlink" title="2.1 绘制一般图"></a>2.1 绘制一般图</h3><p>可通过<code>markdown</code>支持部分<code>html</code>标签的方式来实现。</p><p>此处以<code>svg</code>来举例。也可通过其他方法。</p><h4 id="2-1-1-操作-amp-问题解决"><a href="#2-1-1-操作-amp-问题解决" class="headerlink" title="2.1.1 操作 &amp; 问题解决"></a>2.1.1 操作 &amp; 问题解决</h4><p><code>markdown</code> 中会自动对<code>html</code>进行转义。所以，如果你直接放置<code>svg</code>代码于 一 处，则可能会乱七八糟。这与svg段代码是否格式化标准有关。</p><p>避免方法为：</p><p>先声明一个<code>&lt;div&gt; </code> 标签。然后将<code>svg</code>代码放置其中即可。<mark style="border-radius:10px;padding:5px;background-color:#47a6e8">代码中切勿存在空行</mark> </p><p>这是你会发现图像歪的离谱，只需要为div添加text-align属性，并指定center的值即可解决。</p><h4 id="2-1-2-svg代码怎么得到"><a href="#2-1-2-svg代码怎么得到" class="headerlink" title="2.1.2 svg代码怎么得到"></a>2.1.2 svg代码怎么得到</h4><p>大多数绘图软件都支持svg格式文件导出。导出后用记事本打开，复制即可。</p><p>另，推荐<code>svg</code>绘图网站：<a href="https://c.runoob.com/more/svgeditor/">传送门</a>.</p><h3 id="2-1-思维导图-amp-流程图"><a href="#2-1-思维导图-amp-流程图" class="headerlink" title="2.1 思维导图 &amp; 流程图"></a>2.1 思维导图 <code>&amp;</code> 流程图</h3><h4 id="2-1-1-语法"><a href="#2-1-1-语法" class="headerlink" title="2.1.1 语法"></a>2.1.1 语法</h4><p>看上去是思维导图。实际是代码块的一个进阶。</p><ul><li><p>用<code>mermaid</code>语言的代码块。</p></li><li><p><code>graph </code> 声明图的方向 。</p><p>TB : top to bottom</p><p>TD : top-down/ same as top to bottom</p><p>BT : bottom to top</p><p>RL : right to left</p><p>LR : left to right</p></li><li><p>用字符串区分节点。</p><p>​    相当于各大语言中声明的变量名。</p><p>​    每一节点只需声明一次即可。</p></li><li><p>用 <code>[ ]</code>、<code>()</code> 与 <code>{}</code> ，以及<code>//</code>与<code>\\</code> 组合呈现出不同的边框形状声明节点文本内容。</p></li><li><p>用<code>-</code> 、<code>.</code>、<code>=</code> 与 <code>&gt;</code> 组合在横线上显示文本</p><p>​    <code>-</code>与<code>=</code>越多，连线越长。</p><p>​    <code>&gt;</code>表示横线的箭头。</p><p>如图（博主blog暂不支持渲染，可自行查看）</p><pre class="mermaid">  graph LRa--&gt;b.-c.-d</pre></li></ul><h4 id="2-1-2-不同边框图"><a href="#2-1-2-不同边框图" class="headerlink" title="2.1.2 不同边框图"></a>2.1.2 不同边框图</h4><ul><li>代码：</li></ul><pre class="line-numbers language-none"><code class="language-none">graph TDsubgraph oneA[a_text]--&gt;B(b_text);B--&gt;C([c_text]);C--&gt;D[(d_text)];D--&gt;E((e_text)) ;endsubgraph twoF&gt;f_text]--&gt;G{g_text};G--&gt;H{{h_text}};H--&gt;I[/i_text/];I.-&gt;J[\j_text\];endsubgraph threek[/k_text\]--&gt;l[\l_text/];l.-m[[m_text]];m-.-n[n_text];end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果(暂不支持渲染，可自行尝试)：<pre class="mermaid">    graph LR  A[a_text]--&gt;B(b_text)  B--&gt;C([c_text])  C--&gt;D[(d_text)]  D--&gt;E((e_text))   E--&gt;F&gt;f_text]  F--&gt;G{g_text}</pre><pre class="mermaid">    graph LR  G{g_text}--&gt;H  H--&gt;I[/i_text/]  I.-&gt;J[\j_text\]  j--&gt;k[/k_text\]  k--&gt;l[\l_text/]  l.-m[[m_text]]  m-.-n[n_text]</pre></li></ul><h4 id="2-1-3-横线显示文本"><a href="#2-1-3-横线显示文本" class="headerlink" title="2.1.3 横线显示文本"></a>2.1.3 横线显示文本</h4><ul><li><p>代码：</p><pre class="mermaid">  graph TBA1 --&gt; B1A2 ==&gt; B2A3 -.-&gt; B3</pre></li></ul><h4 id="2-1-3-横向图演示："><a href="#2-1-3-横向图演示：" class="headerlink" title="2.1.3 横向图演示："></a>2.1.3 横向图演示：</h4><ul><li><p>代码</p><pre class="line-numbers language-none"><code class="language-none">graph LRa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>思维导图</p><pre class="mermaid">  graph LRa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)</pre></li></ul><h4 id="2-1-4-纵向图演示"><a href="#2-1-4-纵向图演示" class="headerlink" title="2.1.4 纵向图演示"></a>2.1.4 纵向图演示</h4><ul><li><p>代码</p><pre class="line-numbers language-none"><code class="language-none">graph TDa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>思维导图</p><pre class="mermaid">  graph TDa(中国)--&gt;aa(河南)aa--&gt;aaa{郑州}aa--&gt;aab{...}a--&gt;ab(北京)ab--&gt;aba{朝阳区}ab--&gt;abb{...}a--&gt;ad(...)</pre></li></ul><h3 id="2-2-饼图"><a href="#2-2-饼图" class="headerlink" title="2.2 饼图"></a>2.2 饼图</h3><p>​    同为<code>mermaid</code>的进阶</p><p>​    语法更简单，直接看例子。</p><ul><li> 代码：</li></ul>   <pre class="line-numbers language-none"><code class="language-none">pie title 我班人数比"男生":95"女生":5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;pre class="mermaid"&gt;    pie title 我班人数比    "男生":95    "女生":5&lt;/pre&gt;</code></pre><h2 id="n-参考"><a href="#n-参考" class="headerlink" title="n.参考"></a>n.参考</h2><p><a href="https://markdown.com.cn/basic-syntax/">markdown官方教程</a></p><p>参考链接：<a href="https://iseex.github.io/2020-11/typora-diagram/">Typora也能做思维导图？做笔记的又一个绝佳选择？ </a></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）Java</title>
      <link href="/2021/08/30/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89Java/"/>
      <url>/2021/08/30/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89Java/</url>
      
        <content type="html"><![CDATA[<h2 id="学前准备"><a href="#学前准备" class="headerlink" title="学前准备"></a>学前准备</h2><ul><li><p>安装JDK</p><p>​    浏览器搜索下载即可。</p></li><li><p>安装IDE，推荐idea。</p><p>​    网上有破解资源，但不推荐。</p><p>​    第一。学生时期可选择教育优惠，试用一年。或者社区版免费使用，功能并没有少多少。</p><p>​    第二。不利于以后就业。如果就业之后使用Java开发。则可能被追究法律责任，另外，公司也都会自行购买企业版本。</p><p>​    学生试用：<a href="https://www.jetbrains.com/shop/eform/students">传送门</a> 需要大学邮箱，另可能大多数学校需要提供学生证或其他学生身份证件。试用期为大学毕业前。</p><p>​    其他身份请前往浏览：<a href="https://www.jetbrains.com/zh-cn/idea/buy/#discounts?billing=yearly">传送门</a></p><h2 id="0-IDEA快捷输入。"><a href="#0-IDEA快捷输入。" class="headerlink" title="0. IDEA快捷输入。"></a>0. IDEA快捷输入。</h2><ul><li><p><code>sout</code>–快捷输入一段输出的代码如下</p><p>可在任意变量或值后直接<code>.sout</code> 即可看到提示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">System.out.println();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>soutv</code>–与<code>sout</code>相比，会加上“参数名=”，同样可直接变量或值后加。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">System.out.println("args = " + args);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>fori</code>–快捷输入循环代码块</p><p>第一次生成是<code>i</code>，二层循环是<code>j</code>… 之后只需要填入范围即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">for (int i = 0; i &lt; ; i++) {                    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="1-数据类型（与其他语言相比）"><a href="#1-数据类型（与其他语言相比）" class="headerlink" title="1. 数据类型（与其他语言相比）"></a>1. 数据类型（与其他语言相比）</h2><h3 id="1-1-String类型"><a href="#1-1-String类型" class="headerlink" title="1.1 String类型"></a>1.1 String类型</h3><h2 id="2-for-、输入、输出"><a href="#2-for-、输入、输出" class="headerlink" title="2. for 、输入、输出"></a>2. for 、输入、输出</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.company;import java.util.Scanner;public class Main {    public static void main(String[] args) {// write your code here        double Chinese;        double English;        double C;        double Csharp;        //      生成输入对象。        Scanner scan=new Scanner(System.in);//      nextline---字符串                C=scan.nextDouble();                Chinese=scan.nextDouble();        Csharp=scan.nextDouble();        English=scan.nextDouble();        System.out.println("args = " + avg(C,Chinese,Csharp,English));    }    public static double avg(double... score) {        double term = 0;        double max = 0, min = 0;        for (double v : score) {            System.out.println("v = " + v);            if (v &gt; max) max = v;            if (v &lt; min) min = v;            term += v;        }        System.out.println(term + ((term &gt;(max+min)/2)?"挺大的":"不算大"));        System.out.println("term = " + term);        return term / score.length;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  ​    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（未完）计算机组成原理</title>
      <link href="/2021/08/30/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2021/08/30/%EF%BC%88%E6%9C%AA%E5%AE%8C%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="⚪-计算机系统组成"><a href="#⚪-计算机系统组成" class="headerlink" title="⚪. 计算机系统组成"></a>⚪. 计算机系统组成</h2><pre class="mermaid">graph TDa[计算机系统]--&gt;aa[硬件系统]aa--&gt;aaa[主机]aaa--&gt;aaaa[中央处理器]aaaa--&gt;aaaaa[运算器]aaaa--&gt;aaaab[控制器]aaa--&gt;aaab[内存]aaab--&gt;aaaba[只读存储器]aaab--&gt;aaabb[随机存储器]aaab--&gt;aaabc[高速存储器]aa--&gt;aab[外设]aab--&gt;aaba[I/O设备]aab--&gt;aabb[外存]aab--&gt;aabc[网络设备]a--&gt;ab[软件系统]ab--&gt;aba[系统软件]aba--&gt;abaa[操作系统]aba--&gt;abab[程序设计语言]aba--&gt;abac[实用程序]ab--&gt;abb[应用软件]</pre><h2 id="1-计算机的结构体系"><a href="#1-计算机的结构体系" class="headerlink" title="1. 计算机的结构体系"></a>1. 计算机的结构体系</h2><h3 id="1-1-冯诺依曼机结构"><a href="#1-1-冯诺依曼机结构" class="headerlink" title="1.1 冯诺依曼机结构"></a>1.1 冯诺依曼机结构</h3><p>特指硬件。</p><ul><li><p>输入设备</p></li><li><p>存储器</p></li><li><p>运算器</p></li><li><p>控制器</p></li><li><p>输出设备</p><p>现在计算机–&gt;微型计算机，一般由CPU（运算器、控制器）、I\O接口（输入输出接口）、存储器（外存）组成。</p></li></ul><h4 id="1-1存储器（外存）"><a href="#1-1存储器（外存）" class="headerlink" title="1.1存储器（外存）"></a>1.1存储器（外存）</h4><p>  存储程序与数据。</p><h4 id="1-2-CPU"><a href="#1-2-CPU" class="headerlink" title="1.2 CPU"></a>1.2 CPU</h4><h5 id="1-2-1-运算器"><a href="#1-2-1-运算器" class="headerlink" title="1.2.1 运算器"></a>1.2.1 运算器</h5><p>功能：进行算数逻辑运算<br>        组成：算术逻辑运算单元（ALU）、累加器、其他寄存器 </p><h5 id="1-2-2-控制器"><a href="#1-2-2-控制器" class="headerlink" title="1.2.2 控制器"></a>1.2.2 控制器</h5><h4 id="1-2-3-…"><a href="#1-2-3-…" class="headerlink" title="1.2.3 ….."></a>1.2.3 …..</h4><h2 id="2-计算机软件系统"><a href="#2-计算机软件系统" class="headerlink" title="2. 计算机软件系统"></a>2. 计算机软件系统</h2><h3 id="2-1-软件"><a href="#2-1-软件" class="headerlink" title="2.1 软件"></a>2.1 软件</h3><p>用于计算机的各种程序统称为软件。</p><h4 id="2-1-1-系统程序"><a href="#2-1-1-系统程序" class="headerlink" title="2.1.1 系统程序"></a>2.1.1 系统程序</h4><p>用来简化程序设计，提高计算机的使用效率，发挥和扩大计算机的功能和用途。</p><ul><li><p>操作系统：用来管理计算机硬件、软件资源，自动调度用户的作业程序，使多个用户能有效地共用一套系统。</p></li><li><p>语言程序。如汇编程序、编译程序等。</p></li><li><p>各种服务性程序。</p></li></ul><h4 id="2-1-2-应用程序"><a href="#2-1-2-应用程序" class="headerlink" title="2.1.2 应用程序"></a>2.1.2 应用程序</h4><p>   用户利用计算机来解决某些问题而编制的程序。</p><h2 id="3-计算机的其他组成"><a href="#3-计算机的其他组成" class="headerlink" title="3. 计算机的其他组成"></a>3. 计算机的其他组成</h2><h3 id="3-1-数据"><a href="#3-1-数据" class="headerlink" title="3.1 数据"></a>3.1 数据</h3><p>能被计算机所能接收、在储、处理的数字、字符、字母、汉字、图片、图形、声音、动画、视频<br>等都称为计算机的数据。</p><h4 id="3-1-1-数"><a href="#3-1-1-数" class="headerlink" title="3.1.1  数"></a>3.1.1  数</h4><p>[传送门]([计算机中的数 | X-Y-Z`s Blog (gitee.io)](<a href="https://blogofxyz.gitee.io/2021/09/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%95%B0/">https://blogofxyz.gitee.io/2021/09/07/计算机中的数/</a>))</p><h5 id="3-1-1-1-数的流通"><a href="#3-1-1-1-数的流通" class="headerlink" title="3.1.1.1 数的流通"></a>3.1.1.1 数的流通</h5><pre class="mermaid">graph LRa[输入信息]==转换==&gt;b[二进制形式]==输出==&gt;c[信息]a--便于存储,运算--&gt;bb--输出--&gt;c</pre><h2 id="4-计算机的发展趋势"><a href="#4-计算机的发展趋势" class="headerlink" title="4. 计算机的发展趋势"></a>4. 计算机的发展趋势</h2><ul><li>微型化。手机，智能手表等。 </li><li>巨型化。超级计算机。</li><li>网络化。通讯网络。</li><li>智能化。机器人。</li><li>多媒体化。声音，视频，动画等媒体的诞生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 笔记&amp;心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行处理乱码</title>
      <link href="/2021/08/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%84%E7%90%86%E4%B9%B1%E7%A0%81/"/>
      <url>/2021/08/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%84%E7%90%86%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>主要原因是命令行默认 ASCII 编码字符。而这种编码不支持中文的。</p><p>所以如果需要在命令行打开一些文件，或者类似的操作。</p><h2 id="1-转换编码方式。"><a href="#1-转换编码方式。" class="headerlink" title="1.转换编码方式。"></a>1.转换编码方式。</h2><h3 id="1-1-操作前在命令行输入"><a href="#1-1-操作前在命令行输入" class="headerlink" title="1.1 操作前在命令行输入"></a>1.1 操作前在命令行输入</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CHCP 65001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后回车。</p><p>小黑框会返回这么一行字：<mark>Active code page: 65001</mark></p><p>这就转换成功了。然后在进行之前要进行的操作。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言与cmd</title>
      <link href="/2021/08/23/c%E8%AF%AD%E8%A8%80&amp;CMD/"/>
      <url>/2021/08/23/c%E8%AF%AD%E8%A8%80&amp;CMD/</url>
      
        <content type="html"><![CDATA[<h2 id="1-C语言执行cmd命令"><a href="#1-C语言执行cmd命令" class="headerlink" title="1. C语言执行cmd命令"></a>1. C语言执行cmd命令</h2><h3 id="1-1-启动程序"><a href="#1-1-启动程序" class="headerlink" title="1. 1   启动程序"></a>1. 1   启动程序</h3><ul><li><p>start  path+.exe /.exe</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    system("start explorer.exe");    system("start S:\\S_Chat\\WeChat\\WeChat.exe");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-2-关机"><a href="#1-2-关机" class="headerlink" title="1.2 关机"></a>1.2 关机</h3><h4 id="1-2-1-shutdown-s-t-time"><a href="#1-2-1-shutdown-s-t-time" class="headerlink" title="1.2.1  shutdown  -s -t  time"></a>1.2.1  shutdown  -s -t  time</h4><p>  ​    -s 为shutdown命令中关机的指令，还可以是  “-f：强制关机” , “-r：重启”,“-h：休眠”，“-l：注销”。</p><p>  ​    -t 为倒计时形式。</p><p>  ​    time为倒计时的时间，单位为秒。</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    system("shutdown -f -t 300"); //五分钟后强制关机    //system("shutdown -s -t 300");//五分钟后关机    // system("shutdown -r -t 300");//五分钟后重启    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-在某时刻关机"><a href="#1-2-2-在某时刻关机" class="headerlink" title="1.2.2 在某时刻关机"></a>1.2.2 在某时刻关机</h4><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/at%E8%A2%AB%E5%BC%83%E7%94%A8%E5%90%8E%E5%A6%82/f2fd63e0-7f52-49cb-854f-1f505a6edee1">在11:11时刻关机</a></p><h3 id="1-3-取消上边的关机命令"><a href="#1-3-取消上边的关机命令" class="headerlink" title="1.3 取消上边的关机命令"></a>1.3 取消上边的关机命令</h3><p>命令行输入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shutdown -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车。</p><h2 id="2-有啥用呢？"><a href="#2-有啥用呢？" class="headerlink" title="2. 有啥用呢？"></a>2. 有啥用呢？</h2><p>首先说启动那个。</p><h3 id="2-1-cmd启动命令"><a href="#2-1-cmd启动命令" class="headerlink" title="2.1 cmd启动命令"></a>2.1 cmd启动命令</h3><h4 id="2-1-1-恶搞。"><a href="#2-1-1-恶搞。" class="headerlink" title="2.1.1 恶搞。"></a>2.1.1 恶搞。</h4><p>可以写一个for循环连续打开同一个程序多次。吓唬一下。当然。别弄成百上千次。我没试过，也不敢试。</p><p>但前提是你需要了解他（她）电脑程序安装的布局。如果他（她）没有整理电脑的习惯。那就好说了，每个程序都安装在 C 盘，不需要去了解。</p><pre class="line-numbers language-none"><code class="language-none">C:\Program FilesC:\Program Files (x86)//懂得都懂<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>QQ，微信，各个视频软件不给他安排上？让他开开眼？</p><h4 id="2-1-2-桌面启动程序"><a href="#2-1-2-桌面启动程序" class="headerlink" title="2.1.2 桌面启动程序"></a>2.1.2 桌面启动程序</h4><p>可以用c++或C语言的桌面开发，写一个自己的桌面启动程序。一个图标，一个点击事件，一个启动就建成了。</p><h3 id="2-2-cmd-关机命令"><a href="#2-2-cmd-关机命令" class="headerlink" title="2.2 cmd 关机命令"></a>2.2 cmd 关机命令</h3><h4 id="2-2-1-恶搞"><a href="#2-2-1-恶搞" class="headerlink" title="2.2.1 恶搞"></a>2.2.1 恶搞</h4><p>也是恶搞。</p><h4 id="2-2-2-平时省劲"><a href="#2-2-2-平时省劲" class="headerlink" title="2.2.2 平时省劲"></a>2.2.2 平时省劲</h4><p>平时关机需要点至少两下。如果是个生成的exe程序，或者bat文件，双击即可。</p><h4 id="2-2-3-省电"><a href="#2-2-3-省电" class="headerlink" title="2.2.3 省电"></a>2.2.3 省电</h4><p>有的时候下载东西。但是自己有事不能看着，这个命令就能用了。大概估算时间。然后设置下就行了。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（待优化）python入门</title>
      <link href="/2021/08/21/%EF%BC%88%E5%BE%85%E4%BC%98%E5%8C%96%EF%BC%89python%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/21/%EF%BC%88%E5%BE%85%E4%BC%98%E5%8C%96%EF%BC%89python%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假期自学，代码都是自己看视频时联想敲得，与任何教程无关。为了腾电脑的地方，顺便复习下，学习后边的内容，就整理了下之前敲得。注释与解释不太多（别幻想别人写一大堆注释，有写注释的习惯吗），看的话凑活看，不懂得可以联系me。其他内容持续更新。</p><p>python版本:3.6.6</p><p>python在线运行代码：-&gt;&gt;&gt;&gt; [菜鸟在线 Editor](<a href="https://www.runoob.com/try/runcode.php?filename=HelloWorld&amp;type=python3">菜鸟教程在线编辑器 (runoob.com)</a>)-&gt;&gt;&gt;&gt;</p><h2 id="基本输入输出"><a href="#基本输入输出" class="headerlink" title="基本输入输出"></a>基本输入输出</h2><p>输入  input(string)。string 为提示的语句。</p><p>输出  print(value)。括号内可以是任意变量名，或者值。</p><p>功能很多，后边还有。</p><h2 id="1-if…elif…else"><a href="#1-if…elif…else" class="headerlink" title="1. if…elif…else"></a>1. if…elif…else</h2><ul><li><p>if条件中 且 用‘and’ 或 用‘or’</p></li><li><p> keyword: “产生随机字符串”，</p></li></ul> <pre class="line-numbers language-python" data-language="python"><code class="language-python"> ##  if条件中 且 用‘and’ 或 用‘or’  n = input("输入任意数字")if int(n) % 2 == 0 and n != "0":    print("输入为偶数")elif int(n) % 2 != 0:    print("输入为奇数")else:    print("输入非数字或 “0” ")  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-运算符、文件写入、id"><a href="#2-运算符、文件写入、id" class="headerlink" title="2. 运算符、文件写入、id()"></a>2. 运算符、文件写入、id()</h2><h3 id="2-1运算符"><a href="#2-1运算符" class="headerlink" title="2.1运算符"></a>2.1运算符</h3><h4 id="2-1-1-算数与赋值运算符"><a href="#2-1-1-算数与赋值运算符" class="headerlink" title="2.1.1 算数与赋值运算符"></a>2.1.1 算数与赋值运算符</h4><p>​    几个与其他语言不同，或比较特殊的几个。</p><p>​      ** ：幂，如2**5为2^5^ 。</p><p>​      //  ：取整除，“/”，所得结果带小数部分。“//”，结果只有整数部分。</p><p>​      /=、//=、**=：类比理解。</p><h3 id="2-1-2-逻辑运算符"><a href="#2-1-2-逻辑运算符" class="headerlink" title="2.1.2 逻辑运算符"></a>2.1.2 逻辑运算符</h3><p>​    在条件组合时不是其他语言那样  “||”, “&amp;&amp;”,  “!”。</p><ul><li>“||” 用 “or” 替换</li><li>“&amp;&amp;” 用 “and” 替换</li><li>“!” 用 “not” 替换</li></ul><h3 id="2-1-3-位运算符"><a href="#2-1-3-位运算符" class="headerlink" title="2.1.3 位运算符"></a>2.1.3 位运算符</h3><p>​    &amp; <sup>与</sup> ， | <sup>或</sup>， ^ <sup>异或</sup> ， ~ <sup>取反</sup>， &lt;&lt; <sup>左移</sup>， &gt;&gt; <sup>右移</sup>。运算只针对于二进制数，运算逻辑与其他语言相同。</p><p>其中用到  <mark>格式化输出字符串</mark> 。可通过目录前往了解学习。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  encoding:utf-8#  keyword:“input”，“逻辑运算符”，“&gt;&gt;”，“&lt;&lt;”，“|”，“^”,#      “变量地址”from os import errora = input("输入字符串")x = input("输入一个数 X:")# 输入xtry:    x = int(x)except:    print("输入数据有误!")    exit(0)# 输入yy = input("输入一个数Y:")try:    y = int(y)except:    print("输入数据有误!")    exit(0)templea = "% 8s\n% 10d\n"templeb = "{0: &gt;9s}\n{1: &gt;#20b}\n"templec = "{0: &gt;9s}\n{1: &gt;#20b}\n{2: &gt;#20b}\n"a += "\n"prs1 = [    ("原数(x):", x),    ("原数(y):", y),    ("值id(x)：", id(x)),]prs2 = [    ("二进制(x):", x),    ("二进制(y):", y),    ("右，移(x&gt;&gt;2):", x &gt;&gt; 2),    ("左，移(x&lt;&lt;2):", x &lt;&lt; 2),]prs3 = [    ("异或(x^y,y^x):", x ^ y, y ^ x),    ("_或(x|y，y|x):", x | y, y | x),]for item in prs1:    a += templea % itemfor item in prs2:    a += templeb.format(item[0], item[1])for item in prs3:    a += templec.format(item[0], item[1], item[2])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-while"><a href="#3-while" class="headerlink" title="3. while"></a>3. while</h2><p>与其他语言没大区别，就是没括号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">string = "A"#  根据字符取ascll码值a = ord("A")i = 0while i &lt; 60:  #  根据ascll码值取字符  st ring += chr(a)  if i % 3 == 0: print()  print(a, ":" + chr(a), end=" ")  i = i + 1  a = a + 1print(string)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-序列"><a href="#4-序列" class="headerlink" title="4. 序列"></a>4. 序列</h2><p>连续内存空间数据存储，每个项都有唯一值（成为索引或位置）指向。</p><p>序列结构有：</p><ul><li><p>列表 [ list,list,list ]。</p></li><li><p>元组 (tuple, tuple, tuple)。</p></li><li><p>字典 { dictionary, dictionary, dictionary }。</p></li><li><p>字符串 string</p><blockquote><p>​        定义时：序列为  [ ] ,元组为 ( ) ,字典为 { } 。每项都可以是其他数据结构，即各项之间没有必要的限制条件。</p></blockquote></li></ul><h3 id="4-1-列表"><a href="#4-1-列表" class="headerlink" title="4.1 列表"></a>4.1 列表</h3><ul><li><p>通过确定值初始化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">listname =[ value1,value2 ,value3 ,value4 ,value5 ,value6]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过表达式初始化。</p><ol><li><p>生成指定范围列表。</p><p>使用range函数控制生成元素数量，<code>listname =[expression for var in range]</code></p><ul><li><p>expression 。当前生成元素var进行的运算。</p><blockquote><p><code>do0</code>  或</p><p><code>do1 if case1 else if do2 else do3</code></p></blockquote></li><li><p>var 。当前生成元素的变量名。</p></li><li><p>range 。 range函数指定生成数量。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">listname=[i+0.1 for i in range(20)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据列表生成列表。</p><p>就是在 1 的基础上用一个列表替换了range函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">listname=[i for i in range(10)] #先 生成一个列表newList=[ i%5+1 for i in listname]# 根据那个生成这个。全部变为1~5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加筛选条件。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">listname=[i for i in range(20)] #再 生成一个列表newList=[ i if i%2==0 else i*10 for i in list if i &lt;10]# 根据那个 添加筛选条件并生成新的。首先判断是否小于10，然后再看前边的条件怎么进行运算。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>以上几种操作，等同于</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">list=[]for item in list:if  item... :        #执行操作    elif item... :        #执行操作    else:        #执行操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-1-1-列表的基本操作"><a href="#4-1-1-列表的基本操作" class="headerlink" title="4.1.1 列表的基本操作"></a>4.1.1 列表的基本操作</h4><ul><li><p>索引（Indexing）。列表可通过索引取值，与其他编程语言数组操作一样。</p><ul><li><p><code>listname.index ( value )</code>。返回指定值第一次出现的索引值。</p><blockquote><p>指定值不存在会报错，所以建议结合 in 操作。（在4.1.2）</p></blockquote></li></ul></li><li><blockquote><p><mark>序列支持负数索引</mark>, 当索引值为负时从右向左数</p></blockquote></li><li><p>切片（Slicing）。取出整个序列的连续一部分。</p><blockquote><p>list ( start , end,step)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">name = ["张三", "张四", "张五", "李四", "李五"]number = [1, 2, 3, 4]namenum = name + numberprint("namenum[1:5:2]", namenum[1:5:2], "")# 切片[ 从第 2 个开始，到第 6 个以前，间隔为 2 ]print("namenum[:5:]", namenum[:5:], "")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加（Adding）。两个序列所有元素直接相加。</p></li><li><p>乘（Multiplying）。序列 乘一个整数，产生一个同样的序列重复整数次的新序列。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print("")name=["张三","张四","张五","李四","李五"]number=[1,2,3,4]#  乘print(name*3)#  加print("name+number", name+number,"")#  切片【从第二个开始，到第六个以前，间隔为2】namenum=name+numberprint("namenum[1:5:2]",namenum[1:5:2],"")print("namenum[:5:]",namenum[:5:],"")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-1-2-列表的常见方法"><a href="#4-1-2-列表的常见方法" class="headerlink" title="4.1.2 列表的常见方法"></a>4.1.2 列表的常见方法</h4><ul><li><p>len。 返回列表的长度。<code>len ( list )</code>。</p></li><li><p>max。输出列表中的最大值。</p><blockquote><p>只支持元素全部为数字类型的列表。<code>max ( list )</code></p></blockquote></li><li><p>min。用法同max。</p></li><li><p>in。返回 bool 值。<code>value in list</code>。</p><blockquote><p>只能判断一层，如果子元素为列表或者元组之类的结构，则不会判断其内部值。</p></blockquote></li><li><p>not in 。同上。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">numbers=[1.2,123.1,456,486,456,156,111,222,333]print(numbers)print("最大值",max(numbers))print("最小值",min(numbers))print("长度",len(numbers))x=456print("是否存在",x,x in numbers)y=678print("是否不存在",y,y not in numbers)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-列表的遍历"><a href="#4-1-3-列表的遍历" class="headerlink" title="4.1.3 列表的遍历"></a>4.1.3 列表的遍历</h4><ul><li><p>for <b style="color:brown">item</b> in  <b style="color:brown">list</b>。 依次把list的值赋值给item，然后进行其他操作。对原列表无影响。</p></li><li><p>for <b style="color:brown">index, item</b> in <b style="color:brown">enumerate <b style="color:#E0A418">( list&nbsp;)</b></b>。</p><p>  ​    index为索引值，item为索引值对应的项。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name = ["dage", "erge", "sange", "laosi", "laowu", "xiaoliu"]print(name)a=0for linshide in name:  if a % 2==0 :    ## 换行    print("\n")  print("\t"+linshide,end="")## 不换行打印  a=a+1 ## python不支持自增|自减运算for xuhao, name in enumerate(name):  if xuhao % 2==0 :    print("")  print("\t序号是：" + str(xuhao), "\t名字是" + name, end="")##不换行输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-4-列表的-增-删-改"><a href="#4-1-4-列表的-增-删-改" class="headerlink" title="4.1.4 列表的 增 删 改"></a>4.1.4 列表的 增 删 改</h4><ul><li><p>增，<code>apend（）</code>。</p></li><li><p>删。</p><ul><li><p><code>del listname[ index ]</code>。直接删除index索引值对应的值，后续元素前移。</p></li><li><p><code>listname.remove( “value” )</code></p><blockquote><p>删除不存在的值会报错。所以可结合 in 操作使用。</p></blockquote></li><li><p>listname.pop()。 删除并返回最后一个元素。</p><blockquote><p>通过与append结合使用，可以模拟栈结构。后进先出</p></blockquote></li></ul></li><li><p>改。 <code>listname [ index ] = value</code></p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">name = ["dage", "erge", "sange", "laosi", "laowu", "xiaoliu"]print("\n定义的数组为：")print(name)#  添加:name.append("laomo")print("\n添加一个后的数组：" )print(name)#  通过索引获取指定值。直接重新赋值。strint=name[0]="dageda"print("\n添加一个后再修改下的数组：")print(name)# 删除指定“dage” 即 删除name[2]del name[0]print("\n删除 name[0] 的数组：")print(name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-1-5-列表的统计求和"><a href="#4-1-5-列表的统计求和" class="headerlink" title="4.1.5 列表的统计求和"></a>4.1.5 列表的统计求和</h4><ul><li><p>统计。返回指定值在列表中出现的次数。<code>list.count(value)</code></p><blockquote><p>不存在时返回 0，所以不用判断是否存在。</p></blockquote></li><li><p>求和。统计各项的和。可指定统计开始的位置。<code>sum( listname [ index ] )</code> 或<code>sum( listname )</code> </p><blockquote><p>仅限元素全为数字格式时。</p></blockquote>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">nums=[123,456,654,123,987,147,258,654,852,147,741,852]nums_plus=nums*2# 统计某一元素出现次数if 147 in nums_plus :    print("147出现次数为\t:"+ str(nums_plus.count(147)))else:    print(str(147)+"不存在")    print("nums和:"+str(sum(nums))+"\nnums_plus和为\t:"+str(sum(nums_plus)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>str ( value ) ：强行转换为字符串。print操作必须全部为字符串，如果不转换，则会提示数字无法与字符串相加。</p></blockquote><h4 id="4-1-6-列表的排序"><a href="#4-1-6-列表的排序" class="headerlink" title="4.1.6 列表的排序"></a>4.1.6 列表的排序</h4><ul><li><p>sort。在原列表上排序。<code>listname.sort()</code> 或 <code>listname.sort( key=None ,reserve=False)</code></p><blockquote><p>​        后者括号中的两项都可以省略。</p><p>​        第一项为指定排序时是否忽略大小写。<code>key=None</code> 或<code>key=str.functionName</code> 这项的意思是，指定排序时每个列表元素进行的转换。 </p><p>​        第二项为指定排序是否为逆序的。</p></blockquote></li><li><p>sorted。返回已排序的列表。<code>sort(listname)</code> 或 <code>sorted ( listname , key = None ,reserve = False )</code> </p><blockquote><p>规则同上。</p></blockquote>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"># 定义一种排序 keydef sortkey(nu):    return nu%10# 定义俩序列names=["toms","Jone","Tony","alice","obma"]numbers=[123,456,852,147,369,741,963]print("\n原序列names:")print(names)print("\n原序列numbers:")print(numbers)#排序#临时列表，保留原列表term1=namesterm2=numbersterm1.sort()term2.sort()print("\n升序排列names(区分大小写)：")print(term1)#添加keyterm1=namesterm1.sort(key=str.lower) # str.lower 字符串全部转换为小写的方法。print("\n升序排列names(不区分大小写)：")print(term1)print("\n升序排列numbers：")term2=numbersprint(term2)# 原列表term2.sort(key=sortKey)# 按照开头定义的key排序print(term2)# 排序后print("\n降序排列numbers：")term1=numbersterm2= sorted(term1,key=sortKey,reverse=True)print(term2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-元组"><a href="#4-2-元组" class="headerlink" title="4.2 元组"></a>4.2 元组</h3><ul><li>元组不能对元素赋值，即修改，不能删除一个或多个元素，只能整个删除。若要修改，可以整个元组重新赋值。</li><li>元组可进行组合，直接进行 + ，*。</li><li>列表的基本操作与常用方法元组也可使用。</li></ul><p>序列为’[]’,元组为’()’,字典为’{}’。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># encoding:utf-8empty=()num = 156st = "string_a"one_index = [12, 45, 65, 78]tup1 = ("123456321",)##? 声明一个很复杂的元组tup2 = ( num, st, one_index)print("有一个元组为:",tup2)tup3 = ("ab", "cd", "ef", 98765132, "#$%$&amp;")alltuple = tup1 + tup2 + tup3print("组合后的元组：",alltuple )##? 输出指定序号元素t = input("请输入元组序数" + "1~" + str(len(alltuple)))print(alltuple[int(t) - 1]) # 序号从 0 开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-字典"><a href="#4-3-字典" class="headerlink" title="4.3 字典"></a>4.3 字典</h3><p>类似于我们使用的字典，一个关键字，然后对应一些内容。查找时根据关键字查找。</p><h4 id="4-3-1-字典的生成"><a href="#4-3-1-字典的生成" class="headerlink" title="4.3.1 字典的生成"></a>4.3.1 字典的生成</h4><p>序列为’[]’,元组为’()’,字典为’{}’。</p><ul><li><p>直接赋值。 <code>dicti_b = {"拉丁语": "Latin", "鸟语": "!&amp;*/"}</code> </p></li><li><p>dict 生成。</p><blockquote><p>​        这里有个坑。如果组合的两部分不是元组或者列表，则合成的字典回事乱序的，且是随机组合的。即，用圆括号，或者方括号，别用花括号。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">English = ["Chinese", "English", "Japanese", "Russian", "French", "German", "Korean"]Chinese = ["中文", "英语", "日语", "俄语", "法语", "德语", "韩语"]didi = zip(Chinese, English)dicti= dict(didi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 输出 clear 后的字典 d 中的元素及个数print("dicti_c clear()后" + "dicti_c还有" + str(len(dicti_c)) + "个元素")print(dicti_c)# del用于删除对象del dicti_dprint("delete后的 e")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-字典基本操作"><a href="#4-3-2-字典基本操作" class="headerlink" title="4.3.2 字典基本操作"></a>4.3.2 字典基本操作</h4><p>先 生成一个字典。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name = ("吴晓咖","刘佳怡","徐之才","单久思","曹侃儿","开俊峰","倪吉本","苗人凤","荣家达","狄俊娥","牛春波","莫桑石",)sign = ("子鼠", "丑牛", "寅虎", "卯兔", "辰龙", "巳蛇", "午马", "未羊", "申猴", "酉鸡", "戌狗", "亥猪")# 生成。roster = dict( zip(name, sign))print(roster)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>取值。直接用 key 获取。或者使用 get() 方法。</p><blockquote><p>​        如果key不存在，则会报错。所以可结合 in 操作。或者get()方法。</p><p>get()方法获取的key不存在时会返回none。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(roster["徐之才"])print(roster.get("徐才"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加。通过赋值的形式。<code>roster[key_name] = key_value</code></p></li><li><p>删除。使用 del 操作。<code>del roster[ “徐之才” ]</code></p></li><li><p>清除。 clear() 。清除字典里的所有项。<code>dictionaryName.clear()</code>。</p></li><li><p>遍历。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 遍历输出值for xxoo in roster.items():    print(xxoo)# 只输出值，不输出标签的遍历。for ooxx in roster.keys():    print(ooxx)# 值与标签双遍历。for key, value in roster.items():    print("键是：" + key + "值为：" + value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-4-字符串"><a href="#4-4-字符串" class="headerlink" title="4.4 字符串"></a>4.4 字符串</h3><p>定义两个字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">poem_first = "老夫聊发少年狂，左牵黄，右擎苍，锦帽貂裘，千骑卷平冈。为报倾城随太守，亲射虎，看孙郎。"poem_second = "酒酣胸胆尚开张。鬓微霜，又何妨！持节云中，何日遣冯唐？会挽雕弓如满月，西北望，射天狼。"letter = "  \n  Transportation has been greatly changed in the past few years. In ancient days, people used to travel by horse or carriage. \n    \t"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-4-0-字符串读取"><a href="#4-4-0-字符串读取" class="headerlink" title="4.4.0 字符串读取"></a>4.4.0 字符串读取</h4><ul><li>切片操作。</li><li>完全读取，当个变量。</li></ul><h4 id="4-4-1-字符串基本操作"><a href="#4-4-1-字符串基本操作" class="headerlink" title="4.4.1 字符串基本操作"></a>4.4.1 字符串基本操作</h4><ul><li><p>计算字符串长度。<code>len(str) </code></p></li><li><p>拼接。使用+操作。<code>str1+str2</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">str_s = poem_first + poem_second<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>去除。</p><ul><li><p>截取。<code>string [start : end : step]</code> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print("分片字符串为:", poem_first[0:21:4]) # 0~20，每4个字符截断一次。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>end 为最后一个字符的后一个索引。即表示到哪个字符之前。</p><p>step 为截断字符串的长度。</p></blockquote></li><li><p>替换。strip()、lstrip()、rstrip()、upper()、lower()、replace()</p><p><code>str.strip([chars])</code>—— 去除字符串左右侧的空格和特殊字符。</p><p><code>str.lstrip([chars])</code>—— 去掉左侧空格和特殊字符。</p><p><code>str.rstrip([chars])</code>—— 去掉右侧空格和特殊字符。</p><p><code>str.upper()</code> —— 全部变大写</p><p><code>str.lower()</code>—— 全部变小写</p><p><code>str.replace(oldchar,newchar)</code> —— 用 newchar 替换 oldchar，返回替换后的字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 去除两侧空格或特殊字符print("\n英语作文去空格:\t", letter.strip(" "))# 去除左侧空格或特殊字符print("\n英语作文去空格:\t", letter.lstrip(" "))letter.replace("@","t")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        str：要操作的字符串，chars可选：要去掉的字符或者字符串，默认去掉换行、空格、回车、制表符。</p><p>​        后两个方法，一个去除左侧的，一个去除右侧的。</p></blockquote></li></ul></li><li><p>转换。</p><ul><li><p>分割。<code>split(sep, maxsplit)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">strs = poem_first.split("。", -1)print("整首诗按句号分割为：")for linshi in strs:    print("@" + linshi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        sep : 分割的字符或字符串，默认为空格换行符之类的。</p><p>需要注意，sep在分割后狙消失了。</p><p>​        maxsplit：分割的次数。默认为能割几次割几次。<code>-1</code> 效果一样。</p><p>需要注意，<code>maxsplit</code>为分割次数，产生<code>maxsplit +1</code>项</p></blockquote></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  以 GBK 编码格式输出字符串长度print("\nGBK计数长度为：" + str(len(poem_first.encode("gbk"))))#  以 UTF-8 编码格式输出字符串长度print("\nUTF-8计数长度为：" + str(len(poem_first.encode())))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-字符串检索-amp-索引"><a href="#4-4-2-字符串检索-amp-索引" class="headerlink" title="4.4.2 字符串检索&amp;索引"></a>4.4.2 字符串检索&amp;索引</h4><ul><li><p>定义字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mulanshi = "唧唧复唧唧，木兰当户织。不闻机杼声，唯闻女叹息。问女何所思，问女何所忆。女亦无所思，女亦无所忆。昨夜见军帖，可汗大点兵，军书十二卷，卷卷有爷名。阿爷无大儿，木兰无长兄，愿为市鞍马，从此替爷征。东市买骏马，西市买鞍鞯，南市买辔头，北市买长鞭。旦辞爷娘去，暮宿黄河边，不闻爷娘唤女声，但闻黄河流水鸣溅溅。旦辞黄河去，暮至黑山头，不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。万里赴戎机，关山度若飞。朔气传金柝，寒光照铁衣。将军百战死，壮士十年归。归来见天子，天子坐明堂。策勋十二转，赏赐百千强。可汗问所欲，木兰不用尚书郎，愿驰千里足，送儿还故乡。爷娘闻女来，出郭相扶将；阿姊闻妹来，当户理红妆；小弟闻姊来，磨刀霍霍向猪羊。开我东阁门，坐我西阁床，脱我战时袍，著我旧时裳。当窗理云鬓，对镜帖花黄。出门看火伴，火伴皆惊忙：同行十二年，不知木兰是女郎。雄兔脚扑朔，雌兔眼迷离；双兔傍地走，安能辨我是雄雌？"# 目标字符串mulan = "木兰"# 操作字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>存在？</p><p>in 或 not in 可结合切片操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  检测某一字符创是否存在于目标字符串（可以加入切片操作）print(mulan in mulanshi[0:5:])print(mulan in mulanshi[0:10:])print(mulan not in mulanshi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找</p><p>find、rfind、index、count、startswith、endswith</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  find()   输出指定 “木兰” 在 “木兰诗” 中第一次出现的索引。print(mulanshi.find(mulan, 7, 390))#  rfind()  输出指定 “木兰” 在 “木兰诗” 中最后一次出现的索引。print(mulanshi.rfind(mulan))#  index()  输出“女”第一次出现的位置。print(mulanshi.index("女"))#  count()  输出“木兰”出现次数。print(mulanshi.count("木兰")#  判断是否以指定字符串结尾或者开始。同样可加入切片。print("startswith:唧唧复唧唧",mulanshi.startswith("唧唧复唧唧", 0, 20))print("startswith:雄雌？",mulanshi.endswith("雄雌？"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        rfind () 为从右开始查找。即返回最后一次出现的索引值。</p><p>所有的索引都是从 0 开 始。</p></blockquote></li></ul><h4 id="4-4-3-格式化字符串"><a href="#4-4-3-格式化字符串" class="headerlink" title="4.4.3 格式化字符串"></a>4.4.3 格式化字符串</h4><h5 id="4-4-3-1-格式"><a href="#4-4-3-1-格式" class="headerlink" title="4.4.3.1 % 格式"></a>4.4.3.1 % 格式</h5><p>% [ - ] [ + ] [ 0 ] [ m ] [ .n ] typecode</p><table><thead><tr><th align="center">符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">-</td><td align="left">左对齐，负数加符号，正数不变</td></tr><tr><td align="center">+</td><td align="left">右对齐，与上一个比，正数加正号。</td></tr><tr><td align="center">0</td><td align="left">右对齐，正不加。负加负号，0填充空白，一般与m同用</td></tr><tr><td align="center">m</td><td align="left">填充后的宽度。</td></tr><tr><td align="center">.n</td><td align="left">小数点后精度</td></tr></tbody></table><table><thead><tr><th align="left">typecode</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">%r</td><td align="left">字符串 (repr()显示)</td></tr><tr><td align="left">%g</td><td align="left">指数(e)或浮点数 (根据显示长度)</td></tr><tr><td align="left">%s</td><td align="left">字符串(str()显示)</td></tr><tr><td align="left">%G</td><td align="left">指数(E)或浮点数 (根据显示长度)</td></tr><tr><td align="left">%c</td><td align="left">单个字符输出</td></tr><tr><td align="left">% b 、o、d（i）、x</td><td align="left">二、八、十、十六进制整数</td></tr><tr><td align="left">% e（E）</td><td align="left">指数(基底写为e(E))</td></tr><tr><td align="left">% f (F)</td><td align="left">浮点数,与上相同</td></tr><tr><td align="left">%%</td><td align="left">字符”%”</td></tr></tbody></table><h5 id="4-4-3-2-代码"><a href="#4-4-3-2-代码" class="headerlink" title="4.4.3.2 %代码"></a>4.4.3.2 %代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">template_a = "%s \n市值:%07d 亿元\n网站：https://www.%s.com\n老总:%s\n"temps = [    ( "百度",3873, "baidu", "李彦宏"),    ("阿里巴巴",24500,  "alibaba", "马云"),    ("腾讯",44200,  "tencent", "马化腾"),]for ls in temps:    print(template_a % ls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如代码所示，先声明一个模板，然后再套用。</p><ul><li>制作模板。用以上的符号加其他字符串组成。</li><li>套用。模板 % 目标字符串即可。</li></ul><p>提醒，这种方式为最早的方案，目前官方主推下边的format方式。</p></blockquote><h5 id="4-4-3-3-format-格式"><a href="#4-4-3-3-format-格式" class="headerlink" title="4.4.3.3 format 格式"></a>4.4.3.3 format 格式</h5><p>{  [ index ] <b style="color:#EF19E5"> [ <b style="color:#40D72F"> [ :&nbsp;<b style="color:#8417F7">[ fill ] align&nbsp;</b> ] [&nbsp;sign ]&nbsp; [ # ] [&nbsp;width ]&nbsp; [ .precision ] [&nbsp;type ] </b> ]</b>  }</p><table><thead><tr><th align="left">位置符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">默认按顺序自动分配。可选参数，指定索引位置，从0开始。</td></tr><tr><td align="left">fill</td><td align="left">可选参数，空白处填充的字符。</td></tr><tr><td align="left">align</td><td align="left">可选参数， 用于指定对齐方式。</td></tr><tr><td align="left">&lt;</td><td align="left">左对齐。</td></tr><tr><td align="left">&gt;</td><td align="left">右对齐。</td></tr><tr><td align="left">^</td><td align="left">居中对齐。需指定宽度。</td></tr><tr><td align="left">=</td><td align="left">右对齐。只对数字类型有用，尤其用于输出负数。</td></tr><tr><td align="left"><br>sign</td><td align="left">可选参数，用于指定有无符号数<br>‘+’：正数添加‘+’号,负数添加‘-’号。<br>‘-‘：只有负号添加符号。<br>‘ ‘:正数加空格补齐，负数加负号</td></tr><tr><td align="left">#</td><td align="left">可选参数，加#时输出二、八、十六进制会添加  0b  0o  0x 前缀</td></tr></tbody></table><table><thead><tr><th align="left">type</th><th align="left">…….</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">含义</td></tr><tr><td align="left">s</td><td align="left">对字符串格式格式化</td></tr><tr><td align="left">b</td><td align="left">十进制数转换为二进制再格式化；</td></tr><tr><td align="left">d</td><td align="left">十进制数</td></tr><tr><td align="left">o</td><td align="left">十进制数转换为八进制再格式化；</td></tr><tr><td align="left">c</td><td align="left">十进制数转换为对应Unicode字符</td></tr><tr><td align="left">%</td><td align="left">显示百分比(默认小数后六位)</td></tr><tr><td align="left">x,X</td><td align="left">十进制数转换为十六进制再格式化</td></tr><tr><td align="left">e,E</td><td align="left">转换为科学计数法再格式化</td></tr><tr><td align="left">f,F</td><td align="left">转换为浮点数再格式化(默认六位小数)</td></tr><tr><td align="left">g,G</td><td align="left">e与f或E与F之间互换</td></tr></tbody></table><h5 id="4-4-3-4-代码"><a href="#4-4-3-4-代码" class="headerlink" title="4.4.3.4 代码"></a>4.4.3.4 代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">strin1 = "\n马云,\t身价:\t{0:,.2f}".format(13.4567)strin2 = "\n刘强东,\t身价:\t{0:.3f}\n".format(21.5153)strin3 = """\nπ为：{:.3f}\n'101'二进制：{:#b}\n'101'八进制：{:#o}\n'101'十六进制：{:#x}\n""".format(3.14159, 101,101,101 )strin4 = """\nabc：{abc}\nbcd：{bcd:#x}\ncde：{cde:}\n""".format(abc="11211", bcd=121, cde=[123, 456, 789])print(strin1,strin2,strin3,strin4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如上所示，使用方法为字符串后加 “.” 然后 format（）嵌入数值。有演示的两种方法：</p><ul><li>按照顺序，依次列出。</li><li>指定名称，然后根据名称依次赋值。</li></ul></blockquote><h2 id="5-正则表达式"><a href="#5-正则表达式" class="headerlink" title="5. 正则表达式"></a>5. 正则表达式</h2><p>基础正则了解：<a style="font-family:’kaiti’;">[点我]([正则语法整理 | X-Y-Z`s Blog (gitee.io)](https://blogofxyz.gitee.io/2021/08/14/正则语法整理/))</a></p><h3 id="5-1-匹配"><a href="#5-1-匹配" class="headerlink" title="5.1 匹配"></a>5.1 匹配</h3><ul><li><p>match</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import reelements = [    "15946295618",    "78945631245",    "48651534582@qq.com",    "12348621@163.com" ,    "15648934529@gmail.com",    "萨博隔热垫石膏板",    "调查表身高多少",]regular_express_a = [    r"[0-9]{0,12}@(qq|gmail|163)\.com",    r"1[0-9]{10}",    r"[^0-9a-zA-Z]",]for i in elements:    for index, j in enumerate(regular_express_a):        ret_a = re.match(j, i)        if ret_a != None:            if index == 0:                print("邮箱:", i)                break            elif index == 1:                print("手机号:", i)                break            elif index == 2:                print("其他的合规字符串:", i)                break        else:            pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全匹配字符串。不考虑换行，即使设置为自动换行也按一行匹配。</p></li><li><p>search</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import restrs="i have a 98k. other all name it ojbk-.i haven't named it ojbk+.and it have a brother awm.it is a good gun."regular_express_b = r"(awm|ojbk)[-|+]"result = re.search(regular_express_b, strs)if result!=None:    print(result)    print(result.start(),result.end(),result.group(),result.groups())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>返回一个类，详细内容，可取官网查看。</p></blockquote><ul><li>官方文档：<a href="https://docs.python.org/zh-cn/3/library/re.html">正则表达式操作 </a>：</li></ul></li><li><p>findall</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import restrs="i have a 98k. other all name it ojbk-.i haven't named it ojbk+.and it have a brother awm.it is a good gun."regular_express_b = r"(awm|ojbk)[-|+]"result = re.findall(regular_express_b, strs)if result!=None:    print(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>返回所有匹配到的结果，以列表形式。</p></blockquote></li></ul><h3 id="5-2-替换"><a href="#5-2-替换" class="headerlink" title="5.2 替换"></a>5.2 替换</h3><p>re.sub(pattern,string)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import restring = "蒹葭苍苍，白露为霜。所谓伊人，在水一方。溯洄从之，道阻且长。溯游从之，宛在水中央。\n蒹葭萋萋，白露未晞。所谓伊人，在水之湄。溯洄从之，道阻且跻。溯游从之，宛在水中坻。\n蒹葭采采，白露未已。所谓伊人，在水之涘。溯洄从之，道阻且右。溯游从之，宛在水中沚。\n"letters = "     Transportation has been greatly changed in the past few years. In ancient days, people used to travel by horse or carriage. The journey was often tiring and tedious. Then people had buses, trains and ships, which could shorten the time of the long-distance trip."regular_express = [r"(蒹葭|伊人)", r"(en|in|an)"]print(re.sub(regular_express[0], "xx", string))print(re.sub(regular_express[1], " --XXXn-- ", letters))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-分割"><a href="#5-3-分割" class="headerlink" title="5.3 分割"></a>5.3 分割</h3><p>re.split(pattern,string)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import renames = "焦英武、杨清双、吕纪领、张建春、焦灵卫、赵现伟\n陈秀荣、郎波、程磊、刘子祥、谢绍明 胡红军、张克龙、戴怀海 戴怀敏、张国勤\n李小璇、李军耐、张文博、赵联、肖鹏、边宪武、李伟、李宇、夏廷堂、韩世民、董燕平、张正银\n魏国琼、肖桂茂、李德安、白建永、张旭贵、李香明\n霍建辉、吴旭峰、陈云祥、丁连奇、王遂现、范小锋\n杨宗兵、向书章、李金民、戴家元、刘传禄、贺炳强、云秀芳\n刘善刚、姚海军、贾天义、李加有、方承、杨涛\n杨天海、王富军、张中华、王成林、秦振贵、尚鲜军、李友强、尚加聪"pattern = r"( |、|\n)"tup = re.split(pattern, names)for index, item in enumerate(tup):    if index % 2 == 0:        print("第", int(index / 2), "项：", item)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考 </p><ul><li>官方文档：<a href="https://docs.python.org/zh-cn/3/library/re.html">正则表达式操作 </a>：</li></ul><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><h3 id="6-1普通函数"><a href="#6-1普通函数" class="headerlink" title="6.1普通函数"></a>6.1普通函数</h3><p>函数第一行为描述，在多数IDE中进行函数引用时，可显示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def reckon(x,y):    """求长方形面积 x: 长，y: 宽."""    print(        """{str1:{space}&gt;7s}={length:&gt;5d} \n{str2:{space}&gt;7s}={width:&gt;5d} \n{str3:{space}&gt;7s}={squr:&gt;5d} \n""".format(            str1="此长方形长",            str2="此长方形宽",            str3="此正方形面积",            length=x,            width=y,            squr=x * y,            space=chr(12288),        )    )    reckon(int(input("请输入长")) ,int(input("请输入宽")))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-函数默认值"><a href="#6-2-函数默认值" class="headerlink" title="6.2 函数默认值"></a>6.2 函数默认值</h3><p> 当函数中出现有默认值时必须位于参数集的最后</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def R_S(R, pai=3.14, string=""):  """圆求面积"""  print(    "\n\n", string, "\n", "此圆的半径 r={radius: 5d}\n此圆的面积 S= {squr:.3f}".format(      radius=R, squr=R * R * pai ))x = int(input("输入圆的半径"))R_S(x, string="R_S(x):")R_S(x, 3, "R_S(x, 3):")R_S(string="R_S(pai=3.142, R=x):", pai=3.142, R=x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-匿名函数"><a href="#6-3-匿名函数" class="headerlink" title="6.3 匿名函数"></a>6.3 匿名函数</h3><p>临时函数，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  匿名函数 用 lambda 修饰词前缀.y = lambda ds: ds * ds * 3.14print("\n" + str(y(x)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>匿名函数多参</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  传入数组，或多参数。def func(*par):  for i in par:    print(i)    #  参数原理为：定义一个变量的列表，用*来传入列表地址strs = ["语文", "数学", "英语", "物理", "化学"]strss = ["Chinese", [12.0, 45.12, 44.11], 45699, bin(423),hex(423)]func(*strs)print("\n")func(*strss)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-python数据存储原理"><a href="#7-python数据存储原理" class="headerlink" title="7. python数据存储原理"></a>7. python数据存储原理</h2><blockquote><p>返回对象的“标识值”。该值是一个整数，在此对象的生命周期中保证是唯一且恒定的。两个生命期不重叠的对象可能具有相同的 <a href="https://docs.python.org/zh-cn/3/library/functions.html?highlight=id#id"><code>id()</code></a> 值。</p></blockquote><p>以上为官方关于 id () 函数的解释。一般来说，在其他语言中，变量名地址生命周期内唯一确定不变，对应地址存储的数值可变。但 <code>python </code> 却是变量的值决定地址。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x="x"print(id("x"))print(id(x))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上代码将会输出同样的值。主要是因为 python 中对<code>对象</code>这一概念的执著。他把每一个数值也视为对象。当你声明一个变量并赋值时，首先python编译器做的是申请内存存储赋的值，然后把这一变量指向这一内存。所以不同的值对应不同的地址。</p><blockquote><p>当赋的值为简单数据类型时，python不会再申请，而是先查找是否申请过，如果申请过，则直接指向这块内存。否则再申请。<br>        复杂数据类型，则不进行检查。因为怕你一个数组存了全个国家的名字，然后接下来几个变量又来赋值，如果检查，那CPU不是要抽两口烟了。</p></blockquote><p>参考： </p><ul><li><a href="https://blog.csdn.net/zhuzuwei/article/details/80554776">python id()函数和内存分配理解</a></li><li><a href="https://blog.csdn.net/tycoon1988/article/details/38850443">Python id() 函数</a></li></ul><h2 id="8-class"><a href="#8-class" class="headerlink" title="8. class"></a>8. class</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“class”，“从序列中取随机元素”，“从字典中取随机元素”#           “choice”，# encoding:utf-8brand = {"上汽集团": "大众", "东风": "雪铁龙", "奔驰": "Mercedes-Benz", "凯迪拉克": "Cadillac"}produce_country = ["China", "American", "India", "European"]code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"# -----------------class----------------&gt;#class Car:  """ 汽车模型 先生成后赋值 """  Name = ""  Brand = ""  Producer = ""  Produce_Country = ""  def make_success(self):    print(      "生成了一辆小汽车",      "\n名字:" + self.Name,      "\n品牌:" + self.Brand,      "\n生产商:" + self.Producer,      "\n产地:" + self.Produce_Country,      "\n",    )# 一个类中同一方法只能生效最后一次定义。""" 初始化函数与构造函数 括号内不加参数时函数内   def __init__():     brand = self.carname   print("生成了一辆小汽车:222") """# -------------------function-----------------------&lt;##-----------------class-----------------&gt;#def mass_produce(number):  """ 批量造车 """  import random  lis = []  i = 0  while i &lt; number:    i = i + 1    j = 0    name = ""    while j &lt;= 10:      name += code[random.randint(0, len(code) - 1)]      j = j + 1    car = Car()    car.Name = name    car.Brand = random.choice((list(brand)))    car.Produce_Country = random.choice(produce_country)    car.Producer = brand[car.Brand]    lis.append(car)  return lis# ---------------------function----------------------&lt;#numb = int(input("输入生产汽车的数量"))t = mass_produce(numb)for i in t:  i.make_success()print("已成功生产", numb, "辆车")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-访问限制"><a href="#9-访问限制" class="headerlink" title="9. 访问限制"></a>9. 访问限制</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“访问限制”，#  没多大用。。。。。。。# encoding:utf-8class car:  """ produce car """# price: ""# _brand: ""# __color: ""  def __init__(self):    self.price = 4000    self._brand = "asdfa"    self.__color = "red"vehicle = car()print(vehicle.price)print(vehicle._brand)print(vehicle._car__color)vehicle.price = 50vehicle._brand = "qqqqqqqqqqq"vehicle._car__color = "aaaaaaaaaa"print(vehicle.price)print(vehicle._brand)print(vehicle._car__color)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-property"><a href="#10-property" class="headerlink" title="10. property"></a>10. property</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">#  keyword：“属性变化”，“装饰器”，“property”# encoding:utf-8class car:  """计算价格"""  def __init__(self, door, tie):    self.door = door    self.tie = tie    self.band_price = 5000.0#  方法转换为属性  @property  def total_cost(self):    """(door + tie) x 4 + price"""    return (self.door + self.tie) * 4 + self.band_pricespend = car(203, 450)print(spend.total_cost)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-文件操作—-IO"><a href="#11-文件操作—-IO" class="headerlink" title="11. 文件操作—-IO"></a>11. 文件操作—-IO</h2><p>流程为先打开一个文件 （程序中的一个对象），然后对这个对象进行操作。</p><h3 id="11-1-打开"><a href="#11-1-打开" class="headerlink" title="11.1 打开"></a>11.1 打开</h3><p>通过open方法打开一个文件。对于文件是否存在通过方法的参数指定打开方式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">file=open(file, mode,buffering=1,encoding="utf-8")file.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>一定要记得关闭，否则如果是写操作，未关闭则不会写入。如果是读，会一直占用此文件。其他对于此文件的读写操作会被影响，比如删除时会提示文件被占用，无法删除。</p></blockquote><blockquote><ul><li>file 文件路径。可以使用相对路径或者绝对路径。</li><li>mode 文件打开模式。值为以下表所示。</li><li>buffering 指定文件是否进行缓存。</li><li>encoding=“utf-8” 指定此编码格式打开，默认为 GBK格式 打开</li></ul><p>mode 值为以下几种值或者他们的组合。</p></blockquote><p>参数如下。</p><table><thead><tr><th align="center">参数值</th><th align="left">含义</th><th>可组合项</th></tr></thead><tbody><tr><td align="center">w</td><td align="left">指定为写打开。文件存在就覆盖，不存在就创建</td><td>~ +，~ b，~ b+</td></tr><tr><td align="center">r</td><td align="left">指定为只读打开，文件必须已存在。打开后指针在文件开头。</td><td>同上</td></tr><tr><td align="center">+</td><td align="left">扩展 r、w 权限，使 r 可写（从文件头开始覆盖写），使 w 可读（先覆盖，后读写）。</td><td></td></tr><tr><td align="center">a</td><td align="left">以追加形式打开文件操作，打开后指针在文件末尾。</td><td>~ +（读写），~ b<br>，~ b+</td></tr><tr><td align="center">b</td><td align="left">以二进制的形式进行文件读写。一般用于非文本文件。</td><td></td></tr></tbody></table><h3 id="11-2-write"><a href="#11-2-write" class="headerlink" title="11.2 write"></a>11.2 write</h3><p><code>file.write(string)</code></p><p>向file中写入<code>string</code>字符串。</p><blockquote><p>必须以 <code>w</code>及<code>w组合</code> 或者 <code>a</code>及<code>a组合</code> 打开，否则会报错。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">wf=open("./demo.txt","+w")wf.write("sdnakjldnvn435746954u83o2abc123")wf.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-2-read"><a href="#11-2-read" class="headerlink" title="11.2 read"></a>11.2 read</h3><p><code>file.read(size)</code></p><p>从file中读取字符串。</p><blockquote><p>size 读取的数据长度。实际指读取指针的移动距离。未指定为完全读取。</p><p>再次使用read会接着上次的位置继续读取。</p></blockquote><p><code>file.seek(offset[,whence])</code> </p><p>指针从whence指定位置开始往后移动offset个字符。</p><blockquote><p>offset 移动的字符长度</p><p>whence 开始的位置，默认为0。0为开头，1为当前位置，2为末尾。如果打开方式不是 <code>rb</code> ，则强制为0。</p></blockquote><p><code>text=file.readline()</code> </p><p>读取一行内容。</p><p><code>texts=file.readlines()</code> </p><p>读取全部行。返回一个列表。行号为索引。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rf=open("./demo.txt","r")rf.readline()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-3-代码示例"><a href="#11-3-代码示例" class="headerlink" title="11.3 代码示例"></a>11.3 代码示例</h3><p>以下代码为创建demo.txt文件，然后写入 <code>....</code> ，再然后读取、输出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">wf=open("./demo.txt","+w")wf.write("sdnakjldnvn435746954u83o2abc123")wf.close()rf=open("./demo.txt","r",buffering=1)print(rf.read(10))print(rf.read(10))rf.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-OS-Path"><a href="#12-OS-Path" class="headerlink" title="12. OS - Path"></a>12. OS - Path</h2><p>引入模块<code>import os</code></p><ul><li><p>判断路径</p><p><code>os.path.exists(path)</code> </p><p>判断路径是否存在。返回bool值</p></li><li><p>创建路径</p><p><code>os.mkdir(path)</code></p><p>创建单级菜单。也就是指定路径的每一级，然后创建最后一层的文件夹。</p><blockquote><p>当最后一级前的部分有不存在的则会报错。所以建议结合<code>exists()</code></p></blockquote><p><code>os.makedirs(path)</code></p><p>创建多级菜单，同样指定路径的每一级，任意一级不存在就会创建，直至创建完最后一级。</p></li><li><p>删除路径</p><p><code>rmdir(path)</code> 删除指定路径，但前提是路径中没有文件。否则会报错。同样，路径不存在也会报错。</p><p>如果需要完全删除可使用下方代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import shutilshutil.rmtree(path)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>遍历目录</p><p><code>os.walk(top,topdown,onerror,followlinks)</code> </p><ul><li><p>top 为遍历的路径。</p></li><li><p>topdown 布尔值，指定是否为从上到下遍历。默认为true。</p></li><li><p>onerror 遍历出现错误时的处理方式，默认为忽略。</p></li><li><p>followlinks ———……</p></li></ul><p>返回一个元组。</p><p>​       三个元素：dirpath，dirnanes，filenames。</p><ul><li>dirpath– 当前遍历路径。是一个字符串</li><li>dirnames– 遍历时的所有路径。是一个列表。</li><li>filenames– 遍历到的文件。是一个列表。</li></ul></li></ul><h3 id="12-5-删除文件"><a href="#12-5-删除文件" class="headerlink" title="12.5 删除文件"></a>12.5 删除文件</h3><h3 id="12-6-修改路径与文件名"><a href="#12-6-修改路径与文件名" class="headerlink" title="12.6 修改路径与文件名"></a>12.6 修改路径与文件名</h3><h3 id="12-7-获取文件信息"><a href="#12-7-获取文件信息" class="headerlink" title="12.7 获取文件信息"></a>12.7 获取文件信息</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2021/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><hr><p>常见的数据类型有：<br>[byte](#1. byte)，<a href="#char">char</a>，<a href="#short">short</a>，<a href="#int">int</a>，<a href="#float">float</a>，<a href="#long">long</a>，<a href="#double">double</a>，<a href="#date">date</a>，<a href="#date">datetime</a>，<a href="#other">other</a></p><div id="byte"></div><h3 id="1-byte"><a href="#1-byte" class="headerlink" title="1. byte"></a>1. byte</h3><p>​    byte 为字节。有点常识就知道   1字（节）=8位。即用八个二进制位来表示，所以有</p><p>​    (-2<sup>7</sup>)~(2<sup>7</sup>-1)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">byte a=1;//  -128~127<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <u>？？？为啥整数比负数少一个？？？</u></p><p>​    是因为   -128<del>-1可以用 10000000</del>11111111 来表示</p><p>​    开头的 ‘1’ 表示此数为负，只能用 00000000~01111111来表示0~127，因为再加一就是-128啦。    </p><div id="char"></div><p></p><h3 id="2-char"><a href="#2-char" class="headerlink" title="2. char"></a>2. char</h3><p>​    char 类型占用一字节，8个二进制位。</p><p>​    char为字符型，学过几门语言的人都知道：在程序中大小写英文字母，以及数字的数据大小就是一个字符。与 byte 所占内存一样为一字节。如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">char b='a';//也就是ASCII表示的字符。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是声明一个字符变量 a，给其赋值为字符 “a”。</p><div id="short"></div><h3 id="3-short"><a href="#3-short" class="headerlink" title="3. short"></a>3. short</h3><p> short 用来定义数字变量。一般很少用，其大小为两个字节，也就是16个二进制位。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">short c;// -32,768 ~ 32,768-1。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  可表示 (-2<sup>15</sup>)~(2<sup>15</sup>-1)</p><p>  理解过程看 byte型。</p><div id="int"></div><h3 id="4-int"><a href="#4-int" class="headerlink" title="4. int"></a>4. int</h3><p>  int 类型占用两字节，32个二进制位。<br>  可表示 (-2<sup>31</sup>)~(2<sup>31</sup>-1)</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int d; //-2,147,483,648 ~ 2,147,483,647    正负2十多亿<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  int类型较为常用，相比较short，int表示的数更不容易溢出，切占用内存不大。</p><div id="float"></div><h3 id="5-float"><a href="#5-float" class="headerlink" title="5. float"></a>5. float</h3><p>  float类型占用四字节，32个二进制位。</p><p>  可表示 (-3.4x10<sup>38</sup>)~(3.4x10<sup>38</sup>)</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">float e;//大概情况为越偏离0，越不精确。32位进制位分别用作字符位（正负），整数位和尾数。建议先了解编程中的多位数科学技术法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <a href="https://blog.csdn.net/albertsh/article/details/92385277">精确度以及表示范围详解（点我！点我！）</a></p><p>​    float类型为唯二的能表示小数的数据类型之一，另一个就是double类型。相比较double的64位，float占的内存更小。</p><div id="long"></div><h3 id="6-long"><a href="#6-long" class="headerlink" title="6. long"></a>6. long</h3><p><span id="long"></span></p><p>  long类型占用64个二进制位。</p><p>可表示 (-2<sup>63</sup>)~(2<sup>63</sup>-1)</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">long f;//-9,223,372,036,854,775,8078  ~  9,223,372,036,854,775,807<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  long类型一般用于特殊用途，毕竟这么大的数生活中不怎么用得到。但是，联想一下，64位。。。<br>  能否想到我们的电脑。同为64位。所以long类型就是我们的64位机的单个读取单位。</p>  <div id="double"></div><h3 id="7-double"><a href="#7-double" class="headerlink" title="7. double"></a>7. double</h3><p>  double类型  8字节，64个二进制位。</p><p>  float的升级版。升级版说明 double 的特点。</p><p>​    一般刚学编程语言的人做题时自己定义 float 型无法通过，可以换成 double 试试。因为 double 的精度更高。所以根据自己的需求选择 double 还是 float 。</p>  <div id="date"></div><h3 id="8-date"><a href="#8-date" class="headerlink" title="8. date"></a>8. date</h3><p>  此类型与datetime，localtime，关系紧密。在各个语言中，有的只有一种，有的都存在。不同语言规定不同。比如在JavaScript 中只有date，没有datetime。date的格式如下</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> time<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2021-08-21T05:12:39.827Z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  但在C#中，没有date类型，只有datetime类型。</p>  <pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System;namespace ConsoleApp1{    class Program    {        static void Main(string[] args)        {            DateTime time = DateTime.Now;            Console.WriteLine(time);            Console.ReadKey();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">2021/8/21 13:19:29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    而HTML中，这三种又都存在。特别在input中。</p><ul><li><p>指定为date类型时，只能输入年月日。</p><input type="date" style="width:50%;margin:0 auto"></li><li><p>指定为datetime时，只能输入年月日时分。但现在浏览器已不支持此控件。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/datetime">详细声明见此</a></p><input type="datetime-local" style="width:50%;margin:0 auto">    </li><li><p>指定为datetime-local时，只能输入年月日时分。</p><input type="datetime-local" style="width:50%;margin:0 auto"></li></ul><p>   具体数据显示格式根据语言不同也不同。</p>  <div id="other"></div><h3 id="9-other"><a href="#9-other" class="headerlink" title="9. other"></a>9. other</h3><p>  other 是指这几种类型可以与 sign，unsign，还有叠加形式。</p><p>如：</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">long long g;//128位unsign int h;//无符号整型。划负为正，正数的范围乘2.long int i；//还是int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  除此之外，个别语言还有 WORD 型（字，两字节。），DWORD 型，等。</p><hr><p>  不同的语言也有自己特有的，比如数据库一般都有的 datetime类型，text类型，decimal类型（也是表示小数的），imag类型（不错，就是存图片的）等等。 了解每个数据类型，就是为了根据自己的需求定义适合的数据类型。不能计算 1 + 1 就定义两个 long 类型 。养成好习惯，才能更高效合理的利用计算机有限的内存资源。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win添加右键新建项</title>
      <link href="/2021/08/21/win%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E9%A1%B9/"/>
      <url>/2021/08/21/win%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="右键新建菜单添加新项"><a href="#右键新建菜单添加新项" class="headerlink" title="右键新建菜单添加新项"></a>右键新建菜单添加新项</h1><hr><p>​    **<code>|ू･ω･</code> )检查下道具（没有js的添加项）`</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/1.png" style="zoom: 67%;"><hr><h2 id="1-打开注册表编辑器（regedit）"><a href="#1-打开注册表编辑器（regedit）" class="headerlink" title="1. 打开注册表编辑器（regedit）"></a>1. 打开注册表编辑器（regedit）</h2><p>​         win+R召唤“运行”对话框-》输入”regedit”-》回车。或者在开始菜单的搜索框输入“注册表编辑器”or“regedit”。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/2.png" style="zoom: 67%;"><h2 id="2-找到系统已统计目标后缀名"><a href="#2-找到系统已统计目标后缀名" class="headerlink" title="2. 找到系统已统计目标后缀名"></a>2. 找到系统已统计目标后缀名</h2><p>​        Ctrl+F召唤“搜索对话框”-》输入想要添加的新建文件的后缀名，前加‘.’，（eg：.js）</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/3.png" style="zoom: 50%;"><p>​        如图：</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/4.png" style="zoom:67%;"><h2 id="3-添加右键新建项"><a href="#3-添加右键新建项" class="headerlink" title="3. 添加右键新建项"></a>3. 添加右键新建项</h2><p>​        找到后缀文件夹-》右键新建项（命名为“ShellNew”）-》      ▲！别输入空格</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/5.png" style="zoom:67%;"><p>​          鼠标在“ShellNew”目录上右键-》新建-》字符串值（命名为NullFile）      ▲！别输入空格<br>​    </p><p>​    </p><pre><code>     [==也可以新建成特定样版文件==](#补充) </code></pre><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/6.png" style="zoom:67%;"><h2 id="4-验证是否成功"><a href="#4-验证是否成功" class="headerlink" title="4. 验证是否成功"></a>4. 验证是否成功</h2><p>​    返回桌面右键查看应该就出现了。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/7.png" style="zoom:120%;"><ul><li>(命名为“filename”时的效果！！注意文件名：默认还是“新建xxx.js”)</li></ul><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/8.png" style="zoom:67%;"><p><b>    如果没有显示可能情况：</b></p><ul><li>重命名时输入空格。</li></ul><hr><div id="补充"></div><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>​    <strong><strong>补充内容</strong></strong>：</p><h2 id="1-新建文件并输入模板。"><a href="#1-新建文件并输入模板。" class="headerlink" title="1. 新建文件并输入模板。"></a>1. 新建文件并输入模板。</h2><p>​    在一个偏僻的位置新建一个与添加的格式后缀相同的文件.(eg：123.js)</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/9.png" style="zoom:67%;"><h2 id="2-指定文件路径。"><a href="#2-指定文件路径。" class="headerlink" title="2. 指定文件路径。"></a>2. 指定文件路径。</h2><p>​    在添加字符串值时重命名为“filename”-》右键filename项修改，填入刚刚新建的文件的path+文件名。</p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag1/10.png" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux换源</title>
      <link href="/2021/08/14/Linux%E6%8D%A2%E6%BA%90/"/>
      <url>/2021/08/14/Linux%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="kali-Linux更换源-其他源也可通过这种方式添加"><a href="#kali-Linux更换源-其他源也可通过这种方式添加" class="headerlink" title="kali Linux更换源(其他源也可通过这种方式添加)"></a><code>kali</code> Linux更换源(其他源也可通过这种方式添加)</h2><p>主要解决国内大多数linux系统下载软件以及其他东西时网速过慢。</p><hr><h2 id="1-找配置文件"><a href="#1-找配置文件" class="headerlink" title="1.找配置文件"></a>1.找配置文件</h2><p>进入源列表文件夹</p><ul><li>可能不同的Linux下文件夹的结构不同，可以通过一级一级向下递进找到sources.list。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo cd /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-找链接"><a href="#2-找链接" class="headerlink" title="2.找链接"></a>2.找链接</h2><p>打开<span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://developer.aliyun.com/mirror/kali?spm=a2c6h.13651102.0.0.1d231b115YDKhc">这个</a><span class="github-emoji"><span>👈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>网站，复制源的链接。</p><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h2><p>回到Linux，打开sources.list文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vi sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 进入插入模式（点击‘i’进入编辑模式）</p><p>如果没有管理员权限会保存失败。</p><p>删除其他源，如果原来就没有的话直接添加进去（Linux命令行中Ctrl+shift+v复制）。</p><h2 id="5-保存"><a href="#5-保存" class="headerlink" title="5.保存"></a>5.保存</h2><p>Esc退出编辑模式，点击‘：’输入‘wq’进行保存并退出（write ，quit）。</p><h2 id="6-更新"><a href="#6-更新" class="headerlink" title="6.更新"></a>6.更新</h2><p>输入下列命令进行一些更新。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get updatesudo apt-get upgradesudo apt-get dist-upgradesudo apt-get clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/14/hello-world/"/>
      <url>/2021/08/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎使用 <a href="https://hexo.io/">Hexo</a>! 这是你第一篇文章。去<a href="https://hexo.io/docs/">documentation</a>可查看更多信息。如果你使用hexo时有问题，可以去 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 解决疑问，或者到 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>咨询我。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建另一篇文章"><a href="#创建另一篇文章" class="headerlink" title="创建另一篇文章"></a>创建另一篇文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>了解更多: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>了解更多: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署至远程网站"><a href="#部署至远程网站" class="headerlink" title="部署至远程网站"></a>部署至远程网站</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>了解更多: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win添加开机启动</title>
      <link href="/2021/08/14/win%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/08/14/win%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="如何添加开机启动项"><a href="#如何添加开机启动项" class="headerlink" title="如何添加开机启动项"></a>如何添加开机启动项</h2><ul><li>一般应用都有开机启动的选项.</li><li>但是有的应用就偏偏没有，或者一些破解软件的开机启动无法启动,</li><li>再或者360等管家就把开机启动弄坏了</li></ul><hr><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><ul><li><p>在微软标志上右键，或者开始菜单找 “运行” 这一项，运行。</p><p>  （或者 “win+R” ）</p></li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A82.jpg"></p><h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><ul><li><p>在输入框输入</p><pre class="line-numbers language-shell"><code class="language-shell">shell:startup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A83.png"></p><p>然后点 “确定”。</p><h3 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h3><ul><li>在打开的文件夹里拖入想要开机启动的程序的快捷方式。</li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A84.png"></p><h2 id="如果想关闭开机启动项……"><a href="#如果想关闭开机启动项……" class="headerlink" title="如果想关闭开机启动项……"></a>如果想关闭开机启动项……</h2><ul><li>有 N 种方式，我就不多说了。</li><li>如果觉得360管理打开太麻烦，可以用任务管理器。<span class="github-emoji"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul><p><img src="https://gitee.com/blogofxyz/blog-photo/raw/master/imag/win%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A85.png"></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则语法整理</title>
      <link href="/2021/08/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/"/>
      <url>/2021/08/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式基础语法字符"><a href="#正则表达式基础语法字符" class="headerlink" title="正则表达式基础语法字符"></a>正则表达式基础语法字符</h2><p>   <strong>先了解两个文中用到的概念，一些语言中也有类似的功能。</strong></p><ul><li><p>贪婪模式    ：贪婪模式则尽可能多的匹配所搜索的字符串。</p></li><li><p>非贪婪模式：尽可能少的匹配所搜索的字符串。</p><hr></li></ul><h2 id="1-常用字符"><a href="#1-常用字符" class="headerlink" title="1. 常用字符"></a>1. 常用字符</h2><table><thead><tr><th align="left">符号</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，<code>n</code>匹配字符<code>n</code>。<code>\n</code>匹配一个换行符。串行<code>\\</code>匹配<code>\</code>而<code>\(</code>则匹配<code>(</code>。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。+ 等价于{1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。? 等价于{0,1}。</td></tr><tr><td align="left">{<em>n</em>,<em>m</em>}</td><td align="left"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>，m可省略。最少匹配<em>n</em>次且最多匹配<em>m</em>次。逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。例如，对于字符串<code>oooo</code>，<code>o+?</code>将匹配单个<code>o</code>，而<code>o+</code>将匹配所有<code>o</code>。</td></tr><tr><td align="left">.</td><td align="left">匹配除<code>\n</code>之外的任何单个字符。要匹配包括\n在内的任何字符，请使用像`(.</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配<code>pattern</code>并获取这一匹配。要匹配圆括号字符，请使用<code>\(</code>或<code>\)</code>。可内嵌  `x</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配<code>pattern</code>但不获取匹配结果，即非获取匹配。这在使字符`(</td></tr><tr><td align="left">(?=pattern)</td><td align="left">正向肯定预查，在任何匹配<code>pattern</code>的字符串开始处匹配查找字符串。非获取匹配。如，`Windows(?=95</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。非获取匹配。<br>`Windows(?!95</td></tr><tr><td align="left">(?&lt;=pattern)</td><td align="left">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，`(?&lt;=95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类拟，只是方向相反。例如`(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配x或y。例如，`z</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如，<code>[abc]</code>可以匹配<code>plain</code>中的<code>a</code>。</td></tr><tr><td align="left">[^xyz]</td><td align="left">不匹配括号内任意一个字符。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。<br>如：<code>[0-9]</code>匹配数字，<code>[a-zA-Z]</code>匹配所有字母</td></tr><tr><td align="left">[^a-z]</td><td align="left">排除指定范围。<br>如：<code>[\^0-9]</code>匹配数字外的任意字符</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界。<br>如：d\b    匹配以d结尾的单词。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[\f\n\r\t\v]</code>。</td></tr><tr><td align="left">\d</td><td align="left">匹配数字字符。等价于<code>[0-9]</code>。</td></tr><tr><td align="left">\w</td><td align="left">匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code>。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。不匹配指定条件字符结尾的字符串</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于<code>[^\f\n\r\t\v]</code>。</td></tr><tr><td align="left">\D</td><td align="left">匹配非数字字符。等价于<code>[\^0-9]</code>。</td></tr><tr><td align="left">\W</td><td align="left">匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code>。</td></tr><tr><td align="left">\f</td><td align="left">匹配换页符。等价于<code>\x0c</code>和<code>\cL</code>。</td></tr><tr><td align="left">\n</td><td align="left">匹配换行符。等价于<code>\x0a</code>和<code>\cJ</code>。</td></tr><tr><td align="left">\r</td><td align="left">匹配回车符。等价于<code>\x0d</code>和<code>\cM</code>。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于<code>\x0b</code>和<code>\cK</code>。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于<code>\x09</code>和<code>\cI</code>。</td></tr></tbody></table><h2 id="2-比较难理解的字符"><a href="#2-比较难理解的字符" class="headerlink" title="2. 比较难理解的字符"></a>2. 比较难理解的字符</h2><table><thead><tr><th align="left">符号</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如，<code>\cM</code>匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的c字符。</td></tr><tr><td align="left">\xn</td><td align="left">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，\x41匹配A。\x041则等价于<code>\x04&amp;1</code>。正则表达式中可以使用ASCII编码。.</td></tr><tr><td align="left">\num</td><td align="left">匹配<code>num</code>，其中<code>num </code>是一个正整数。对所获取的匹配的引用。例如，<code>(.)\1</code>匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果<em>n</em>为八进制数字（0-7），则n为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则<code>\nm</code>将匹配八进制转义值<code>nm</code>。</td></tr><tr><td align="left">\nml</td><td align="left">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配n，其中n是一个用四个十六进制数字表示的<code>Unicode</code>字符。例如，<code>\u00A9</code>匹配版权符号（©）。</td></tr></tbody></table><h2 id="3-常用正则表达式"><a href="#3-常用正则表达式" class="headerlink" title="3. 常用正则表达式"></a>3. 常用正则表达式</h2><p><mark>正则表达式筛选式不唯一，有的简单，有的复杂，不要惊讶。</mark></p><p><mark>更新中</mark></p><table><thead><tr><th align="center">用户名</th><th align="left"><code>/^[a-z0-9_-]{3,16}$/</code></th></tr></thead><tbody><tr><td align="center">密码</td><td align="left"><code>/^[a-z0-9_-]{6,18}$/</code></td></tr><tr><td align="center">十六进制值</td><td align="left"><code>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</code></td></tr><tr><td align="center">电子邮箱</td><td align="left"><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/ /^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/</code></td></tr><tr><td align="center">URL</td><td align="left"><code>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</code></td></tr><tr><td align="center">IP 地址</td><td align="left"><code>/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</code></td></tr><tr><td align="center">HTML 标签</td><td align="left"><code>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</code></td></tr><tr><td align="center">删除代码\注释</td><td align="left"><code>(?&lt;!http:|\S)//.*$</code></td></tr><tr><td align="center">Unicode编码中的汉字范围</td><td align="left"><code>/^[\u2E80-\u9FFF]+$/</code></td></tr><tr><td align="center">…</td><td align="left">…</td></tr></tbody></table><p>​     </p><p>  声明：本文对一篇文章进行加工，简化，美化产生的。</p><p>原文如下：<a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">点我传送</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于‘俺’</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>成就</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>交流</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎留言"><a href="#欢迎留言" class="headerlink" title="欢迎留言"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p><ul><li><strong>Q Q</strong>：<strong>1970476603</strong></li><li><strong>微信</strong>：<strong>i_19-99-666</strong></li></ul><p>欢迎来访<br><strong>当然不介意小jiejie加我~~</strong></p><h1 id="友链交换"><a href="#友链交换" class="headerlink" title="友链交换"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p><ul><li><strong>名称：</strong>你的博客名称</li><li><strong>地址：</strong>你的博客地址</li><li><strong>简介：</strong>一句话简介</li><li><strong>头像：</strong>你的头像地址</li></ul><p>例如我的博客友链，大家可以加到自己博客里哦：</p><ul><li><strong>名称：</strong>张小白</li><li><strong>地址：</strong><a class="selfurl">https://blogofxyz.gitee.io</a> (国内访问快)/<a class="selfurl">https://blogofxyz.top/</a> (github部署)</li><li><strong>简介：</strong>平时没少学没用东西的一个家伙。</li><li><strong>头像：</strong><a class="selfurl">https://blogofxyz.gitee.io/medias/avatar.jpg</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>类别</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>小伙伴与大佬</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="赞赏名单"><a href="#赞赏名单" class="headerlink" title="赞赏名单"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p><h1 id="友链交换"><a href="#友链交换" class="headerlink" title="友链交换"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p><ul><li><strong>名称：</strong>你的博客名称</li><li><strong>地址：</strong>你的博客地址</li><li><strong>简介：</strong>一句话简介</li><li><strong>头像：</strong>你的头像地址</li></ul><p>例如我的博客友链，大家可以加到自己博客里哦：</p><ul><li><p><strong>名称：</strong>Zhang-little-white</p></li><li><p><strong>地址：</strong> <a style="text-decoration:none" class="selfurl">https://blogofxyz.gitee.io</a> (gitee访问快)</p><p><a style="text-decoration:none;    white-space: pre;">   &nbsp; &nbsp; &nbsp;  &nbsp;</a>            <a style="text-decoration:none" class="selfurl">https://blogofxyz.top/ </a>(github部署)</p></li><li><p><strong>简介：</strong>小白一个</p></li><li><p><strong>头像：</strong><a style="text-decoration:none" class="selfurl">https://blogofxyz.gitee.io/medias/avatar.jpg</a></p></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>导航</title>
      <link href="/navigate/index.html"/>
      <url>/navigate/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
